(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["ReactMD"] = factory(require("react"), require("react-dom"));
	else
		root["ReactMD"] = factory(root["React"], root["ReactDOM"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.injectTooltip = exports.Toolbar = exports.TextField = exports.TabPanel = exports.MenuTab = exports.Tab = exports.Tabs = exports.TabsContainer = exports.Snackbar = exports.Sidebar = exports.Slider = exports.Subheader = exports.Switch = exports.Radio = exports.RadioGroup = exports.Checkbox = exports.SelectionControlGroup = exports.SelectionControl = exports.SelectField = exports.LinearProgress = exports.CircularProgress = exports.TimePicker = exports.DatePicker = exports.Paper = exports.JumpToContentLink = exports.CloseButton = exports.NavigationDrawer = exports.Menu = exports.MediaOverlay = exports.Media = exports.ListItemControl = exports.ListItem = exports.List = exports.injectInk = exports.Portal = exports.FocusContainer = exports.IconSeparator = exports.Collapse = exports.AccessibleFakeInkedButton = exports.AccessibleFakeButton = exports.FontIcon = exports.FileUpload = exports.FileInput = exports.SpeedDial = exports.ExpansionPanel = exports.ExpansionList = exports.Drawer = exports.Divider = exports.Dialog = exports.SelectFieldColumn = exports.TablePagination = exports.EditDialogColumn = exports.TableCardHeader = exports.TableColumn = exports.TableRow = exports.TableBody = exports.TableHeader = exports.DataTable = exports.Chip = exports.CardActionOverlay = exports.CardText = exports.CardActions = exports.CardMedia = exports.CardTitle = exports.Card = exports.IconButton = exports.FloatingButton = exports.RaisedButton = exports.FlatButton = exports.Button = exports.BottomNavigation = exports.Avatar = exports.Autocomplete = undefined;
	
	var _Autocompletes = __webpack_require__(151);
	
	var _Autocompletes2 = _interopRequireDefault(_Autocompletes);
	
	var _Avatars = __webpack_require__(153);
	
	var _Avatars2 = _interopRequireDefault(_Avatars);
	
	var _BottomNavigations = __webpack_require__(156);
	
	var _BottomNavigations2 = _interopRequireDefault(_BottomNavigations);
	
	var _Buttons = __webpack_require__(160);
	
	var _Buttons2 = _interopRequireDefault(_Buttons);
	
	var _Cards = __webpack_require__(165);
	
	var _Cards2 = _interopRequireDefault(_Cards);
	
	var _Chips = __webpack_require__(167);
	
	var _Chips2 = _interopRequireDefault(_Chips);
	
	var _DataTables = __webpack_require__(178);
	
	var _DataTables2 = _interopRequireDefault(_DataTables);
	
	var _Dialogs = __webpack_require__(182);
	
	var _Dialogs2 = _interopRequireDefault(_Dialogs);
	
	var _Dividers = __webpack_require__(183);
	
	var _Dividers2 = _interopRequireDefault(_Dividers);
	
	var _Drawers = __webpack_require__(185);
	
	var _Drawers2 = _interopRequireDefault(_Drawers);
	
	var _ExpansionPanels = __webpack_require__(189);
	
	var _FABTransitions = __webpack_require__(191);
	
	var _FileInputs = __webpack_require__(193);
	
	var _FileInputs2 = _interopRequireDefault(_FileInputs);
	
	var _FontIcons = __webpack_require__(96);
	
	var _FontIcons2 = _interopRequireDefault(_FontIcons);
	
	var _Helpers = __webpack_require__(194);
	
	var _Inks = __webpack_require__(197);
	
	var _Inks2 = _interopRequireDefault(_Inks);
	
	var _Lists = __webpack_require__(199);
	
	var _Media = __webpack_require__(200);
	
	var _Media2 = _interopRequireDefault(_Media);
	
	var _Menus = __webpack_require__(202);
	
	var _Menus2 = _interopRequireDefault(_Menus);
	
	var _NavigationDrawers = __webpack_require__(205);
	
	var _NavigationDrawers2 = _interopRequireDefault(_NavigationDrawers);
	
	var _Papers = __webpack_require__(206);
	
	var _Papers2 = _interopRequireDefault(_Papers);
	
	var _Pickers = __webpack_require__(223);
	
	var _Progress = __webpack_require__(226);
	
	var _SelectionControls = __webpack_require__(235);
	
	var _SelectFields = __webpack_require__(228);
	
	var _SelectFields2 = _interopRequireDefault(_SelectFields);
	
	var _Sliders = __webpack_require__(245);
	
	var _Sliders2 = _interopRequireDefault(_Sliders);
	
	var _Sidebars = __webpack_require__(237);
	
	var _Sidebars2 = _interopRequireDefault(_Sidebars);
	
	var _Snackbars = __webpack_require__(248);
	
	var _Snackbars2 = _interopRequireDefault(_Snackbars);
	
	var _Subheaders = __webpack_require__(107);
	
	var _Subheaders2 = _interopRequireDefault(_Subheaders);
	
	var _Tabs = __webpack_require__(254);
	
	var _TextFields = __webpack_require__(259);
	
	var _TextFields2 = _interopRequireDefault(_TextFields);
	
	var _Toolbars = __webpack_require__(261);
	
	var _Toolbars2 = _interopRequireDefault(_Toolbars);
	
	var _Tooltips = __webpack_require__(264);
	
	var _Tooltips2 = _interopRequireDefault(_Tooltips);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Exposes for UMD -> ReactMD.Autocomplete
	exports.Autocomplete = _Autocompletes2.default;
	exports.Avatar = _Avatars2.default;
	exports.BottomNavigation = _BottomNavigations2.default;
	exports.Button = _Buttons2.default;
	exports.FlatButton = _Buttons.FlatButton;
	exports.RaisedButton = _Buttons.RaisedButton;
	exports.FloatingButton = _Buttons.FloatingButton;
	exports.IconButton = _Buttons.IconButton;
	exports.Card = _Cards2.default;
	exports.CardTitle = _Cards.CardTitle;
	exports.CardMedia = _Cards.CardMedia;
	exports.CardActions = _Cards.CardActions;
	exports.CardText = _Cards.CardText;
	exports.CardActionOverlay = _Cards.CardActionOverlay;
	exports.Chip = _Chips2.default;
	exports.DataTable = _DataTables2.default;
	exports.TableHeader = _DataTables.TableHeader;
	exports.TableBody = _DataTables.TableBody;
	exports.TableRow = _DataTables.TableRow;
	exports.TableColumn = _DataTables.TableColumn;
	exports.TableCardHeader = _DataTables.TableCardHeader;
	exports.EditDialogColumn = _DataTables.EditDialogColumn;
	exports.TablePagination = _DataTables.TablePagination;
	exports.SelectFieldColumn = _DataTables.SelectFieldColumn;
	exports.Dialog = _Dialogs2.default;
	exports.Divider = _Dividers2.default;
	exports.Drawer = _Drawers2.default;
	exports.ExpansionList = _ExpansionPanels.ExpansionList;
	exports.ExpansionPanel = _ExpansionPanels.ExpansionPanel;
	exports.SpeedDial = _FABTransitions.SpeedDial;
	exports.FileInput = _FileInputs2.default;
	exports.FileUpload = _FileInputs.FileUpload;
	exports.FontIcon = _FontIcons2.default;
	exports.AccessibleFakeButton = _Helpers.AccessibleFakeButton;
	exports.AccessibleFakeInkedButton = _Helpers.AccessibleFakeInkedButton;
	exports.Collapse = _Helpers.Collapse;
	exports.IconSeparator = _Helpers.IconSeparator;
	exports.FocusContainer = _Helpers.FocusContainer;
	exports.Portal = _Helpers.Portal;
	exports.injectInk = _Inks2.default;
	exports.List = _Lists.List;
	exports.ListItem = _Lists.ListItem;
	exports.ListItemControl = _Lists.ListItemControl;
	exports.Media = _Media2.default;
	exports.MediaOverlay = _Media.MediaOverlay;
	exports.Menu = _Menus2.default;
	exports.NavigationDrawer = _NavigationDrawers2.default;
	exports.CloseButton = _NavigationDrawers.CloseButton;
	exports.JumpToContentLink = _NavigationDrawers.JumpToContentLink;
	exports.Paper = _Papers2.default;
	exports.DatePicker = _Pickers.DatePicker;
	exports.TimePicker = _Pickers.TimePicker;
	exports.CircularProgress = _Progress.CircularProgress;
	exports.LinearProgress = _Progress.LinearProgress;
	exports.SelectField = _SelectFields2.default;
	exports.SelectionControl = _SelectionControls.SelectionControl;
	exports.SelectionControlGroup = _SelectionControls.SelectionControlGroup;
	exports.Checkbox = _SelectionControls.Checkbox;
	exports.RadioGroup = _SelectionControls.RadioGroup;
	exports.Radio = _SelectionControls.Radio;
	exports.Switch = _SelectionControls.Switch;
	exports.Subheader = _Subheaders2.default;
	exports.Slider = _Sliders2.default;
	exports.Sidebar = _Sidebars2.default;
	exports.Snackbar = _Snackbars2.default;
	exports.TabsContainer = _Tabs.TabsContainer;
	exports.Tabs = _Tabs.Tabs;
	exports.Tab = _Tabs.Tab;
	exports.MenuTab = _Tabs.MenuTab;
	exports.TabPanel = _Tabs.TabPanel;
	exports.TextField = _TextFields2.default;
	exports.Toolbar = _Toolbars2.default;
	exports.injectTooltip = _Tooltips2.default;
	
	// Exposes for ES6 modules
	
	exports.default = {
	  Autocomplete: _Autocompletes2.default,
	  Avatar: _Avatars2.default,
	  BottomNavigation: _BottomNavigations2.default,
	
	  Button: _Buttons2.default,
	  FlatButton: _Buttons.FlatButton,
	  RaisedButton: _Buttons.RaisedButton,
	  FloatingButton: _Buttons.FloatingButton,
	  IconButton: _Buttons.IconButton,
	
	  Card: _Cards2.default,
	  CardTitle: _Cards.CardTitle,
	  CardMedia: _Cards.CardMedia,
	  CardActions: _Cards.CardActions,
	  CardText: _Cards.CardText,
	  CardActionOverlay: _Cards.CardActionOverlay,
	
	  Chip: _Chips2.default,
	
	  DataTable: _DataTables2.default,
	  TableHeader: _DataTables.TableHeader,
	  TableBody: _DataTables.TableBody,
	  TableRow: _DataTables.TableRow,
	  TableColumn: _DataTables.TableColumn,
	  TableCardHeader: _DataTables.TableCardHeader,
	  EditDialogColumn: _DataTables.EditDialogColumn,
	  TablePagination: _DataTables.TablePagination,
	  SelectFieldColumn: _DataTables.SelectFieldColumn,
	
	  Dialog: _Dialogs2.default,
	  Divider: _Dividers2.default,
	  Drawer: _Drawers2.default,
	
	  ExpansionList: _ExpansionPanels.ExpansionList,
	  ExpansionPanel: _ExpansionPanels.ExpansionPanel,
	
	  SpeedDial: _FABTransitions.SpeedDial,
	
	  FileInput: _FileInputs2.default,
	  FileUpload: _FileInputs.FileUpload,
	
	  FontIcon: _FontIcons2.default,
	  AccessibleFakeButton: _Helpers.AccessibleFakeButton,
	  AccessibleFakeInkedButton: _Helpers.AccessibleFakeInkedButton,
	  Collapse: _Helpers.Collapse,
	  IconSeparator: _Helpers.IconSeparator,
	  FocusContainer: _Helpers.FocusContainer,
	  Portal: _Helpers.Portal,
	
	  injectInk: _Inks2.default,
	
	  List: _Lists.List,
	  ListItem: _Lists.ListItem,
	  ListItemControl: _Lists.ListItemControl,
	
	  Media: _Media2.default,
	  MediaOverlay: _Media.MediaOverlay,
	
	  Menu: _Menus2.default,
	
	  NavigationDrawer: _NavigationDrawers2.default,
	  CloseButton: _NavigationDrawers.CloseButton,
	  JumpToContentLink: _NavigationDrawers.JumpToContentLink,
	
	  Paper: _Papers2.default,
	
	  DatePicker: _Pickers.DatePicker,
	  TimePicker: _Pickers.TimePicker,
	
	  CircularProgress: _Progress.CircularProgress,
	  LinearProgress: _Progress.LinearProgress,
	
	  SelectField: _SelectFields2.default,
	
	  SelectionControl: _SelectionControls.SelectionControl,
	  SelectionControlGroup: _SelectionControls.SelectionControlGroup,
	  Checkbox: _SelectionControls.Checkbox,
	  RadioGroup: _SelectionControls.RadioGroup,
	  Radio: _SelectionControls.Radio,
	  Switch: _SelectionControls.Switch,
	
	  Subheader: _Subheaders2.default,
	
	  Slider: _Sliders2.default,
	  Sidebar: _Sidebars2.default,
	  Snackbar: _Snackbars2.default,
	
	  TabsContainer: _Tabs.TabsContainer,
	  Tabs: _Tabs.Tabs,
	  Tab: _Tabs.Tab,
	  MenuTab: _Tabs.MenuTab,
	  TabPanel: _Tabs.TabPanel,
	
	  TextField: _TextFields2.default,
	  Toolbar: _Toolbars2.default,
	  injectTooltip: _Tooltips2.default
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	if (true) {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;
	
	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };
	
	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(342)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = require('./factoryWithThrowingShims')();
	}


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */
	
	(function () {
		'use strict';
	
		var hasOwn = {}.hasOwnProperty;
	
		function classNames () {
			var classes = [];
	
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;
	
				var argType = typeof arg;
	
				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}
	
			return classes.join(' ');
		}
	
		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = deprecated;
	
	var _warning = __webpack_require__(55);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var warned = {};
	
	function deprecated(validator, reason) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    if (props[propName] != null) {
	      var messageKey = componentName + '.' + propName;
	
	      (0, _warning2.default)(warned[messageKey], 'The ' + location + ' `' + propFullNameSafe + '` of ' + ('`' + componentNameSafe + '` is deprecated. ' + reason + '.'));
	
	      warned[messageKey] = true;
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}
	
	/* eslint-disable no-underscore-dangle */
	function _resetWarned() {
	  warned = {};
	}
	
	deprecated._resetWarned = _resetWarned;
	/* eslint-enable no-underscore-dangle */

/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var LEFT_MOUSE = exports.LEFT_MOUSE = 0;
	var RIGHT_MOUSE = exports.RIGHT_MOUSE = 2;
	
	var TAB = exports.TAB = 9;
	var ENTER = exports.ENTER = 13;
	var ESC = exports.ESC = 27;
	var SPACE = exports.SPACE = 32;
	var PAGE_UP = exports.PAGE_UP = 33;
	var PAGE_DOWN = exports.PAGE_DOWN = 34;
	var END = exports.END = 35;
	var HOME = exports.HOME = 36;
	var LEFT = exports.LEFT = 37;
	var UP = exports.UP = 38;
	var RIGHT = exports.RIGHT = 39;
	var DOWN = exports.DOWN = 40;
	
	var ZERO = exports.ZERO = 48;
	var NINE = exports.NINE = 57;
	var KEYPAD_ZERO = exports.KEYPAD_ZERO = 96;
	var KEYPAD_NINE = exports.KEYPAD_NINE = 105;

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getField;
	/**
	 * Gets the current field for a component that can the field
	 * as either uncontrolled or controlled.
	 *
	 * @param {Object} props - the props object.
	 * @param {Object} state = the state object.
	 * @param {string=} field - the field to extract a value from. Defaults to 'value'.
	 *
	 * @return the field's value.
	 */
	function getField(props, state) {
	  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'value';
	
	  return typeof props[field] !== 'undefined' ? props[field] : state[field];
	}

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = isRequiredForA11y;
	function isRequiredForA11y(validator) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    if (props[propName] == null) {
	      return new Error('The ' + location + ' `' + propFullNameSafe + '` is required to make ' + ('`' + componentNameSafe + '` accessible for users of assistive ') + 'technologies such as screen readers.');
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = controlled;
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Validates the a component is fully controlled or uncontrolled.  If the given prop is not
	 * `undefined`, it will check if the `funcName` is defined and a function. A missing function
	 * will generate an error similar to the built-in React controlled validation message.
	 *
	 * @param {String} funcName - The function name to use for additional validation.
	 * @param {function} validator - The PropTypes validator to use for the given prop.
	 * @return {Error} an error or null.
	 */
	function controlled(validator, funcName) {
	  var fallbackPropName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'defaultValue';
	
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && typeof props[propName] !== 'undefined' && !props.readOnly) {
	      var _PropTypes$func;
	
	      var funcError = (_PropTypes$func = _propTypes2.default.func).isRequired.apply(_PropTypes$func, [props, funcName, componentName, location, propFullName].concat(args));
	      if (funcError) {
	        err = new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' without a ' + ('`' + funcName + '` handler. This will render a read only field. Set either the `' + funcName + '` ') + ('or use the `' + fallbackPropName + '` instead.'));
	      }
	    }
	
	    return err;
	  };
	}

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _invalidIf = __webpack_require__(19);
	
	var _invalidIf2 = _interopRequireDefault(_invalidIf);
	
	var _captureNextEvent = __webpack_require__(36);
	
	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _IconSeparator = __webpack_require__(26);
	
	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);
	
	var _injectInk = __webpack_require__(62);
	
	var _injectInk2 = _interopRequireDefault(_injectInk);
	
	var _injectTooltip = __webpack_require__(48);
	
	var _injectTooltip2 = _interopRequireDefault(_injectTooltip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Button` component can either be a `FlatButton`, `RaisedButton`, `IconButton`, or a
	 * `FloatingButton`.
	 *
	 * A `FlatButton` is a button with no depth on the screen that is ideally used in `Dialog`s
	 * or `CardActions`. The text can be optionally styled with the `primary` or `secondary` colors.
	 *
	 * A `RaisedButton` is a button with some depth to help actions have more prominene in flat
	 * layouts or layouts with varying content. The background can be styled by the light/dark theme,
	 * or optionally the `primary` or `secondary` color.
	 *
	 * An `IconButton` is a button that just displays a `FontIcon` as the child in a circle.
	 * The `FontIcon` can be optionally styled with the `primary` or `secondary` color.
	 *
	 * A `FloatingButton` is a special case. Woop
	 */
	var Button = function (_PureComponent) {
	  _inherits(Button, _PureComponent);
	
	  function Button(props) {
	    _classCallCheck(this, Button);
	
	    var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));
	
	    _this.state = {
	      pressed: false,
	      snackbar: false,
	      snackbarType: null
	    };
	
	    _this._blur = _this._blur.bind(_this);
	    _this._animateForSnackbar = _this._animateForSnackbar.bind(_this);
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleMouseUp = _this._handleMouseUp.bind(_this);
	    _this._handleMouseDown = _this._handleMouseDown.bind(_this);
	    _this._handleTouchEnd = _this._handleTouchEnd.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    return _this;
	  }
	
	  _createClass(Button, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.disabled && !nextProps.disabled && this.state.hover) {
	        this.setState({ hover: false });
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var _this2 = this;
	
	      if (!this.state.pressed && nextState.pressed) {
	        this._timeout = setTimeout(function () {
	          _this2._timeout = null;
	          if (_this2._attemptedBlur) {
	            _this2._attemptedBlur = false;
	
	            _this2.setState({ pressed: false });
	          }
	        }, 450);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	
	      if (this._snackbarTimeout) {
	        clearTimeout(this._snackbarTimeout);
	      }
	
	      window.removeEventListener('click', this._blur);
	    }
	  }, {
	    key: '_getType',
	    value: function _getType(props) {
	      if (props.flat || props.disabled && props.raised) {
	        return 'flat';
	      } else if (props.icon || props.disabled && props.floating) {
	        return 'icon';
	      } else if (props.raised) {
	        return 'raised';
	      } else if (props.floating) {
	        return 'icon md-btn--floating';
	      }
	
	      return 'flat';
	    }
	  }, {
	    key: '_blur',
	    value: function _blur() {
	      if (this.props.disabled) {
	        return;
	      }
	
	      if (this._timeout) {
	        this._attemptedBlur = true;
	      } else {
	        this.setState({ pressed: false });
	      }
	    }
	  }, {
	    key: '_handleMouseUp',
	    value: function _handleMouseUp(e) {
	      if (this.props.onMouseUp) {
	        this.props.onMouseUp(e);
	      }
	
	      this._blur();
	    }
	  }, {
	    key: '_handleMouseDown',
	    value: function _handleMouseDown(e) {
	      if (this.props.onMouseDown) {
	        this.props.onMouseDown(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ pressed: true });
	      }
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      if (this.props.onTouchStart) {
	        this.props.onTouchStart(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ pressed: true });
	      }
	    }
	  }, {
	    key: '_handleTouchEnd',
	    value: function _handleTouchEnd(e) {
	      if (this.props.onTouchEnd) {
	        this.props.onTouchEnd(e);
	      }
	
	      this._blur();
	      (0, _captureNextEvent2.default)('mouseover');
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      if (this.props.onKeyUp) {
	        this.props.onKeyUp(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        window.addEventListener('click', this._blur);
	        this.setState({ pressed: true });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (this.props.onKeyDown) {
	        this.props.onKeyDown(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        window.removeEventListener('click', this._blur);
	        this.setState({ pressed: false });
	      }
	    }
	  }, {
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ hover: true });
	      }
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ hover: false });
	      }
	    }
	  }, {
	    key: '_animateForSnackbar',
	    value: function _animateForSnackbar(multiline, leaveTimeout) {
	      var _this3 = this;
	
	      if (typeof leaveTimeout === 'number') {
	        this._snackbarTimeout = setTimeout(function () {
	          _this3._snackbarTimeout = setTimeout(function () {
	            _this3._snackbarTimeout = null;
	
	            _this3.setState({ snackbar: false });
	          }, leaveTimeout + 150);
	
	          _this3.setState({ snackbarType: null });
	        }, _CSSTransitionGroupTick2.default);
	      } else {
	        this._snackbarTimeout = setTimeout(function () {
	          _this3._snackbarTimeout = null;
	
	          _this3.setState({ snackbar: true, snackbarType: multiline ? 'multiline-' : '' });
	        }, _CSSTransitionGroupTick2.default);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _cn;
	
	      var _props = this.props,
	          className = _props.className,
	          iconClassName = _props.iconClassName,
	          label = _props.label,
	          iconBefore = _props.iconBefore,
	          href = _props.href,
	          primary = _props.primary,
	          secondary = _props.secondary,
	          flat = _props.flat,
	          raised = _props.raised,
	          floating = _props.floating,
	          mini = _props.mini,
	          fixed = _props.fixed,
	          fixedPosition = _props.fixedPosition,
	          disabled = _props.disabled,
	          component = _props.component,
	          ink = _props.ink,
	          tooltip = _props.tooltip,
	          icon = _props.icon,
	          forceIconSize = _props.forceIconSize,
	          forceIconFontSize = _props.forceIconFontSize,
	          props = _objectWithoutProperties(_props, ['className', 'iconClassName', 'label', 'iconBefore', 'href', 'primary', 'secondary', 'flat', 'raised', 'floating', 'mini', 'fixed', 'fixedPosition', 'disabled', 'component', 'ink', 'tooltip', 'icon', 'forceIconSize', 'forceIconFontSize']);
	
	      delete props.children;
	      delete props.tooltipLabel;
	      delete props.tooltipPosition;
	
	      if (href) {
	        delete props.type;
	      }
	
	      var children = this.props.children;
	      var _state = this.state,
	          pressed = _state.pressed,
	          hover = _state.hover,
	          snackbar = _state.snackbar,
	          snackbarType = _state.snackbarType;
	
	      var mdBtnType = this._getType(this.props);
	
	      var Component = component || (href ? 'a' : 'button');
	      if (children || iconClassName) {
	        children = _react2.default.createElement(
	          _FontIcon2.default,
	          { iconClassName: iconClassName, forceSize: forceIconSize, forceFontSize: forceIconFontSize },
	          children
	        );
	      }
	
	      if (children && label) {
	        children = _react2.default.createElement(
	          _IconSeparator2.default,
	          { label: label, iconBefore: iconBefore },
	          children
	        );
	      } else if (label) {
	        children = label;
	      }
	
	      var raisedStyles = raised || floating;
	
	      var themeClassNames = !disabled && (0, _classnames2.default)({
	        'md-text--theme-primary md-ink--primary': !raisedStyles && primary,
	        'md-text--theme-secondary md-ink--secondary': !raisedStyles && secondary,
	        'md-background--primary md-background--primary-hover': raisedStyles && primary,
	        'md-background--secondary md-background--secondary-hover': raisedStyles && secondary,
	        'md-btn--color-primary-active': !raisedStyles && hover && primary,
	        'md-btn--color-secondary-active': !raisedStyles && hover && secondary
	      });
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          disabled: disabled,
	          onTouchStart: this._handleTouchStart,
	          onTouchEnd: this._handleTouchEnd,
	          onMouseDown: this._handleMouseDown,
	          onMouseUp: this._handleMouseUp,
	          onKeyDown: this._handleKeyDown,
	          onKeyUp: this._handleKeyUp,
	          onMouseOver: this._handleMouseOver,
	          onMouseLeave: this._handleMouseLeave,
	          href: href,
	          className: (0, _classnames2.default)('md-inline-block md-btn md-btn--' + mdBtnType, themeClassNames, (_cn = {
	            'md-text': !disabled && !primary && !secondary && !icon && !floating,
	            'md-text--disabled': disabled,
	            'md-pointer--hover': !disabled,
	            'md-btn--text': flat || raised,
	            'md-btn--hover': hover && !disabled,
	            'md-btn--raised-disabled': raised && disabled,
	            'md-btn--raised-pressed': !disabled && raisedStyles && pressed,
	            'md-btn--fixed': fixed
	          }, _defineProperty(_cn, 'md-btn--fixed-' + fixedPosition, floating && fixed), _defineProperty(_cn, 'md-btn--floating-mini', floating && mini), _defineProperty(_cn, 'md-btn--floating-pressed', floating && pressed), _defineProperty(_cn, 'md-btn--snackbar-floating', snackbar), _defineProperty(_cn, 'md-btn--snackbar-floating-' + snackbarType + 'adjust', snackbar && snackbarType !== null), _cn), className)
	        }),
	        ink,
	        tooltip,
	        children
	      );
	    }
	  }]);
	
	  return Button;
	}(_react.PureComponent);
	
	Button.propTypes = {
	  /**
	   * An optional style to apply to the button.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A label to display on a `FlatButton` or a `RaisedButton`. This text can either
	   * be placed before or after an optional `FontIcon` using the `iconBefore` prop.
	   * This is required for `Flat` or `Raised` buttons. It is not allowed for `Icon`
	   * or `Floating` buttons. Use the `tooltipLabel` prop for `Icon` or `Floating` buttons.
	   */
	  label: (0, _invalidIf2.default)(_propTypes2.default.node, 'icon', 'floating'),
	
	  /**
	   * A boolean if the icon should appear before or after the text for a `FlatButton` or
	   * a `RaisedButton`.
	   */
	  iconBefore: _propTypes2.default.bool,
	
	  /**
	   * Any children used to display a `FontIcon` in any version of the button. This will
	   * be used with the `iconClassName` prop. If the `iconClassName` and the `children` prop
	   * are omitted, no icon will be added to the `RaisedButton` or `FlatButton`. An error
	   * will be displayed for the `IconButton` or `FloatingButton`.
	   */
	  children: function children(props, propName, componentName) {
	    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      args[_key - 3] = arguments[_key];
	    }
	
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var err = _propTypes2.default.node.apply(_propTypes2.default, [props, propName, componentName].concat(args));
	
	    var icon = props.icon || props.floating;
	    var missing = !props.children && !props.iconClassName;
	    if (!err && icon && missing) {
	      err = new Error('You created an `' + (props.icon ? 'Icon' : 'Floating') + '` ' + componentNameSafe + ' without ' + 'having the correct props to generate an icon. Expected either the `children` prop or the ' + ('`iconClassName` prop but received children: `' + props.children + '` and iconClassName: ') + ('`' + props.iconClassName + '`.'));
	    }
	
	    return err;
	  },
	
	  /**
	   * An icon className to use in an optional `FontIcon` in any version of the button. This will
	   * be used with the `children` prop. If the `floating` or `icon` props are set to true, this or
	   * the children are required.
	   */
	  iconClassName: _propTypes2.default.string,
	
	  /**
	   * The type for the button. This is required when the `component` prop is not
	   * the 'a' tag, a `function`, or when the `href` prop is defined.
	   */
	  type: function type(props, propName, component) {
	    for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      args[_key2 - 3] = arguments[_key2];
	    }
	
	    var c = props.component;
	    var validator = _propTypes2.default.oneOf(['button', 'submit', 'reset']);
	    if (!props.href && c !== 'a' && typeof c !== 'function') {
	      validator = validator.isRequired;
	    }
	
	    return validator.apply(undefined, [props, propName, component].concat(args));
	  },
	
	  /**
	   * Boolean if the button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional href for the button. This will style the `a` tag as a button.
	   */
	  href: _propTypes2.default.string,
	
	  /**
	   * An optional component to render the button as. This allows you to get all the styles and functionality
	   * of the Button, but as a custom React component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	
	  /**
	   * An optional function to call when the `click` event is triggered.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `touchstart` event is triggered.
	   */
	  onTouchStart: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `touchend` event is triggered.
	   */
	  onTouchEnd: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `mousedown` event is triggered.
	   */
	  onMouseDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `mouseup` event is triggered.
	   */
	  onMouseUp: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `keyup` event is triggered.
	   */
	  onKeyUp: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `keydown` event is triggered.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `mouseover` event is triggered.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `mouseleave` event is triggered.
	   */
	  onMouseLeave: _propTypes2.default.func,
	
	  /**
	   * Boolean if the `FloatingButton` should be fixed to the page. This prop can
	   * only be enabled if the `floating` prop is true.
	   */
	  fixed: (0, _invalidIf2.default)(_propTypes2.default.bool, 'flat', 'raised', 'icon'),
	
	  /**
	   * The position that the `FloatingButton` should be fixed to the page. It will
	   * either be fixed to the top right, top left, bottom right, or bottom left of
	   * the page. This prop is ony used if the `floating` prop and `fixed` prop are
	   * `true`.
	   */
	  fixedPosition: _propTypes2.default.oneOf(['tr', 'tl', 'br', 'bl']).isRequired,
	
	  /**
	   * Boolean if the `FloatingButton` should be `mini`. This prop can only be used
	   * when the `floating` prop is true.
	   */
	  mini: (0, _invalidIf2.default)(_propTypes2.default.bool, 'flat', 'raised', 'icon'),
	
	  /**
	   * Boolean if the `Button` should be styled as a `FlatButton`.
	   */
	  flat: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `Button` should be styled as a `RaisedButton`.
	   */
	  raised: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `Button` should be styled as a `IconButton`.
	   */
	  icon: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `Button` should be styled as a `FloatingButton`.
	   */
	  floating: _propTypes2.default.bool,
	
	  /**
	   * An optional label to use for the tooltip. This is normally only used for
	   * `IconButton`s or `FloatingButton`s, but can be used on `FlatButton`s and
	   * `RaisedButton`s if you wish. Knock yourself out!
	   *
	   * If this prop is omitted, no tooltip will be included.
	   */
	  tooltipLabel: _propTypes2.default.node,
	
	  /**
	   * An optional delay before the tooltip appears on mouse over.
	   */
	  tooltipDelay: _propTypes2.default.number,
	
	  /**
	   * The position for the tooltip.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	
	  /**
	   * An ink from `injectInk`.
	   * @access private
	   */
	  ink: _propTypes2.default.node,
	
	  /**
	   * A tooltip from `injectTooltip`
	   * @access private
	   */
	  tooltip: _propTypes2.default.node,
	
	  /**
	   * Custom validator for verifying that only one type is defined and that
	   * at one type is defined.
	   */
	  _typeValidator: function _typeValidator(props, propName, component) {
	    var flat = props.flat,
	        raised = props.raised,
	        icon = props.icon,
	        floating = props.floating;
	
	
	    var defined = [raised, flat, icon, floating].filter(function (d) {
	      return d;
	    });
	    var len = defined.length;
	    if (len === 0) {
	      return new Error('A material design button type must be specified in the `' + component + '` but none were ' + 'given. Valid types are `flat`, `raised`, `icon`, or `floating`.');
	    } else if (len !== 1) {
	      return new Error('Only one material design button type may be specified in the `' + component + '` but `' + len + '` ' + 'were given. Select only one of `flat`, `raised`, `icon`, or `floating`.');
	    }
	
	    return null;
	  },
	
	  /**
	   * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size
	   * to enforce. This is useful when using other font icon libraries that do not have a consistent
	   * size.
	   */
	  forceIconSize: _FontIcon2.default.propTypes.forceSize,
	
	  /**
	   * Boolean if the `forceIconSize` prop should also force the `font-size` instead of only `width` and `height`.
	   */
	  forceIconFontSize: _propTypes2.default.bool
	};
	Button.defaultProps = {
	  type: 'button',
	  iconBefore: true,
	  fixedPosition: 'br'
	};
	exports.default = (0, _injectInk2.default)((0, _injectTooltip2.default)(Button));

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var styles = {
	  sized: { width: 24, height: 24 },
	  fullySized: { width: 24, height: 24, fontSize: 24 }
	};
	
	/**
	 * The \`FontIcon\` component is used for rendering a font-icon library's
	 * icon. The default is to use the `material-icons` library, but others
	 * can be used as well.
	 *
	 * If you are using another font-icon library that does not always create
	 * icons with a perfect 1:1 scale (such as font-awesome), it is recommended
	 * to update the `.md-icon` styles to set the width and height to `$md-font-icon-size`.
	 * However, this will prevent different sided icons.
	 *
	 * \`\`\`scss
	 * .md-icon.fa {
	 *   height: $md-font-icon-size;
	 *   width: $md-font-icon-size;
	 * }
	 * \`\`\`
	 */
	
	var FontIcon = function (_PureComponent) {
	  _inherits(FontIcon, _PureComponent);
	
	  function FontIcon() {
	    _classCallCheck(this, FontIcon);
	
	    return _possibleConstructorReturn(this, (FontIcon.__proto__ || Object.getPrototypeOf(FontIcon)).apply(this, arguments));
	  }
	
	  _createClass(FontIcon, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          iconClassName = _props.iconClassName,
	          className = _props.className,
	          children = _props.children,
	          disabled = _props.disabled,
	          style = _props.style,
	          forceSize = _props.forceSize,
	          forceFontSize = _props.forceFontSize,
	          props = _objectWithoutProperties(_props, ['iconClassName', 'className', 'children', 'disabled', 'style', 'forceSize', 'forceFontSize']);
	
	      var mergedStyles = style;
	      if (typeof forceSize === 'boolean') {
	        var merge = forceFontSize ? styles.fullySized : styles.sized;
	        mergedStyles = style ? _extends({}, merge, style) : merge;
	      } else if (typeof forceSize === 'number') {
	        var _merge = {
	          fontSize: forceFontSize ? forceSize : undefined,
	          height: forceSize,
	          width: forceSize
	        };
	
	        mergedStyles = style ? _extends({}, _merge, style) : _merge;
	      }
	
	      return _react2.default.createElement(
	        'i',
	        _extends({}, props, {
	          style: mergedStyles,
	          className: (0, _classnames2.default)('md-icon', iconClassName, {
	            'md-icon--disabled': disabled
	          }, className)
	        }),
	        children
	      );
	    }
	  }]);
	
	  return FontIcon;
	}(_react.PureComponent);
	
	FontIcon.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `FontIcon`.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The icon font library className to use to display the icon.
	   */
	  iconClassName: _propTypes2.default.string.isRequired,
	
	  /**
	   * Any children required to display the icon with the font library.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the `FontIcon` should gain the disabled colors.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size
	   * to enforce. This is useful when using other font icon libraries that do not have a consistent
	   * size.
	   */
	  forceSize: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
	
	  /**
	   * Boolean if the `forceSize` prop should also force the `font-size` instead of only `width` and `height`.
	   */
	  forceFontSize: function forceFontSize(props, propName, component) {
	    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      args[_key - 3] = arguments[_key];
	    }
	
	    var error = _propTypes2.default.bool.apply(_propTypes2.default, [props, propName, component].concat(args));
	    if (!error && typeof props.forceSize === 'undefined' && props[propName]) {
	      error = new Error('You provided a `forceFontSize` prop to the ' + component + ' component, without specifying the `forceSize` ' + ('prop. Either set the `forceSize` prop to a boolean or a number, or disable `' + propName + '`.'));
	    }
	
	    return error;
	  }
	};
	FontIcon.defaultProps = {
	  iconClassName: 'material-icons'
	};
	exports.default = FontIcon;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _AccessibleFakeButton = __webpack_require__(45);
	
	var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);
	
	var _injectInk = __webpack_require__(62);
	
	var _injectInk2 = _interopRequireDefault(_injectInk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = (0, _injectInk2.default)(_AccessibleFakeButton2.default);

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// This will need to keep in sync with the `ReactCSSTransitionGroupChild` `TICK` const.
	// https://github.com/facebook/react/blob/master/src/addons/transitions/ReactCSSTransitionGroupChild.js#L22
	
	exports.default = 17;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _between = __webpack_require__(39);
	
	var _between2 = _interopRequireDefault(_between);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Paper` component is a simple wrappper that adds box-shadow.
	 *
	 * You can also use the scss mixin instead of paper.
	 *
	 * ```scss
	 * @include md-box-shadow(5);
	 * ```
	 */
	var Paper = function (_PureComponent) {
	  _inherits(Paper, _PureComponent);
	
	  function Paper() {
	    _classCallCheck(this, Paper);
	
	    return _possibleConstructorReturn(this, (Paper.__proto__ || Object.getPrototypeOf(Paper)).apply(this, arguments));
	  }
	
	  _createClass(Paper, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Component = _props.component,
	          zDepth = _props.zDepth,
	          className = _props.className,
	          raiseOnHover = _props.raiseOnHover,
	          props = _objectWithoutProperties(_props, ['component', 'zDepth', 'className', 'raiseOnHover']);
	
	      return _react2.default.createElement(Component, _extends({}, props, {
	        className: (0, _classnames2.default)('md-paper md-paper--' + zDepth, {
	          'md-paper--0-hover': zDepth === 0 && raiseOnHover
	        }, className)
	      }));
	    }
	  }]);
	
	  return Paper;
	}(_react.PureComponent);
	
	Paper.propTypes = {
	  /**
	   * The component to render the paper as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The depth of the paper. This should be a number between 0 - 5. If
	   * the depth is 0, it will raise to a depth of 3 on hover.
	   */
	  zDepth: (0, _between2.default)(_propTypes2.default.number.isRequired, 0, 5),
	
	  /**
	   * Any children to display in the paper.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the paper should raise to the `zDepth` of `3` on hover when the initial
	   * `zDepth` is `0`.
	   */
	  raiseOnHover: _propTypes2.default.bool
	};
	Paper.defaultProps = {
	  zDepth: 1,
	  component: 'div'
	};
	exports.default = Paper;

/***/ },
/* 15 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 16 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _reactMotion = __webpack_require__(147);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Collapse` component is used to animate a single child entering
	 * or leaving. This uses the `react-motion` library to animate the height,
	 * padding-top, and padding-bottom of an element when the `collapsed` prop
	 * changes.
	 */
	var Collapse = function (_PureComponent) {
	  _inherits(Collapse, _PureComponent);
	
	  function Collapse(props) {
	    _classCallCheck(this, Collapse);
	
	    var _this = _possibleConstructorReturn(this, (Collapse.__proto__ || Object.getPrototypeOf(Collapse)).call(this, props));
	
	    if (!props.collapsed) {
	      _this.state = { initialOpen: true };
	    } else {
	      _this.state = { height: 0, paddingTop: 0, paddingBottom: 0 };
	    }
	
	    _this._setHeight = _this._setHeight.bind(_this);
	    return _this;
	  }
	
	  _createClass(Collapse, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.state.initialOpen && nextProps.collapsed) {
	        this.setState({ initialOpen: false });
	      }
	    }
	  }, {
	    key: '_spring',
	    value: function _spring(collapsed, initialOpen, value, config) {
	      var nextValue = !collapsed ? Math.max(0, value) : 0;
	      if (initialOpen && !collapsed) {
	        return nextValue;
	      }
	
	      return (0, _reactMotion.spring)(nextValue, config);
	    }
	  }, {
	    key: '_setHeight',
	    value: function _setHeight(child) {
	      var height = 0;
	      var paddingTop = 0;
	      var paddingBottom = 0;
	      if (child !== null) {
	        var node = (0, _reactDom.findDOMNode)(child);
	        var cs = window.getComputedStyle(node);
	        height = node.offsetHeight;
	        paddingTop = parseInt(cs.getPropertyValue('padding-top'), 10);
	        paddingBottom = parseInt(cs.getPropertyValue('padding-bottom'), 10);
	      }
	
	      this.setState({ height: height, paddingTop: paddingTop, paddingBottom: paddingBottom });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _state = this.state,
	          height = _state.height,
	          paddingTop = _state.paddingTop,
	          paddingBottom = _state.paddingBottom,
	          initialOpen = _state.initialOpen;
	      var _props = this.props,
	          children = _props.children,
	          collapsed = _props.collapsed,
	          defaultStyle = _props.defaultStyle,
	          motionStyle = _props.style,
	          springConfig = _props.springConfig;
	
	      return _react2.default.createElement(
	        _reactMotion.Motion,
	        {
	          style: _extends({}, motionStyle, {
	            height: this._spring(collapsed, initialOpen, height, springConfig),
	            paddingTop: this._spring(collapsed, initialOpen, paddingTop, springConfig),
	            paddingBottom: this._spring(collapsed, initialOpen, paddingBottom, springConfig)
	          }),
	          defaultStyle: _extends({}, defaultStyle, {
	            height: height,
	            paddingTop: paddingTop,
	            paddingBottom: paddingBottom
	          })
	        },
	        function (style) {
	          if (collapsed && !style.height) {
	            return null;
	          }
	
	          var child = _react.Children.only(children);
	          var nextStyle = child.props.style;
	          if (collapsed || style.height !== height) {
	            nextStyle = Object.assign({}, child.props.style, _extends({}, style, {
	              overflow: 'hidden'
	            }));
	          }
	          return (0, _react.cloneElement)(child, {
	            ref: _this2._setHeight,
	            style: nextStyle
	          });
	        }
	      );
	    }
	  }]);
	
	  return Collapse;
	}(_react.PureComponent);
	
	Collapse.propTypes = {
	  /**
	   * An optional style to merge with the `Motion` style.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional default style to merge with the `Motion` default style.
	   */
	  defaultStyle: _propTypes2.default.object,
	
	  /**
	   * Boolean if the children are currently collapsed.
	   */
	  collapsed: _propTypes2.default.bool.isRequired,
	
	  /**
	   * A single child to collapse or expand.
	   */
	  children: _propTypes2.default.element.isRequired,
	
	  /**
	   * The spring config to use for the animation.
	   */
	  springConfig: _propTypes2.default.object.isRequired
	};
	Collapse.defaultProps = {
	  springConfig: {
	    precision: 0.5
	  }
	};
	exports.default = Collapse;

/***/ },
/* 18 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = componentDeprecated;
	function componentDeprecated(reason) {
	  return function validate(props, propName, componentName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	
	    return new Error('The `' + componentNameSafe + '` has been deprecated and will be removed in the next release. ' + reason);
	  };
	}

/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = invalidIf;
	/**
	 * A custom validator that will throw an error if any of the `ifDefinedProps` are also defined.
	 *
	 * @param {function} validator - The PropTypes validator to use.
	 * @param {String...} ifDefinedProps - any othe rprop names to validate against
	 * @return {Error} an error or null
	 */
	function invalidIf(validator) {
	  for (var _len = arguments.length, ifDefinedProps = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    ifDefinedProps[_key - 1] = arguments[_key];
	  }
	
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (err) {
	      return err;
	    }
	
	    var defined = typeof props[propName] !== 'undefined' && !!props[propName];
	    var othersDefined = ifDefinedProps.filter(function (name) {
	      return typeof props[name] !== 'undefined' && !!props[name];
	    });
	    if (defined && othersDefined.length) {
	      var names = '`' + othersDefined.join('`, `') + '`';
	      if (othersDefined.length === 1) {
	        return new Error('You provided both a `' + propFullNameSafe + '` and ' + names + ' prop to the ' + componentNameSafe + ' ' + 'but only one can be given.');
	      }
	
	      return new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' when ' + ('the following props were defined: ' + names + '. Either remove the `' + propFullNameSafe + '` ') + 'or use the remove all the other props.');
	    }
	
	    return null;
	  };
	}

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(31)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(16)
	  , core      = __webpack_require__(15)
	  , ctx       = __webpack_require__(131)
	  , hide      = __webpack_require__(32)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 22 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(40)
	  , IE8_DOM_DEFINE = __webpack_require__(133)
	  , toPrimitive    = __webpack_require__(79)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(20) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(134)
	  , defined = __webpack_require__(68);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _TransitionGroup = __webpack_require__(86);
	
	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);
	
	var _CSSTransitionGroupChild = __webpack_require__(356);
	
	var _CSSTransitionGroupChild2 = _interopRequireDefault(_CSSTransitionGroupChild);
	
	var _PropTypes = __webpack_require__(149);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var propTypes = {
	  transitionName: _PropTypes.nameShape.isRequired,
	
	  transitionAppear: _propTypes2.default.bool,
	  transitionEnter: _propTypes2.default.bool,
	  transitionLeave: _propTypes2.default.bool,
	  transitionAppearTimeout: (0, _PropTypes.transitionTimeout)('Appear'),
	  transitionEnterTimeout: (0, _PropTypes.transitionTimeout)('Enter'),
	  transitionLeaveTimeout: (0, _PropTypes.transitionTimeout)('Leave')
	};
	
	var defaultProps = {
	  transitionAppear: false,
	  transitionEnter: true,
	  transitionLeave: true
	};
	
	var CSSTransitionGroup = function (_React$Component) {
	  _inherits(CSSTransitionGroup, _React$Component);
	
	  function CSSTransitionGroup() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, CSSTransitionGroup);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._wrapChild = function (child) {
	      return _react2.default.createElement(_CSSTransitionGroupChild2.default, {
	        name: _this.props.transitionName,
	        appear: _this.props.transitionAppear,
	        enter: _this.props.transitionEnter,
	        leave: _this.props.transitionLeave,
	        appearTimeout: _this.props.transitionAppearTimeout,
	        enterTimeout: _this.props.transitionEnterTimeout,
	        leaveTimeout: _this.props.transitionLeaveTimeout
	      }, child);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  // We need to provide this childFactory so that
	  // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	  // leave while it is leaving.
	
	
	  CSSTransitionGroup.prototype.render = function render() {
	    return _react2.default.createElement(_TransitionGroup2.default, _extends({}, this.props, { childFactory: this._wrapChild }));
	  };
	
	  return CSSTransitionGroup;
	}(_react2.default.Component);
	
	CSSTransitionGroup.displayName = 'CSSTransitionGroup';
	
	
	CSSTransitionGroup.propTypes = propTypes;
	CSSTransitionGroup.defaultProps = defaultProps;
	
	exports.default = CSSTransitionGroup;
	module.exports = exports['default'];

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `IconSeparator` component is a simple helper component to render some text and
	 * an icon with some space between them while centering the text. The icon can either
	 * come before or after the text.
	 */
	var IconSeparator = function (_PureComponent) {
	  _inherits(IconSeparator, _PureComponent);
	
	  function IconSeparator() {
	    _classCallCheck(this, IconSeparator);
	
	    return _possibleConstructorReturn(this, (IconSeparator.__proto__ || Object.getPrototypeOf(IconSeparator)).apply(this, arguments));
	  }
	
	  _createClass(IconSeparator, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          labelStyle = _props.labelStyle,
	          labelClassName = _props.labelClassName,
	          component = _props.component,
	          label = _props.label,
	          iconBefore = _props.iconBefore,
	          children = _props.children,
	          props = _objectWithoutProperties(_props, ['className', 'labelStyle', 'labelClassName', 'component', 'label', 'iconBefore', 'children']);
	
	      var text = void 0;
	      if ((0, _react.isValidElement)(label)) {
	        var labelProps = _react.Children.only(label).props;
	        text = (0, _react.cloneElement)(label, {
	          className: (0, _classnames2.default)('md-icon-text', labelClassName, labelProps.className),
	          style: _extends({}, labelStyle, labelProps.style)
	        });
	      } else {
	        text = _react2.default.createElement(
	          'span',
	          { style: labelStyle, className: (0, _classnames2.default)('md-icon-text', labelClassName) },
	          label
	        );
	      }
	
	      var Component = component;
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, { className: (0, _classnames2.default)('md-icon-separator', className) }),
	        iconBefore && children,
	        text,
	        !iconBefore && children
	      );
	    }
	  }]);
	
	  return IconSeparator;
	}(_react.PureComponent);
	
	IconSeparator.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the label.
	   */
	  labelStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the label.
	   */
	  labelClassName: _propTypes2.default.string,
	
	  /**
	   * The label to display.
	   */
	  label: _propTypes2.default.node.isRequired,
	
	  /**
	   * The icon to display.
	   */
	  children: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the icon should appear before or after the text
	   */
	  iconBefore: _propTypes2.default.bool,
	
	  /**
	   * The component to be rendered as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired
	};
	IconSeparator.defaultProps = {
	  component: 'div'
	};
	exports.default = IconSeparator;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Creates a "Portal" for the children to be rendered in. Basically it will render the
	 * children only when the `visible` prop is `true`. When it is visible, a new `component`
	 * will be rendered as the first child in the body with the children inside.
	 *
	 * Unlike all the other components, `style` will not be applied for the `Portal`.
	 */
	var Portal = function (_PureComponent) {
	  _inherits(Portal, _PureComponent);
	
	  function Portal(props) {
	    _classCallCheck(this, Portal);
	
	    var _this = _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).call(this, props));
	
	    _this._portal = null;
	    _this._container = null;
	
	    _this._applyStyles = _this._applyStyles.bind(_this);
	    _this._renderPortal = _this._renderPortal.bind(_this);
	    _this._removePortal = _this._removePortal.bind(_this);
	    return _this;
	  }
	
	  _createClass(Portal, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return { isInPortal: true };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	          renderNode = _props.renderNode,
	          visible = _props.visible;
	
	      if (visible && (!this.context.isInPortal || renderNode)) {
	        this._renderPortal(this.props);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var visible = nextProps.visible,
	          onOpen = nextProps.onOpen,
	          renderNode = nextProps.renderNode;
	
	      var changed = visible !== this.props.visible;
	      if (changed && visible && onOpen) {
	        onOpen();
	      }
	
	      if (this.context.isInPortal && !renderNode) {
	        return;
	      }
	
	      if (!visible) {
	        this._removePortal();
	      } else {
	        this._renderPortal(nextProps);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._removePortal();
	    }
	  }, {
	    key: '_applyStyles',
	    value: function _applyStyles(props) {
	      if (props.className) {
	        this._container.className = props.className;
	      }
	    }
	  }, {
	    key: '_renderPortal',
	    value: function _renderPortal(props) {
	      if (!this._container) {
	        this._container = document.createElement(props.component);
	
	        this._applyStyles(props);
	        var node = props.renderNode || document.body;
	        if (props.lastChild) {
	          node.appendChild(this._container);
	        } else {
	          node.insertBefore(this._container, node.firstChild);
	        }
	      } else {
	        this._applyStyles(props);
	      }
	
	      this._portal = (0, _reactDom.unstable_renderSubtreeIntoContainer)(this, props.children, this._container);
	    }
	  }, {
	    key: '_removePortal',
	    value: function _removePortal() {
	      if (this.props.onClose) {
	        this.props.onClose();
	      }
	
	      if (this._container) {
	        (0, _reactDom.unmountComponentAtNode)(this._container);
	        (this.props.renderNode || document.body).removeChild(this._container);
	      }
	
	      this._portal = null;
	      this._container = null;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var isInPortal = this.context.isInPortal;
	      var _props2 = this.props,
	          Component = _props2.component,
	          className = _props2.className,
	          children = _props2.children,
	          renderNode = _props2.renderNode,
	          visible = _props2.visible;
	
	      // When doing server side rendering, actualy render the component as a direct child of its parent.
	      // Once it has been rendered and working client side, it will be removed correctly.
	
	      if (visible && (typeof window === 'undefined' || isInPortal && !renderNode)) {
	        return _react2.default.createElement(
	          Component,
	          { className: className },
	          children
	        );
	      }
	
	      return null;
	    }
	  }]);
	
	  return Portal;
	}(_react.PureComponent);
	
	Portal.propTypes = {
	  /**
	   * An optional className to apply to the newly created `component` when visible.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if the children are visible.
	   */
	  visible: _propTypes2.default.bool.isRequired,
	
	  /**
	   * The children to render when visible.
	   */
	  children: _propTypes2.default.element,
	
	  /**
	   * The component to render as. This should be a valid DOM element.
	   */
	  component: _propTypes2.default.string.isRequired,
	
	  /**
	   * An optional function to call when the portal is opened.
	   */
	  onOpen: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the portal is closed
	   */
	  onClose: _propTypes2.default.func,
	
	  /**
	   * An optional DOM Node to render the portal into. The default is to render as
	   * the first child in the `body`.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the portal should render the childeren as the last child of the `renderNode`
	   * or `body` instead of the first.
	   */
	  lastChild: _propTypes2.default.bool
	};
	Portal.defaultProps = {
	  component: 'span'
	};
	Portal.contextTypes = {
	  isInPortal: _propTypes2.default.bool
	};
	Portal.childContextTypes = {
	  isInPortal: _propTypes2.default.bool
	};
	exports.default = Portal;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Subheaders = __webpack_require__(107);
	
	var _Subheaders2 = _interopRequireDefault(_Subheaders);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _contextTypes = __webpack_require__(101);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Lists present multiple line items vertically as a single continuous element.
	 */
	var List = function (_PureComponent) {
	  _inherits(List, _PureComponent);
	
	  function List() {
	    _classCallCheck(this, List);
	
	    return _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).apply(this, arguments));
	  }
	
	  _createClass(List, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _context = this.context,
	          listLevel = _context.listLevel,
	          context = _objectWithoutProperties(_context, ['listLevel']);
	
	      return _extends({}, context, {
	        listLevel: typeof listLevel === 'undefined' ? 1 : listLevel + 1
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _cn;
	
	      var _props = this.props,
	          className = _props.className,
	          ordered = _props.ordered,
	          children = _props.children,
	          subheader = _props.subheader,
	          primarySubheader = _props.primarySubheader,
	          props = _objectWithoutProperties(_props, ['className', 'ordered', 'children', 'subheader', 'primarySubheader']);
	
	      var _context2 = this.context,
	          menuPosition = _context2.menuPosition,
	          menuCascading = _context2.menuCascading,
	          listLevel = _context2.listLevel;
	
	
	      var subheaderEl = void 0;
	      if (subheader) {
	        subheaderEl = _react2.default.createElement(_Subheaders2.default, { key: 'subheader', primaryText: subheader, primary: primarySubheader });
	      }
	
	      var Component = ordered ? 'ol' : 'ul';
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-list', (_cn = {
	            'md-list--menu': menuPosition,
	            'md-list--menu-scrollable': menuPosition && !menuCascading,
	            'md-list--menu-cascading': menuCascading,
	            'md-list--menu-nested': menuPosition && listLevel
	          }, _defineProperty(_cn, 'md-list--nested-' + listLevel, listLevel && !menuPosition), _defineProperty(_cn, 'md-list--menu-' + menuPosition, menuPosition), _cn), className)
	        }),
	        subheaderEl,
	        children
	      );
	    }
	  }]);
	
	  return List;
	}(_react.PureComponent);
	
	List.propTypes = {
	  /**
	   * An optional style to apply to the list.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the list.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if this should be an ordered list (`<ol>`) component. Otherwise, it will
	   * be rendered as `<ul>`.
	   */
	  ordered: _propTypes2.default.bool,
	
	  /**
	   * This *should* be a list of `ListItem`, `ListItemControl`, `Divider`, or
	   * `Subheader`.
	   */
	  children: _propTypes2.default.node,
	  subheader: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `Subheader` component as a child instead'),
	  primarySubheader: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `Subheader` component as a child instead')
	};
	List.childContextTypes = _contextTypes2.default;
	List.contextTypes = _contextTypes2.default;
	exports.default = List;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _keyCodes = __webpack_require__(6);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _capitalizeFirst = __webpack_require__(280);
	
	var _capitalizeFirst2 = _interopRequireDefault(_capitalizeFirst);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _SwitchTrack = __webpack_require__(234);
	
	var _SwitchTrack2 = _interopRequireDefault(_SwitchTrack);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Prevents a second warning from appearing when using the deprecated or a11y required
	 * props by using the `__superSecretProp`.... So secret!
	 */
	function preventDouble(validator) {
	  return function validate(props, propName) {
	    for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      others[_key - 2] = arguments[_key];
	    }
	
	    var err = validator.apply(undefined, [props, propName].concat(others));
	    if (err && props.__superSecreteProp) {
	      err = null;
	    }
	
	    return err;
	  };
	}
	
	/**
	 * The `SelectionControl` component is used to render any of the `Radio`, `Checkbox`, or `Switch`
	 * selection control type. This component might eventually replace all three since they use this
	 * anyways. I am not sure yet though.
	 */
	
	var SelectionControl = function (_PureComponent) {
	  _inherits(SelectionControl, _PureComponent);
	
	  function SelectionControl(props) {
	    _classCallCheck(this, SelectionControl);
	
	    var _this = _possibleConstructorReturn(this, (SelectionControl.__proto__ || Object.getPrototypeOf(SelectionControl)).call(this, props));
	
	    _this.state = {};
	    if (typeof props.checked === 'undefined') {
	      _this.state.checked = !!props.defaultChecked;
	    }
	
	    _this._setInput = _this._setInput.bind(_this);
	    _this._handleChange = _this._handleChange.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._getIcon = _this._getIcon.bind(_this);
	    return _this;
	  }
	
	  _createClass(SelectionControl, [{
	    key: '_setInput',
	    value: function _setInput(input) {
	      this._input = input;
	    }
	  }, {
	    key: '_getIcon',
	    value: function _getIcon() {
	      var _props = this.props,
	          checkedIcon = _props.checkedIcon,
	          uncheckedIcon = _props.uncheckedIcon,
	          type = _props.type;
	
	      var checked = (0, _getField2.default)(this.props, this.state, 'checked');
	      if (checkedIcon || uncheckedIcon) {
	        return checked ? checkedIcon : uncheckedIcon;
	      }
	
	      var prefix = (checked ? '' : 'un') + 'checked' + (0, _capitalizeFirst2.default)(type) + 'Icon';
	      return _react2.default.createElement(
	        _FontIcon2.default,
	        { iconClassName: this.props[prefix + 'ClassName'] },
	        this.props[prefix + 'Children']
	      );
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (this.props.onKeyDown) {
	        this.props.onKeyDown(e);
	      }
	
	      var key = e.which || e.keyCode;
	      if (key === _keyCodes.SPACE) {
	        this._input.click();
	      }
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(e) {
	      var _props2 = this.props,
	          type = _props2.type,
	          onChange = _props2.onChange;
	
	      var checked = !(0, _getField2.default)(this.props, this.state, 'checked');
	      if (onChange) {
	        onChange(type === 'radio' ? e.target.value : checked, e);
	      }
	
	      if (typeof this.props.checked === 'undefined') {
	        this.setState({ checked: checked });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          id = _props3.id,
	          style = _props3.style,
	          className = _props3.className,
	          inline = _props3.inline,
	          type = _props3.type,
	          name = _props3.name,
	          value = _props3.value,
	          disabled = _props3.disabled,
	          labelBefore = _props3.labelBefore,
	          tabIndex = _props3.tabIndex,
	          props = _objectWithoutProperties(_props3, ['id', 'style', 'className', 'inline', 'type', 'name', 'value', 'disabled', 'labelBefore', 'tabIndex']);
	
	      delete props.label;
	      delete props.checked;
	      delete props.onChange;
	      delete props.checkedIcon;
	      delete props.uncheckedIcon;
	      delete props.__superSecreteProp;
	      delete props.checkedRadioIconChildren;
	      delete props.checkedRadioIconClassName;
	      delete props.uncheckedRadioIconChildren;
	      delete props.uncheckedRadioIconClassName;
	      delete props.checkedCheckboxIconChildren;
	      delete props.checkedCheckboxIconClassName;
	      delete props.uncheckedCheckboxIconChildren;
	      delete props.uncheckedCheckboxIconClassName;
	
	      var checked = (0, _getField2.default)(this.props, this.state, 'checked');
	      var isSwitch = type === 'switch';
	      var label = this.props.label && _react2.default.createElement(
	        'span',
	        null,
	        this.props.label
	      );
	
	      var control = void 0;
	      if (isSwitch) {
	        control = _react2.default.createElement(_SwitchTrack2.default, { disabled: disabled, checked: checked });
	      } else {
	        control = _react2.default.createElement(
	          _AccessibleFakeInkedButton2.default,
	          {
	            role: type,
	            className: (0, _classnames2.default)('md-selection-control-toggle md-btn md-btn--icon', {
	              'md-text--disabled': disabled,
	              'md-text--secondary': !disabled && !checked,
	              'md-text--theme-secondary': checked && !disabled
	            }),
	            'aria-checked': checked,
	            tabIndex: tabIndex,
	            disabled: disabled
	          },
	          this._getIcon()
	        );
	      }
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, {
	          style: style,
	          className: (0, _classnames2.default)('md-selection-control-container', {
	            'md-selection-control-container--inline': inline,
	            'md-switch-container': isSwitch
	          }, className),
	          onKeyDown: this._handleKeyDown
	        }),
	        _react2.default.createElement('input', {
	          ref: this._setInput,
	          id: id,
	          type: isSwitch ? 'checkbox' : type,
	          checked: checked,
	          onChange: this._handleChange,
	          disabled: disabled,
	          className: 'md-selection-control-input',
	          name: name,
	          value: value,
	          'aria-hidden': true
	        }),
	        _react2.default.createElement(
	          'label',
	          {
	            htmlFor: id,
	            className: (0, _classnames2.default)('md-selection-control-label', {
	              'md-text md-pointer--hover': !disabled,
	              'md-text--disabled': disabled
	            })
	          },
	          labelBefore && label,
	          control,
	          !labelBefore && label
	        )
	      );
	    }
	  }]);
	
	  return SelectionControl;
	}(_react.PureComponent);
	
	SelectionControl.propTypes = {
	  /**
	   * An id to use with the selection control. This is used for accessibility and so that the label
	   * triggers the selection control toggle.
	   */
	  id: preventDouble((0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))),
	
	  /**
	   * An optional style to apply to the selection control's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the selection control's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The type of selection control to render.
	   */
	  type: _propTypes2.default.oneOf(['checkbox', 'radio', 'switch']).isRequired,
	
	  /**
	   * A label to display with the selection control. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * Boolean if the label should appear before the checkbox/radio icon or switch.
	   */
	  labelBefore: _propTypes2.default.bool,
	
	  /**
	   * A name to use for the `SelectionControl`. This is required for accessibility. If the `type`
	   * is a `checkbox` and it is part of a group, it is recommended to make this a string ending
	   * in `[]` so that the value can be found from `document.querySelector('input[name="someName[]"]').value`.
	   */
	  name: preventDouble((0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]))),
	
	  /**
	   * Boolean if the `Radio` is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * A function to call when the `SelectionControl` triggers the `change` event. The `onChange`
	   * callback will either include:
	   * - the currently changed radio's value
	   * - the next checked state for the `Switch` or `Checkbox`.
	   *
	   * as the first paramater followed by the change event.
	   *
	   * ```js
	   * // Radio
	   * onChange(changeEvent.target.value, changeEvent);
	   *
	   * // Checkbox or Switch
	   * onChange(changeEvent.target.checked, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `keydown` event is triggered.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * The value for the `SelectionControl`. It is not required for `Checkbox` and `Switch`,
	   * but it is recommended.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * A boolean if the `SelectionControl` is currently checked. This _really_ makes the `onChange`
	   * prop required, but since there are cases you might want to have the `onChange` listener on a
	   * `fieldset` or something above the component, it is never set to `required`. It will however
	   * prevent updates if there is no change listener.
	   */
	  checked: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `Checkbox` or `Switch` are checked by default. This prop is invalid for a
	   * `Radio`.
	   */
	  defaultChecked: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `SelectionControl` should be displayed inline instead of a block.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * Any children used to render the checkbox checked `FontIcon`.
	   */
	  checkedCheckboxIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use to render the checkbox checked `FontIcon`.
	   */
	  checkedCheckboxIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children used to render the checkbox unchecked `FontIcon`.
	   */
	  uncheckedCheckboxIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use to render the checkbox unchecked `FontIcon`.
	   */
	  uncheckedCheckboxIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children used to render the radio checked `FontIcon`.
	   */
	  checkedRadioIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use to render the radio checked `FontIcon`.
	   */
	  checkedRadioIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children used to render the radio unchecked `FontIcon`.
	   */
	  uncheckedRadioIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use to render the radio unchecked `FontIcon`.
	   */
	  uncheckedRadioIconClassName: _propTypes2.default.string,
	
	  /**
	   * An optional tab index to apply to the selection control.
	   */
	  tabIndex: _propTypes2.default.number,
	
	  checkedIcon: preventDouble((0, _deprecated2.default)(_propTypes2.default.node, 'Use the `checkedCheckboxIconChildren` and `checkedCheckboxIconClassName`  or the ' + '`checkedRadioIconChildren` and `checkedRadioIconClassName` props instead')),
	  uncheckedIcon: preventDouble((0, _deprecated2.default)(_propTypes2.default.node, 'Use the `uncheckedCheckboxIconChildren` and `uncheckedCheckboxIconClassName`  or the ' + '`uncheckedRadioIconChildren` and `uncheckedRadioIconClassName` props instead')),
	
	  /* maybe removed once upgrade again? */
	  __superSecreteProp: _propTypes2.default.bool
	};
	SelectionControl.defaultProps = {
	  checkedCheckboxIconChildren: 'check_box',
	  uncheckedCheckboxIconChildren: 'check_box_outline_blank',
	  checkedRadioIconChildren: 'radio_button_checked',
	  uncheckedRadioIconChildren: 'radio_button_unchecked'
	};
	exports.default = SelectionControl;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _keyCodes = __webpack_require__(6);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _invalidIf = __webpack_require__(19);
	
	var _invalidIf2 = _interopRequireDefault(_invalidIf);
	
	var _minNumber = __webpack_require__(276);
	
	var _minNumber2 = _interopRequireDefault(_minNumber);
	
	var _addSuffix = __webpack_require__(122);
	
	var _addSuffix2 = _interopRequireDefault(_addSuffix);
	
	var _FloatingLabel = __webpack_require__(110);
	
	var _FloatingLabel2 = _interopRequireDefault(_FloatingLabel);
	
	var _TextFieldMessage = __webpack_require__(112);
	
	var _TextFieldMessage2 = _interopRequireDefault(_TextFieldMessage);
	
	var _PasswordButton = __webpack_require__(257);
	
	var _PasswordButton2 = _interopRequireDefault(_PasswordButton);
	
	var _InputField = __webpack_require__(255);
	
	var _InputField2 = _interopRequireDefault(_InputField);
	
	var _TextFieldDivider = __webpack_require__(111);
	
	var _TextFieldDivider2 = _interopRequireDefault(_TextFieldDivider);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TextField` component can either be a single line `input` field or a multiline
	 * `textarea` field. `FontIcon`s, messages, and password indicators can also be added
	 * to this field.
	 *
	 * The optional mouse and touch events will be added to the entire container while the
	 * text specific events will be added to the `input` or `textarea` tags.
	 */
	var TextField = function (_PureComponent) {
	  _inherits(TextField, _PureComponent);
	
	  function TextField(props) {
	    _classCallCheck(this, TextField);
	
	    var _this = _possibleConstructorReturn(this, (TextField.__proto__ || Object.getPrototypeOf(TextField)).call(this, props));
	
	    var currentLength = 0;
	    if (typeof props.value !== 'undefined') {
	      currentLength = props.value.length;
	    } else if (typeof props.defaultValue !== 'undefined') {
	      currentLength = props.defaultValue.length;
	    }
	
	    _this.state = {
	      active: false,
	      error: false,
	      floating: !!props.defaultValue || !!props.value,
	      passwordVisible: props.passwordInitiallyVisible,
	      height: null,
	      currentLength: currentLength
	    };
	
	    _this.focus = _this.focus.bind(_this);
	    _this.getField = _this.getField.bind(_this);
	    _this._blur = _this._blur.bind(_this);
	    _this._setField = _this._setField.bind(_this);
	    _this._setDivider = _this._setDivider.bind(_this);
	    _this._setMessage = _this._setMessage.bind(_this);
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._setPasswordBtn = _this._setPasswordBtn.bind(_this);
	    _this._setFloatingLabel = _this._setFloatingLabel.bind(_this);
	    _this._handleFocus = _this._handleFocus.bind(_this);
	    _this._handleChange = _this._handleChange.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleHeightChange = _this._handleHeightChange.bind(_this);
	    _this._handleOutsideClick = _this._handleOutsideClick.bind(_this);
	    _this._updateMultilineHeight = _this._updateMultilineHeight.bind(_this);
	    _this._togglePasswordField = _this._togglePasswordField.bind(_this);
	    _this._handleContainerClick = _this._handleContainerClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(TextField, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this._isMultiline(this.props)) {
	        this._updateMultilineHeight();
	        window.addEventListener('resize', this._updateMultilineHeight);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var multiline = this._isMultiline(nextProps);
	      if (this._isMultiline(this.props) !== multiline) {
	        this._updateMultilineHeight(nextProps);
	        window[(multiline ? 'add' : 'remove') + 'EventListener']('resize', this._updateMultilineHeight);
	      }
	
	      if (this.props.value !== nextProps.value) {
	        var value = typeof nextProps.value !== 'undefined' ? nextProps.value.toString() : '';
	        var error = this.state.error;
	
	        if (nextProps.maxLength) {
	          error = value.length > nextProps.maxLength;
	        } else if (nextProps.required && error) {
	          error = !value;
	        }
	
	        this.setState({
	          error: error,
	          floating: !!value || this.state.floating && this.state.active,
	          currentLength: value.length
	        });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _props = this.props,
	          block = _props.block,
	          active = _props.active;
	
	      if (block !== prevProps.block || active !== prevProps.active || this.state.active !== prevState.active) {
	        var fn = window[(active || this.state.active ? 'add' : 'remove') + 'EventListener'];
	        fn('mousedown', this._handleOutsideClick);
	        fn('touchstart', this._handleOutsideClick);
	      }
	
	      if (this._isMultiline(this.props) && !this._isMultiline(prevProps)) {
	        this._updateMultilineHeight(this.props);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var active = this.props.active;
	
	      var rm = window.removeEventListener;
	      if (active || this.state.active) {
	        rm('mousedown', this._handleOutsideClick);
	        rm('touchstart', this._handleOutsideClick);
	      }
	
	      if (this._isMultiline(this.props)) {
	        rm('resize', this._updateMultilineHeight);
	      }
	    }
	
	    /**
	     * A helper function for getting the specific `input` field or the `textarea` in the `TextField`.
	     * This is accessible if you use `refs`.
	     *
	     * Example:
	     *
	     * ```js
	     * <TextField ref={field => this._field = field;} label="Hello" />;
	     *
	     * this._field.getField(); // `input` node
	     * ```
	     */
	
	  }, {
	    key: 'getField',
	    value: function getField() {
	      return this._field.getField();
	    }
	
	    /**
	     * A helper function for focusing the `input` field or the `textarea` in the `TextField`.
	     * This is accessibile if you use `refs`.
	     * Example:
	     *
	     * ```js
	     * <TextField ref={field => this._field = field;} label="Hello" />;
	     *
	     * this._field.focus();
	     * ```
	     */
	
	  }, {
	    key: 'focus',
	    value: function focus() {
	      this._field.focus();
	    }
	
	    /**
	     * A helper function for blurring the `input` field or the `textarea` in the `TextField`.
	     * This is accessibile if you use `refs`.
	     * Example:
	     *
	     * ```js
	     * <TextField ref={field => this._field = field;} label="Hello" />;
	     *
	     * this._field.blur();
	     * ```
	     */
	
	  }, {
	    key: 'blur',
	    value: function blur() {
	      this._field.blur();
	    }
	  }, {
	    key: '_isMultiline',
	    value: function _isMultiline(props) {
	      return typeof props.rows !== 'undefined';
	    }
	  }, {
	    key: '_cloneIcon',
	    value: function _cloneIcon(icon, active, error, disabled, stateful, block, dir) {
	      if (!icon) {
	        return icon;
	      }
	
	      try {
	        var iconEl = _react.Children.only(icon);
	        return (0, _react.cloneElement)(iconEl, {
	          key: 'icon-' + dir,
	          className: (0, _classnames2.default)('md-text-field-icon', {
	            'md-text-field-icon--positioned': !block,
	            'md-text-field-icon--disabled': disabled,
	            'md-text-field-icon--active': stateful && !error && active,
	            'md-text-field-icon--error': stateful && error
	          }, iconEl.props.className)
	        });
	      } catch (e) {
	        return icon;
	      }
	    }
	  }, {
	    key: '_setField',
	    value: function _setField(field) {
	      if (field !== null) {
	        this._field = field;
	      }
	    }
	  }, {
	    key: '_setMessage',
	    value: function _setMessage(message) {
	      if (message !== null) {
	        this._message = (0, _reactDom.findDOMNode)(message);
	      }
	    }
	  }, {
	    key: '_setDivider',
	    value: function _setDivider(divider) {
	      if (divider !== null) {
	        this._divider = (0, _reactDom.findDOMNode)(divider);
	      }
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      if (container !== null) {
	        this._node = container;
	      }
	    }
	  }, {
	    key: '_setPasswordBtn',
	    value: function _setPasswordBtn(btn) {
	      if (btn !== null) {
	        this._password = (0, _reactDom.findDOMNode)(btn);
	      }
	    }
	  }, {
	    key: '_setFloatingLabel',
	    value: function _setFloatingLabel(label) {
	      if (label !== null) {
	        this._label = (0, _reactDom.findDOMNode)(label);
	      }
	    }
	  }, {
	    key: '_handleContainerClick',
	    value: function _handleContainerClick(e) {
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      if (!this.props.disabled) {
	        this.focus();
	      }
	    }
	  }, {
	    key: '_updateMultilineHeight',
	    value: function _updateMultilineHeight() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var block = props.block;
	
	      var multiline = this._isMultiline(props);
	      if (!multiline) {
	        return;
	      }
	
	      var cs = window.getComputedStyle((0, _reactDom.findDOMNode)(this._field));
	      this._additionalHeight = parseInt(cs.getPropertyValue('margin-top'), 10);
	
	      if (!block) {
	        var mb = parseInt(window.getComputedStyle(this._divider).getPropertyValue('margin-bottom'), 10);
	        this._additionalHeight += mb === 4 ? 12 : 16;
	      }
	
	      if (this._message) {
	        this._additionalHeight += this._message.offsetHeight;
	      }
	    }
	  }, {
	    key: '_blur',
	    value: function _blur() {
	      var value = this._field.getValue();
	
	      var state = { active: false, error: this.props.required && !value };
	      if (!this.props.block) {
	        state.floating = !!value;
	      }
	
	      this.setState(state, this._field.blur);
	    }
	  }, {
	    key: '_handleOutsideClick',
	    value: function _handleOutsideClick(e) {
	      if (!this._node.contains(e.target)) {
	        this._blur();
	      }
	    }
	  }, {
	    key: '_handleFocus',
	    value: function _handleFocus(e) {
	      var _props2 = this.props,
	          onFocus = _props2.onFocus,
	          block = _props2.block;
	
	      if (onFocus) {
	        onFocus(e);
	      }
	
	      var state = { active: true };
	      if (!block) {
	        state.floating = true;
	      }
	
	      this.setState(state);
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(e) {
	      var _props3 = this.props,
	          onChange = _props3.onChange,
	          maxLength = _props3.maxLength,
	          required = _props3.required;
	
	      if (onChange) {
	        onChange(e.target.value, e);
	      }
	
	      var currentLength = e.target.value.length;
	      if (typeof maxLength !== 'undefined') {
	        this.setState({ currentLength: currentLength, error: currentLength > maxLength });
	      } else if (required && this.state.error) {
	        this.setState({ error: !currentLength });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (this.props.onKeyDown) {
	        this.props.onKeyDown(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        this._blur();
	      }
	    }
	  }, {
	    key: '_togglePasswordField',
	    value: function _togglePasswordField() {
	      this.setState({ passwordVisible: !this.state.passwordVisible }, this.focus);
	    }
	  }, {
	    key: '_handleHeightChange',
	    value: function _handleHeightChange(height) {
	      if (this._additionalHeight) {
	        this.setState({ height: height + this._additionalHeight });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          currentLength = _state.currentLength,
	          passwordVisible = _state.passwordVisible,
	          height = _state.height;
	
	      var _props4 = this.props,
	          id = _props4.id,
	          type = _props4.type,
	          style = _props4.style,
	          className = _props4.className,
	          inputStyle = _props4.inputStyle,
	          inputClassName = _props4.inputClassName,
	          block = _props4.block,
	          fullWidth = _props4.fullWidth,
	          required = _props4.required,
	          customSize = _props4.customSize,
	          maxLength = _props4.maxLength,
	          errorText = _props4.errorText,
	          helpText = _props4.helpText,
	          helpOnFocus = _props4.helpOnFocus,
	          disabled = _props4.disabled,
	          leftIconStateful = _props4.leftIconStateful,
	          rightIconStateful = _props4.rightIconStateful,
	          passwordIconChildren = _props4.passwordIconChildren,
	          passwordIconClassName = _props4.passwordIconClassName,
	          lineDirection = _props4.lineDirection,
	          paddedBlock = _props4.paddedBlock,
	          onDoubleClick = _props4.onDoubleClick,
	          onTouchStart = _props4.onTouchStart,
	          onTouchMove = _props4.onTouchMove,
	          onTouchCancel = _props4.onTouchCancel,
	          onTouchEnd = _props4.onTouchEnd,
	          onMouseDown = _props4.onMouseDown,
	          onMouseUp = _props4.onMouseUp,
	          onMouseOver = _props4.onMouseOver,
	          onMouseLeave = _props4.onMouseLeave,
	          ink = _props4.ink,
	          inlineIndicator = _props4.inlineIndicator,
	          icon = _props4.icon,
	          props = _objectWithoutProperties(_props4, ['id', 'type', 'style', 'className', 'inputStyle', 'inputClassName', 'block', 'fullWidth', 'required', 'customSize', 'maxLength', 'errorText', 'helpText', 'helpOnFocus', 'disabled', 'leftIconStateful', 'rightIconStateful', 'passwordIconChildren', 'passwordIconClassName', 'lineDirection', 'paddedBlock', 'onDoubleClick', 'onTouchStart', 'onTouchMove', 'onTouchCancel', 'onTouchEnd', 'onMouseDown', 'onMouseUp', 'onMouseOver', 'onMouseLeave', 'ink', 'inlineIndicator', 'icon']);
	
	      delete props.label;
	      delete props.placeholder;
	      delete props.error;
	      delete props.active;
	      delete props.floating;
	      delete props.leftIcon;
	      delete props.rightIcon;
	      delete props.adjustMinWidth;
	      delete props.onClick;
	      delete props.onChange;
	      delete props.onKeyDown;
	      delete props.onFocus;
	      delete props.floatingLabel;
	
	      var _props5 = this.props,
	          label = _props5.label,
	          placeholder = _props5.placeholder,
	          error = _props5.error,
	          active = _props5.active,
	          floating = _props5.floating,
	          leftIcon = _props5.leftIcon,
	          rightIcon = _props5.rightIcon;
	
	      active = active || this.state.active;
	      error = error || this.state.error;
	      floating = floating || this.state.floating;
	
	      if (required) {
	        if (label) {
	          label = (0, _addSuffix2.default)(label, '*');
	        }
	
	        if (placeholder && !label) {
	          placeholder = (0, _addSuffix2.default)(placeholder, '*');
	        }
	      }
	
	      if (label && !floating) {
	        placeholder = null;
	      }
	
	      leftIcon = this._cloneIcon(icon || leftIcon, active, error, disabled, leftIconStateful, block, 'left');
	      if (type === 'password' && !disabled) {
	        rightIcon = _react2.default.createElement(_PasswordButton2.default, {
	          key: 'password-btn',
	          ref: this._setPasswordBtn,
	          onClick: this._togglePasswordField,
	          active: active,
	          passwordVisible: passwordVisible,
	          iconChildren: passwordIconChildren,
	          iconClassName: passwordIconClassName,
	          block: block,
	          floating: !!label
	        });
	      } else if (inlineIndicator) {
	        var el = _react.Children.only(inlineIndicator);
	        rightIcon = (0, _react.cloneElement)(inlineIndicator, {
	          key: 'icon-right',
	          className: (0, _classnames2.default)('md-text-field-inline-indicator', {
	            'md-text-field-inline-indicator--floating': label,
	            'md-text-field-inline-indicator--block': block
	          }, el.props.className)
	        });
	      } else {
	        rightIcon = this._cloneIcon(rightIcon, active, error, disabled, rightIconStateful, block, 'right');
	      }
	      var rightIconed = !!rightIcon && type !== 'password' && !inlineIndicator;
	
	      var floatingLabel = _react2.default.createElement(_FloatingLabel2.default, {
	        key: 'label',
	        ref: this._setFloatingLabel,
	        label: label,
	        htmlFor: id,
	        active: active,
	        error: error,
	        floating: floating,
	        customSize: customSize,
	        disabled: disabled,
	        iconOffset: !!leftIcon
	      });
	
	      var message = _react2.default.createElement(_TextFieldMessage2.default, {
	        key: 'message',
	        ref: this._setMessage,
	        active: active,
	        error: error,
	        errorText: errorText,
	        helpText: helpText,
	        helpOnFocus: helpOnFocus,
	        block: block,
	        maxLength: maxLength,
	        leftIcon: !!leftIcon,
	        rightIcon: !!rightIcon,
	        currentLength: currentLength
	      });
	
	      var field = _react2.default.createElement(_InputField2.default, _extends({}, props, {
	        key: 'field',
	        ref: this._setField,
	        id: id,
	        type: type,
	        label: label,
	        style: inputStyle,
	        className: inputClassName,
	        disabled: disabled,
	        customSize: customSize,
	        fullWidth: fullWidth,
	        passwordVisible: passwordVisible,
	        placeholder: placeholder,
	        block: block,
	        onFocus: this._handleFocus,
	        onKeyDown: this._handleKeyDown,
	        onChange: this._handleChange,
	        onHeightChange: this._handleHeightChange,
	        inlineIndicator: !!inlineIndicator
	      }));
	
	      var divider = void 0;
	      if (!block) {
	        divider = _react2.default.createElement(_TextFieldDivider2.default, {
	          key: 'text-divider',
	          ref: this._setDivider,
	          active: active,
	          error: error,
	          lineDirection: lineDirection
	        });
	      }
	
	      var children = void 0;
	      if (leftIcon || rightIconed) {
	        children = _react2.default.createElement(
	          'div',
	          { key: 'icon-divider', className: 'md-text-field-icon-container' },
	          leftIcon,
	          _react2.default.createElement(
	            'div',
	            {
	              key: 'divider-container',
	              className: (0, _classnames2.default)('md-text-field-divider-container', {
	                'md-text-field-divider-container--grow': fullWidth
	              })
	            },
	            field,
	            divider
	          ),
	          rightIcon
	        );
	      } else {
	        children = [leftIcon, field, divider, rightIcon];
	      }
	
	      children = [floatingLabel, children, message];
	
	      var multiline = this._isMultiline(this.props);
	      return _react2.default.createElement(
	        'div',
	        {
	          ref: this._setContainer,
	          style: Object.assign({}, style, { height: height }),
	          className: (0, _classnames2.default)('md-text-field-container', {
	            'md-inline-block': !fullWidth && !block,
	            'md-full-width': block || fullWidth,
	            'md-text-field-container--disabled': disabled,
	            'md-text-field-container--input': typeof props.rows === 'undefined',
	            'md-text-field-container--input-block': block && !multiline,
	            'md-text-field-container--multiline': multiline,
	            'md-text-field-container--multiline-block': multiline && block,
	            'md-text-field-container--padded-block': block && paddedBlock
	          }, className),
	          onClick: this._handleContainerClick,
	          onDoubleClick: onDoubleClick,
	          onMouseOver: onMouseOver,
	          onMouseLeave: onMouseLeave,
	          onMouseDown: onMouseDown,
	          onMouseUp: onMouseUp,
	          onTouchStart: onTouchStart,
	          onTouchEnd: onTouchEnd,
	          onTouchCancel: onTouchCancel,
	          onTouchMove: onTouchMove
	        },
	        ink,
	        children
	      );
	    }
	  }]);
	
	  return TextField;
	}(_react.PureComponent);
	
	TextField.propTypes = {
	  /**
	   * An optional style to apply to the text field's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the text field's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the `input` or `textarea` tag.
	   */
	  inputStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `input` or `textarea` tag.
	   */
	  inputClassName: _propTypes2.default.string,
	
	  /**
	   * An optional value to apply to the text field. This will make the component
	   * controlled and require the `onChange` prop.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]), 'onChange'),
	
	  /**
	   * An optional default value for the text field.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	
	  /**
	   * Boolean if the text field should be displayed as a `block`. This is equivalent to
	   * the `full width` text field in the Material Design specs. This view will disable
	   * floating labels and remove the text divider from the component.
	   */
	  block: function block(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    var err = _propTypes2.default.bool.apply(_propTypes2.default, [props, propName, component].concat(others));
	    if (!err && props[propName] && props.label) {
	      err = new Error('The `' + component + '` is unable to have a `label` and be displayed as `block`. ' + ('If you would like a `label` for the block `' + component + '`, please use the `placeholder` prop.'));
	    }
	
	    return err;
	  },
	
	  /**
	   * Boolean if the `block` text field should include padding to the left and right of
	   * the text field.
	   */
	  paddedBlock: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the text field is currently disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional label to display with the text field. This will convert the text field
	   * into a floating label text field. You can make it single line by only using the
	   * `placeholder` prop.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * An optional placeholder text to display in the text field. If there is no `label` prop,
	   * the text field will be displayed as a single line text field. If there is a `label` prop,
	   * this will only be visible when there is no value and the user focused the text field.
	   */
	  placeholder: _propTypes2.default.string,
	
	  /**
	   * The id for the text field.  This is required for a11y if the `label` prop is defined.
	   */
	  id: function id(props, propName, component) {
	    for (var _len2 = arguments.length, others = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      others[_key2 - 3] = arguments[_key2];
	    }
	
	    var validator = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]);
	    if (typeof props.label !== 'undefined') {
	      return (0, _isRequiredForA11y2.default)(validator).apply(undefined, [props, propName, component].concat(others));
	    }
	
	    return validator.apply(undefined, [props, propName, component].concat(others));
	  },
	
	  /**
	   * The type for the text field. This is one of the most import props for mobile accessibility
	   * as it will update the keyboard for the text type. This does not get applied on multiline
	   * text fields.
	   */
	  type: _propTypes2.default.oneOf(['text', 'number', 'email', 'search', 'tel', 'url', 'password']).isRequired,
	
	  /**
	   * An optional function to call when the text field's container triggers the `click` event.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `doubleclick`
	   * event.
	   */
	  onDoubleClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `touchstart`
	   * event.
	   */
	  onTouchStart: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `touchmove`
	   * event.
	   */
	  onTouchMove: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `touchcancel`
	   * event.
	   */
	  onTouchCancel: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `touchend`
	   * event.
	   */
	  onTouchEnd: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `mousedown`
	   * event.
	   */
	  onMouseDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `mouseup`
	   * event.
	   */
	  onMouseUp: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `mouseover`
	   * event.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field's container triggers the `mouseleave`
	   * event.
	   */
	  onMouseLeave: _propTypes2.default.func,
	
	  /**
	   * An optional onChange function to call. If the `value` prop is true, this is
	   * required.
	   *
	   * When the value changes in the text field, this will be called with the new text
	   * field's value and the change event.
	   *
	   * ```js
	   * onChange(e.target.value, e);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field is focused.
	   */
	  onFocus: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the text field has the `keydown` event.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * An optional boolean if the `active` state of the text field can be externally
	   * modified as well. The text field is usually considered active when it gains focus.
	   *
	   * If this prop is set, it will check both the active prop and the active state to
	   * determine if one is true.
	   */
	  active: _propTypes2.default.bool,
	
	  /**
	   * An optional boolean if the `error` state of the text field can be externally
	   * modified as well. The text field is usually considered errored when it is required
	   * and there is no value or the current length of the text field's value is greater
	   * than the `maxLength` prop.
	   *
	   * If this prop is set, it will check both the error prop and the error state to
	   * determine if one is true.
	   */
	  error: _propTypes2.default.bool,
	
	  /**
	   * An optional boolean if the `floating` state of the text field's floating label can be
	   * externally modified as well. The floating state is true when the tet field gains focus
	   * or there is a value in the text field.
	   *
	   * If this prop is set, it will check both the floating prop and the floating state to
	   * determine if one is true.
	   */
	  floating: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the text field is required. If the user blurs the text field while there is
	   * no value and it is required, the `error` state will be set to true.
	   */
	  required: _propTypes2.default.bool,
	
	  /**
	   * The direction that the underline should appear from.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']).isRequired,
	
	  /**
	   * An optional icon to place to the left of the text field.
	   */
	  leftIcon: _propTypes2.default.element,
	
	  /**
	   * Boolean if the left icon should be stateful. This means that the icon will
	   * gain the active or error colors with the text field.
	   */
	  leftIconStateful: _propTypes2.default.bool,
	
	  /**
	   * An optional icon to place to the right of the text field.
	   */
	  rightIcon: _propTypes2.default.element,
	
	  /**
	   * Boolean if the right icon should be stateful. This means that the icon will
	   * gain the active or error colors with the text field.
	   */
	  rightIconStateful: _propTypes2.default.bool,
	
	  /**
	   * Any children used to display the password icon.
	   */
	  passwordIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className for the password icon.
	   */
	  passwordIconClassName: _propTypes2.default.string,
	
	  /**
	   * Boolean if the password is initially visible.
	   */
	  passwordInitiallyVisible: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the text field should be displayed as full width.
	   */
	  fullWidth: _propTypes2.default.bool,
	
	  /**
	   * The number of rows for the `multiline` text field. This value must be greater than
	   * or equal to 1. When this value is set, the text field will be converted to a multiline
	   * field.
	   */
	  rows: (0, _minNumber2.default)(1, false),
	
	  /**
	   * The maximum number of rows for a `multiline` text field. If this value is
	   * `undefined`, `0`, or a number less than `0`, the multiline text field will
	   * infinitely expand.
	   */
	  maxRows: _propTypes2.default.number,
	
	  /**
	   * An optional customsize to apply to the text field. This is used along with
	   * the `$md-text-field-custom-sizes` variable. It basically applies a className of
	   * `md-text-field--NAME`.
	   */
	  customSize: _propTypes2.default.string,
	
	  /**
	   * An optional error text to display below the text field. This will only appear when
	   * the text field has the `error` state through the `error` prop, the current length
	   * of the text field's value is greater than the `maxLength` prop, or the field is
	   * required and the user blurs the text field with no value.
	   */
	  errorText: (0, _invalidIf2.default)(_propTypes2.default.node, 'block'),
	
	  /**
	   * An optional help text to display below the text field. This will always be visible
	   * unless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus.
	   */
	  helpText: (0, _invalidIf2.default)(_propTypes2.default.node, 'block'),
	
	  /**
	   * Boolean if the help text should display on focus only.
	   */
	  helpOnFocus: _propTypes2.default.bool,
	
	  /**
	   * An optional max length for the text field. This will insert a counter underneath the
	   * text field that appears on focus.
	   */
	  maxLength: _propTypes2.default.number,
	
	  /**
	   * The ink when there is an injectInk above the text field. Used from the SelectField.
	   *
	   * @access private
	   */
	  ink: _propTypes2.default.node,
	
	  /**
	   * An optional element to display inside of the `TextField` to the farthest right. This will
	   * position the indicator absolutely and add some additional padding to the `TextField`.
	   */
	  inlineIndicator: _propTypes2.default.element,
	
	  icon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `leftIcon` or `rightIcon` prop instead'),
	  floatingLabel: (0, _deprecated2.default)(_propTypes2.default.bool, 'The `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop'),
	  adjustMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'Manually add a min width style instead')
	};
	TextField.defaultProps = {
	  type: 'text',
	  lineDirection: 'left',
	  passwordIconChildren: 'remove_red_eye',
	  leftIconStateful: true,
	  rightIconStateful: true,
	  fullWidth: true
	};
	exports.default = TextField;

/***/ },
/* 31 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(23)
	  , createDesc = __webpack_require__(50);
	module.exports = __webpack_require__(20) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(76)('wks')
	  , uid        = __webpack_require__(51)
	  , Symbol     = __webpack_require__(16).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var FOOTER_PADDING = 8;
	
	var DialogFooter = function (_PureComponent) {
	  _inherits(DialogFooter, _PureComponent);
	
	  function DialogFooter(props) {
	    _classCallCheck(this, DialogFooter);
	
	    var _this = _possibleConstructorReturn(this, (DialogFooter.__proto__ || Object.getPrototypeOf(DialogFooter)).call(this, props));
	
	    _this.state = { stacked: false };
	
	    _this._toElement = _this._toElement.bind(_this);
	    _this._generateActions = _this._generateActions.bind(_this);
	    _this._setContainer = _this._setContainer.bind(_this);
	    return _this;
	  }
	
	  _createClass(DialogFooter, [{
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      var _this2 = this;
	
	      if (container !== null) {
	        (function () {
	          _this2._container = container;
	          var maxWidth = (_this2._container.offsetWidth - FOOTER_PADDING * 3) / 2;
	
	          var stacked = false;
	          Array.prototype.slice.call(_this2._container.querySelectorAll('.md-btn')).some(function (_ref) {
	            var offsetWidth = _ref.offsetWidth;
	
	            stacked = offsetWidth > maxWidth;
	            return stacked;
	          });
	
	          _this2.setState({ stacked: stacked });
	        })();
	      }
	    }
	  }, {
	    key: '_toElement',
	    value: function _toElement(action, index) {
	      if ((0, _react.isValidElement)(action)) {
	        var button = _react.Children.only(action);
	
	        return (0, _react.cloneElement)(action, {
	          key: button.props.key || index,
	          className: (0, _classnames2.default)('md-btn--dialog', button.props.className)
	        });
	      }
	
	      return _react2.default.createElement(_Button2.default, _extends({
	        key: index,
	        flat: true
	      }, action, {
	        className: (0, _classnames2.default)('md-btn--dialog', action.className)
	      }));
	    }
	  }, {
	    key: '_generateActions',
	    value: function _generateActions() {
	      var actions = this.props.actions;
	
	      if (Array.isArray(actions)) {
	        return actions.map(this._toElement);
	      }
	
	      return this._toElement(actions);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var stacked = this.state.stacked;
	      var className = this.props.className;
	
	      var _props = this.props,
	          children = _props.children,
	          actions = _props.actions,
	          props = _objectWithoutProperties(_props, ['children', 'actions']);
	
	      delete props.className;
	      delete props.onActionMount;
	
	      if (!actions || Array.isArray(actions) && !actions.length) {
	        return null;
	      }
	
	      className = (0, _classnames2.default)('md-dialog-footer', {
	        'md-dialog-footer--inline': !stacked,
	        'md-dialog-footer--stacked': stacked
	      }, className);
	
	      return _react2.default.createElement(
	        'footer',
	        _extends({}, props, { className: className, ref: this._setContainer }),
	        this._generateActions(),
	        children
	      );
	    }
	  }]);
	
	  return DialogFooter;
	}(_react.PureComponent);
	
	DialogFooter.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]))])
	};
	exports.default = DialogFooter;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _CSSTransitionGroup = __webpack_require__(25);
	
	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _contextTypes = __webpack_require__(101);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	var _Positions = __webpack_require__(47);
	
	var _Positions2 = _interopRequireDefault(_Positions);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _handleWindowClickListeners = __webpack_require__(38);
	
	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);
	
	var _handleKeyboardAccessibility = __webpack_require__(37);
	
	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);
	
	var _List = __webpack_require__(28);
	
	var _List2 = _interopRequireDefault(_List);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Menu` component is a controlled component that will display
	 * a `List` of `ListItem` once it has been toggled open.
	 */
	var Menu = function (_PureComponent) {
	  _inherits(Menu, _PureComponent);
	
	  function Menu(props) {
	    _classCallCheck(this, Menu);
	
	    var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));
	
	    _this._setList = _this._setList.bind(_this);
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleListClick = _this._handleListClick.bind(_this);
	    _this._handleOutsideClick = _this._handleOutsideClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(Menu, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _props = this.props,
	          menuCascading = _props.cascading,
	          menuPosition = _props.position;
	
	      return {
	        menuCascading: menuCascading,
	        menuPosition: menuPosition,
	        listLevel: 0
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var isOpen = this.props.isOpen;
	
	      if (isOpen) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, true);
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      var isOpen = this.props.isOpen;
	
	      if (isOpen === prevProps.isOpen) {
	        return;
	      }
	
	      (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, isOpen);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var isOpen = this.props.isOpen;
	
	      if (isOpen) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	      }
	
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	    }
	  }, {
	    key: '_setList',
	    value: function _setList(list) {
	      if (list !== null) {
	        this._list = (0, _reactDom.findDOMNode)(list);
	      }
	
	      try {
	        var children = _react.Children.only(this.props.children);
	        if (typeof children.ref === 'function') {
	          children.ref(list);
	        }
	      } catch (e) {
	        // do nothing
	      }
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      if (container !== null) {
	        this._container = (0, _reactDom.findDOMNode)(container);
	      }
	    }
	  }, {
	    key: '_handleOutsideClick',
	    value: function _handleOutsideClick(e) {
	      var isInContextMenu = this.props.position === _Positions2.default.CONTEXT && !this._list.contains(e.target);
	
	      if (isInContextMenu || !this._container.contains(e.target)) {
	        var _props2 = this.props,
	            onClose = _props2.onClose,
	            close = _props2.close;
	
	        if (close) {
	          close(e);
	        } else if (onClose) {
	          onClose(e);
	        }
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      (0, _handleKeyboardAccessibility2.default)(e, this._handleListClick, true, true);
	    }
	  }, {
	    key: '_handleListClick',
	    value: function _handleListClick(e) {
	      var _this2 = this;
	
	      var _props3 = this.props,
	          onClose = _props3.onClose,
	          close = _props3.close;
	
	
	      var node = e.target;
	      while (this._container.contains(node)) {
	        if (!node.classList.contains('md-list-item--nested-container') && node.classList.contains('md-list-item')) {
	          this._timeout = setTimeout(function () {
	            _this2._timeout = null;
	
	            if (close) {
	              close(e);
	            } else if (onClose) {
	              onClose(e);
	            }
	          }, _CSSTransitionGroupTick2.default);
	
	          return;
	        }
	        node = node.parentNode;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props4 = this.props,
	          id = _props4.id,
	          className = _props4.className,
	          listStyle = _props4.listStyle,
	          listClassName = _props4.listClassName,
	          isOpen = _props4.isOpen,
	          fullWidth = _props4.fullWidth,
	          toggle = _props4.toggle,
	          contained = _props4.contained,
	          children = _props4.children,
	          position = _props4.position,
	          props = _objectWithoutProperties(_props4, ['id', 'className', 'listStyle', 'listClassName', 'isOpen', 'fullWidth', 'toggle', 'contained', 'children', 'position']);
	
	      delete props.close;
	      delete props.onClose;
	      delete props.cascading;
	      delete props.autoclose;
	      delete props.listId;
	
	      var listId = this.props.listId;
	
	      if (!listId && id) {
	        listId = id + 'List';
	      }
	
	      var menuClassName = (0, _classnames2.default)({ 'md-list--menu-contained': contained }, listClassName);
	      var menuItems = void 0;
	      try {
	        var list = _react.Children.only(children);
	
	        menuItems = (0, _react.cloneElement)(children, {
	          id: list.props.id || listId,
	          key: 'menu-list',
	          className: (0, _classnames2.default)(menuClassName, list.props.className),
	          onClick: this._handleListClick,
	          onKeyDown: this._handleKeyDown,
	          ref: this._setList
	        });
	      } catch (e) {
	        menuItems = _react2.default.createElement(
	          _List2.default,
	          {
	            id: listId,
	            key: 'menu-list',
	            style: listStyle,
	            className: menuClassName,
	            onKeyDown: this._handleKeyDown,
	            onClick: this._handleListClick,
	            ref: this._setList
	          },
	          children
	        );
	      }
	
	      return _react2.default.createElement(
	        _CSSTransitionGroup2.default,
	        _extends({}, props, {
	          id: id,
	          ref: this._setContainer,
	          className: (0, _classnames2.default)('md-inline-block md-menu-container', {
	            'md-full-width': fullWidth,
	            'md-menu-container--menu-below': position === _Positions2.default.BELOW
	          }, className),
	          'aria-haspopup': true,
	          'aria-expanded': isOpen,
	          'aria-owns': listId
	        }),
	        toggle,
	        isOpen ? menuItems : null
	      );
	    }
	  }]);
	
	  return Menu;
	}(_react.PureComponent);
	
	Menu.Positions = _Positions2.default;
	Menu.propTypes = {
	  /**
	   * An optional id to give to the menu's container. This is used for accessibility and is
	   * generally recommended.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional id to give to the `List` that gets generated when open. This is used for
	   * accessibility and generally recommended. If this prop is given, the `aria-owns` attribute
	   * will be added to the list.
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional style to apply to the main container for a menu.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the main container for a menu.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the menu's `List` once it has been toggled open.
	   */
	  listStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the menu's `List` once it has been toggled open.
	   */
	  listClassName: _propTypes2.default.string,
	
	  /**
	   * The component to render the container as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * This can either be a single `List` component or an array of `ListItem`, `ListItemControl`,
	   * `Divider`, or `Subheader` to display when the menu is open. If it is the `List` component,
	   * it will be cloned with some additional class names.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
	
	  /**
	   * Boolean if the `Menu` is currently open.
	   */
	  isOpen: _propTypes2.default.bool.isRequired,
	
	  /**
	   * The transition name to use for the menu's enter and leave transitions
	   */
	  transitionName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The timeout for the enter transition.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The timeout for the leave transition.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The node to use as the toggle for the menu.
	   */
	  toggle: _propTypes2.default.node,
	
	  /**
	   * The position that the menu should appear from. If the position is set to
	   * `Menu.Positions.CONTEXT`, the `onClose` function will be called when something
	   * outside of the `List` is clicked instead of something outside of the `Menu`.
	   */
	  position: _propTypes2.default.oneOf([Menu.Positions.TOP_LEFT, Menu.Positions.TOP_RIGHT, Menu.Positions.BOTTOM_LEFT, Menu.Positions.BOTTOM_RIGHT, Menu.Positions.CONTEXT, Menu.Positions.BELOW]).isRequired,
	
	  /**
	   * A function used to close the menu. This is used when the user clicks outside
	   * of the menu or when a `ListItem` is clicked.
	   */
	  onClose: _propTypes2.default.func.isRequired,
	
	  /**
	   * Boolean if the menu is cascading. This isn't really working too well yet.
	   */
	  cascading: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the width of the `List` should be limited to the width of the `toggle`
	   */
	  contained: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the menu should be displayed full width instead of inline.
	   */
	  fullWidth: _propTypes2.default.bool,
	
	  close: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onClose` instead'),
	  autoclose: (0, _deprecated2.default)(_propTypes2.default.bool, 'The menus will always autoclose as according to the specs'),
	  limitHeight: (0, _deprecated2.default)(_propTypes2.default.bool, 'The menus will always be limited in height as according to the specs'),
	  expanderIconClassName: (0, _deprecated2.default)(_propTypes2.default.node, 'The expander for cascading menus will now just be a simple rotate of the existing `ListItem` ' + 'expander icon'),
	  expanderIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'The expander for cascading menus will now just be a simple rotate of the existing `ListItem` ' + 'expander icon')
	};
	Menu.defaultProps = {
	  component: 'div',
	  transitionName: 'md-menu',
	  transitionEnterTimeout: 200,
	  transitionLeaveTimeout: 200,
	  position: Menu.Positions.TOP_RIGHT
	};
	Menu.childContextTypes = _contextTypes2.default;
	exports.default = Menu;

/***/ },
/* 36 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = captureNextEvent;
	/**
	 * This function will capture the next event and stop propagation during the
	 * bubbling cycle of events. This is really only useful if you want to stop
	 * the default behavior of chained events.
	 *
	 * @param {String} type - The event type to capture.
	 * @param {Object|func=} target - Either the DOM node to target, a callback function
	 *      to call once the event has been captured, or undefined. If this is undefined,
	 *      the event will be captured on the window.
	 * @param {func=} callback - An optional callback function to call once the event
	 *      has been captured.
	 */
	function captureNextEvent(type, target, callback) {
	  var el = typeof target !== 'function' && target ? target : window;
	  var cb = typeof target === 'function' ? target : callback;
	
	  var capture = function capture(e) {
	    e.stopPropagation();
	    if (cb) {
	      cb(e);
	    }
	
	    el.removeEventListener(type, capture, true);
	  };
	
	  el.addEventListener(type, capture, true);
	}

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = handleKeyboardAccessibility;
	
	var _keyCodes = __webpack_require__(6);
	
	var _closest = __webpack_require__(281);
	
	var _closest2 = _interopRequireDefault(_closest);
	
	var _isFormPartRole = __webpack_require__(126);
	
	var _isFormPartRole2 = _interopRequireDefault(_isFormPartRole);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A utility function for adding keyboard accessibility to elements that are not a natively
	 * clickable (div, span, etc). When the space or enter key is pressed while focusing the
	 * element, different flows will happen.
	 *
	 * - space - The click event will be triggered and the default page scrolling behavior of the
	 *      spacebar will be prevented
	 * - enter - If the element has a form role ('checkbox' or 'radio'), the click event will not
	 *      be triggered. Instead, it will find out if the element is inside a form. If it is, it
	 *      will emulate the default behavior of attempting to submit the form. If the element does
	 *      not have a form role, the click event will be triggered.
	 *
	 * @param {Event} e - the keydown event
	 * @param {function} onClick - the on click event to be triggered if space or enter was pressed
	 * @param {boolean=true} listenToEnter - boolean if the enter key should be used to trigger the
	 *      the click event. Even if this is true, the click event will not be triggered if the role
	 *      is for a form role.
	 * @param {boolean=true} listenToSpace - boolean if the space key should be used to trigger the
	 *      click event.
	 * @return {Boolean} true if the enter or space keys were pressed while their listener is also active.
	 */
	function handleKeyboardAccessibility(e, onClick) {
	  var listenToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  var listenToSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	
	  var key = e.which || e.keyCode;
	  var space = listenToSpace && key === _keyCodes.SPACE;
	  var enter = key === _keyCodes.ENTER;
	
	  var tagName = e.target.tagName;
	
	  if (space && tagName !== 'INPUT' && tagName !== 'TEXTAREA') {
	    // it is valid to press space in text fields
	    // Stop page scrolling
	    e.preventDefault();
	  }
	
	  if (enter && (0, _isFormPartRole2.default)(e.target)) {
	    var form = (0, _closest2.default)(e.target, 'form');
	    var submit = form ? form.querySelector('*[type="submit"]') : null;
	    if (submit) {
	      submit.click();
	    }
	
	    return true;
	  }
	
	  if (enter && listenToEnter || space) {
	    onClick(e);
	
	    return true;
	  }
	
	  return false;
	}

/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = handleWindowClickListeners;
	var mobileSafari = void 0;
	
	/**
	 * Since mobile safari doesn't delegate click events to the window (it only does touch events),
	 * this utility function will hack a fix to allow the delegation by updaging the body's cursor
	 * to be a pointer.
	 *
	 * Hopefully this can be removed one day....
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile
	 * @param {function} cb - the callback function to use for a window click event.
	 * @param {boolean} enabled - boolean if the click event is enabled.
	 */
	function handleWindowClickListeners(cb) {
	  var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (typeof mobileSafari === 'undefined' && typeof window !== 'undefined') {
	    var ua = window.navigator.userAgent;
	    var iOS = ua.match(/iP(ad|hone)/i);
	    var webkit = ua.match(/WebKit/i);
	    mobileSafari = iOS && webkit && !ua.match(/CriOS/i);
	
	    if (mobileSafari) {
	      document.body.style.cursor = 'pointer';
	    }
	  }
	
	  var listener = window[(enabled ? 'add' : 'remove') + 'EventListener'];
	  listener('click', cb);
	}

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = between;
	
	var _isBetween = __webpack_require__(120);
	
	var _isBetween2 = _interopRequireDefault(_isBetween);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Validates that a number is between a min and max value.
	 *
	 * @param {function} validator - The number validator to use.
	 * @param {number} min - The min number to use.
	 * @param {number} max - The max number to use.
	 * @return {Error} the prop type error or null
	 */
	function between(validator, min, max) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    var value = props[propName];
	    if (!err && typeof value !== 'undefined' && !(0, _isBetween2.default)(value, min, max)) {
	      err = new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' that was ' + ('not within the range from \'' + min + ' - ' + max + '\'. `' + propFullNameSafe + '`: ' + value + '.'));
	    }
	
	    return err;
	  };
	} /** @module PropTypes/between */

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(41);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(139)
	  , enumBugKeys = __webpack_require__(69);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  uncheckedIconClassName: _propTypes2.default.string.isRequired,
	  uncheckedIconChildren: _propTypes2.default.node,
	  checkedIconClassName: _propTypes2.default.string.isRequired,
	  checkedIconChildren: _propTypes2.default.node,
	  plain: _propTypes2.default.bool,
	  allSelected: _propTypes2.default.bool.isRequired,
	  selectedRows: _propTypes2.default.arrayOf(_propTypes2.default.bool).isRequired,
	  createCheckbox: _propTypes2.default.func.isRequired,
	  removeCheckbox: _propTypes2.default.func.isRequired,
	  toggleAllRows: _propTypes2.default.func.isRequired,
	  toggleSelectedRow: _propTypes2.default.func.isRequired,
	  baseId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  baseName: _propTypes2.default.string
	};

/***/ },
/* 44 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = findTable;
	/**
	 * Attempts fo find the base table component from an element in the table.
	 * This will either be the wrapper for responsive data tables, or the table element.
	 *
	 * @param {Object} el - The element to traverse from
	 * @param {Object} the table or null.
	 */
	function findTable(el) {
	  var table = void 0;
	  var node = el;
	  while (node && node.parentNode) {
	    if (node.classList && node.classList.contains('md-data-table')) {
	      // Attempt to check one more element up to see if there is a table-container
	      // for responsive tables.
	      table = node;
	    } else if (node.classList && node.classList.contains('md-data-table--responsive')) {
	      return node;
	    } else if (table) {
	      return table;
	    }
	
	    node = node.parentNode;
	  }
	
	  return null;
	}

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _handleKeyboardAccessibility = __webpack_require__(37);
	
	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `AccessibleFakeButton` is a generic component that can be used to render
	 * a `div` or any other non `button` components as a button. This should not be
	 * used often.
	 *
	 * The `AccessibleFakeButton` allows the user to tab focus the element, use the
	 * space or enter key to trigger the `onClick` event, and toggles the `aria-pressed`
	 * attribute.
	 */
	var AccessibleFakeButton = function (_PureComponent) {
	  _inherits(AccessibleFakeButton, _PureComponent);
	
	  function AccessibleFakeButton(props) {
	    _classCallCheck(this, AccessibleFakeButton);
	
	    var _this = _possibleConstructorReturn(this, (AccessibleFakeButton.__proto__ || Object.getPrototypeOf(AccessibleFakeButton)).call(this, props));
	
	    _this.state = { pressed: false, tabFocused: false };
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    _this._handleBlur = _this._handleBlur.bind(_this);
	    _this._setNode = _this._setNode.bind(_this);
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    return _this;
	  }
	
	  /**
	   * Focuses the button.
	   */
	
	
	  _createClass(AccessibleFakeButton, [{
	    key: 'focus',
	    value: function focus() {
	      if (this._node) {
	        this._node.focus();
	      }
	    }
	
	    /**
	     * Blurs the button.
	     */
	
	  }, {
	    key: 'blur',
	    value: function blur() {
	      if (this._node) {
	        this._node.blur();
	      }
	    }
	  }, {
	    key: '_setNode',
	    value: function _setNode(node) {
	      if (node) {
	        this._node = (0, _reactDom.findDOMNode)(node);
	      }
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      if (this.props.disabled) {
	        return;
	      }
	
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      this._node.focus();
	      this.setState({ pressed: !this.state.pressed });
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      var _props = this.props,
	          disabled = _props.disabled,
	          onKeyDown = _props.onKeyDown,
	          listenToEnter = _props.listenToEnter,
	          listenToSpace = _props.listenToSpace;
	
	      if (disabled) {
	        return;
	      }
	
	      if (onKeyDown) {
	        onKeyDown(e);
	      }
	
	      (0, _handleKeyboardAccessibility2.default)(e, this._handleClick, listenToEnter, listenToSpace);
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      var _props2 = this.props,
	          onKeyUp = _props2.onKeyUp,
	          onTabFocus = _props2.onTabFocus;
	
	      if (onKeyUp) {
	        onKeyUp(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        if (onTabFocus) {
	          onTabFocus(e);
	        }
	
	        this.setState({ tabFocused: true });
	      }
	    }
	  }, {
	    key: '_handleBlur',
	    value: function _handleBlur(e) {
	      if (this.props.onBlur) {
	        this.props.onBlur(e);
	      }
	
	      if (this.state.tabFocused) {
	        this.setState({ tabFocused: false });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          Component = _props3.component,
	          children = _props3.children,
	          className = _props3.className,
	          tabbedClassName = _props3.tabbedClassName,
	          disabled = _props3.disabled,
	          tabIndex = _props3.tabIndex,
	          ink = _props3.ink,
	          props = _objectWithoutProperties(_props3, ['component', 'children', 'className', 'tabbedClassName', 'disabled', 'tabIndex', 'ink']);
	
	      delete props.onBlur;
	      delete props.onClick;
	      delete props.onKeyUp;
	      delete props.onKeyDown;
	      delete props.onTabFocus;
	      delete props.listenToEnter;
	      delete props.listenToSpace;
	
	      var childElements = children;
	      if (ink) {
	        childElements = _react.Children.toArray(children);
	        childElements.unshift(ink);
	      }
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          ref: this._setNode,
	          className: (0, _classnames2.default)('md-fake-btn', _defineProperty({
	            'md-pointer--hover': !disabled
	          }, tabbedClassName, tabbedClassName && this.state.tabFocused), className),
	          disabled: disabled,
	          tabIndex: disabled ? null : tabIndex,
	          onBlur: this._handleBlur,
	          onClick: this._handleClick,
	          onKeyUp: this._handleKeyUp,
	          onKeyDown: this._handleKeyDown,
	          'aria-pressed': this.state.pressed
	        }),
	        childElements
	      );
	    }
	  }]);
	
	  return AccessibleFakeButton;
	}(_react.PureComponent);
	
	AccessibleFakeButton.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional function to call only when the button has been focused with the tab key.
	   */
	  tabbedClassName: _propTypes2.default.string,
	
	  /**
	   * Any children to display in the Accessible Fake Button.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * An optional onClick function to call whent he user clicks the
	   * button or presses space || enter.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional onKeyDown function to call.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * An optional onBlur function to call.
	   */
	  onBlur: _propTypes2.default.func,
	
	  /**
	   * An optional onKeyUp function to call.
	   */
	  onKeyUp: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the element is focused with the tab key.
	   */
	  onTabFocus: _propTypes2.default.func,
	
	  /**
	   * The component to render the Fake button as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * The tab index to use for the Fake button so it is keyboard focusable.
	   */
	  tabIndex: _propTypes2.default.number,
	
	  /**
	   * Boolean if the Button is disabled. This will prevent tab focus.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * The role for the accessible fake button. It is recommended to keep it
	   * the default of `button` unless you are rendering it as an `a` tag.
	   */
	  role: _propTypes2.default.string,
	
	  /**
	   * The ink when coming from the AccessibleFakeInkedButton
	   * @access private
	   */
	  ink: _propTypes2.default.node,
	
	  /**
	   * Boolean if the spacebar should be used to trigger the click event. This _should_ be `true`
	   * is almost all cases.
	   */
	  listenToSpace: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the enter key should be used to trigger the click event. This _should_ be `true`
	   * in most cases. By default, the param will be ignored if the `role` attribute is for a `checkbox`
	   * or `radio`. When it is a checkbox or radio, it will attempt to submit the form on the enter
	   * keypress instead like the native elements.
	   */
	  listenToEnter: _propTypes2.default.bool
	};
	AccessibleFakeButton.defaultProps = {
	  component: 'div',
	  tabIndex: 0,
	  role: 'button',
	  listenToEnter: true,
	  listenToSpace: true
	};
	exports.default = AccessibleFakeButton;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _keyCodes = __webpack_require__(6);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	var _Collapse = __webpack_require__(17);
	
	var _Collapse2 = _interopRequireDefault(_Collapse);
	
	var _Collapser = __webpack_require__(61);
	
	var _Collapser2 = _interopRequireDefault(_Collapser);
	
	var _TileAddon = __webpack_require__(63);
	
	var _TileAddon2 = _interopRequireDefault(_TileAddon);
	
	var _ListItemText = __webpack_require__(98);
	
	var _ListItemText2 = _interopRequireDefault(_ListItemText);
	
	var _List = __webpack_require__(28);
	
	var _List2 = _interopRequireDefault(_List);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `ListItem` component is used for rendering a `li` tag with text and optional
	 * icons/avatars.
	 */
	var ListItem = function (_PureComponent) {
	  _inherits(ListItem, _PureComponent);
	
	  function ListItem(props) {
	    _classCallCheck(this, ListItem);
	
	    var _this = _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call(this, props));
	
	    _this.state = { active: false };
	
	    if (typeof props.isOpen === 'undefined') {
	      _this.state.isOpen = typeof props.initiallyOpen !== 'undefined' ? props.initiallyOpen : !!props.defaultOpen;
	    }
	
	    _this.focus = _this.focus.bind(_this);
	    _this._setTile = _this._setTile.bind(_this);
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._handleOutsideClick = _this._handleOutsideClick.bind(_this);
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleTouchEnd = _this._handleTouchEnd.bind(_this);
	    return _this;
	  }
	
	  _createClass(ListItem, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.state.active) {
	        window.removeEventListener('click', this._handleOutsideClick);
	      }
	
	      if (this._touchTimeout) {
	        clearTimeout(this._touchTimeout);
	      }
	    }
	
	    /**
	     * A utility function to focus the `AccessibleFakeInkedButton` in the `ListItem` and also
	     * inject an ink to indicate focus.
	     */
	
	  }, {
	    key: 'focus',
	    value: function focus() {
	      if (this._tile) {
	        this._tile.focus();
	      }
	    }
	
	    /**
	     * A utility function to blur the `AccessibleFakeInkedButton` in the `ListItem`.
	     */
	
	  }, {
	    key: 'blur',
	    value: function blur() {
	      if (this._tile) {
	        this._tile.blur();
	      }
	    }
	  }, {
	    key: '_setTile',
	    value: function _setTile(tile) {
	      if (tile) {
	        this._tile = tile;
	      }
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      if (container) {
	        this._container = (0, _reactDom.findDOMNode)(container);
	      }
	    }
	  }, {
	    key: '_handleOutsideClick',
	    value: function _handleOutsideClick(e) {
	      if (this._container && !this._container.contains(e.target)) {
	        window.removeEventListener('click', this._handleOutsideClick);
	        this.setState({ active: false });
	      }
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      if (typeof this.state.isOpen !== 'undefined') {
	        this.setState({ isOpen: !this.state.isOpen });
	      }
	    }
	  }, {
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ active: true });
	      }
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ active: false });
	      }
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      if (this.props.onTouchStart) {
	        this.props.onTouchStart(e);
	      }
	
	      this._touched = true;
	
	      this.setState({ active: true, touchedAt: Date.now() });
	    }
	  }, {
	    key: '_handleTouchEnd',
	    value: function _handleTouchEnd(e) {
	      var _this2 = this;
	
	      if (this.props.onTouchEnd) {
	        this.props.onTouchEnd(e);
	      }
	
	      var time = Date.now() - this.state.touchedAt;
	      this._touchTimeout = setTimeout(function () {
	        _this2._touchTimeout = null;
	
	        _this2.setState({ active: false });
	      }, time > 450 ? 0 : 450 - time);
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      if (this.props.onKeyUp) {
	        this.props.onKeyUp(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        window.addEventListener('click', this._handleOutsideClick);
	        this.setState({ active: true });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (this.props.onKeyDown) {
	        this.props.onKeyDown(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        window.removeEventListener('click', this._handleOutsideClick);
	        this.setState({ active: false });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          tileStyle = _props.tileStyle,
	          tileClassName = _props.tileClassName,
	          disabled = _props.disabled,
	          leftIcon = _props.leftIcon,
	          leftAvatar = _props.leftAvatar,
	          inset = _props.inset,
	          rightIcon = _props.rightIcon,
	          rightAvatar = _props.rightAvatar,
	          primaryText = _props.primaryText,
	          secondaryText = _props.secondaryText,
	          threeLines = _props.threeLines,
	          children = _props.children,
	          nestedItems = _props.nestedItems,
	          prependNested = _props.prependNested,
	          active = _props.active,
	          activeClassName = _props.activeClassName,
	          expanderIconChildren = _props.expanderIconChildren,
	          expanderIconClassName = _props.expanderIconClassName,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'tileStyle', 'tileClassName', 'disabled', 'leftIcon', 'leftAvatar', 'inset', 'rightIcon', 'rightAvatar', 'primaryText', 'secondaryText', 'threeLines', 'children', 'nestedItems', 'prependNested', 'active', 'activeClassName', 'expanderIconChildren', 'expanderIconClassName']);
	
	      delete props.isOpen;
	      delete props.defaultOpen;
	      delete props.initiallyOpen;
	
	      var isOpen = (0, _getField2.default)(this.props, this.state, 'isOpen');
	      var leftNode = _react2.default.createElement(_TileAddon2.default, {
	        key: 'left-addon',
	        active: active,
	        activeClassName: activeClassName,
	        icon: leftIcon,
	        avatar: leftAvatar
	      });
	
	      var rightNode = _react2.default.createElement(_TileAddon2.default, {
	        key: 'right-addon',
	        active: active,
	        activeClassName: activeClassName,
	        icon: rightIcon,
	        avatar: rightAvatar
	      });
	
	      var nestedList = void 0;
	      if (nestedItems) {
	        nestedList = _react2.default.createElement(
	          _Collapse2.default,
	          { collapsed: !isOpen },
	          _react2.default.createElement(
	            _List2.default,
	            null,
	            nestedItems
	          )
	        );
	
	        if (!rightIcon || !rightAvatar) {
	          rightNode = _react2.default.createElement(_TileAddon2.default, {
	            key: 'expander-addon',
	            icon: _react2.default.createElement(
	              _Collapser2.default,
	              { flipped: prependNested ? !isOpen : isOpen, iconClassName: expanderIconClassName },
	              expanderIconChildren
	            ),
	            avatar: null
	          });
	        }
	      }
	      var icond = !!leftIcon || !!rightIcon;
	      var avatard = !!leftAvatar || !!rightAvatar;
	
	      return _react2.default.createElement(
	        'li',
	        {
	          style: style,
	          className: (0, _classnames2.default)('md-list-item', {
	            'md-list-item--nested-container': nestedItems
	          }, className),
	          ref: this._setContainer
	        },
	        prependNested ? nestedList : null,
	        _react2.default.createElement(
	          _AccessibleFakeInkedButton2.default,
	          _extends({}, props, {
	            __SUPER_SECRET_REF__: this._setTile,
	            key: 'tile',
	            onClick: this._handleClick,
	            onMouseOver: this._handleMouseOver,
	            onMouseLeave: this._handleMouseLeave,
	            onTouchStart: this._handleTouchStart,
	            onTouchEnd: this._handleTouchEnd,
	            onKeyDown: this._handleKeyDown,
	            onKeyUp: this._handleKeyUp,
	            disabled: disabled,
	            style: tileStyle,
	            className: (0, _classnames2.default)('md-list-tile', {
	              'md-text': !disabled,
	              'md-text--disabled': disabled,
	              'md-list-tile--active': this.state.active && !this._touched,
	              'md-list-tile--icon': !secondaryText && icond && !avatard,
	              'md-list-tile--avatar': !secondaryText && avatard,
	              'md-list-tile--two-lines': secondaryText && !threeLines,
	              'md-list-tile--three-lines': secondaryText && threeLines,
	              'md-list-item--inset': inset && !leftIcon && !leftAvatar
	            }, tileClassName),
	            'aria-expanded': nestedList ? isOpen : null
	          }),
	          leftNode,
	          _react2.default.createElement(_ListItemText2.default, {
	            active: active,
	            activeClassName: activeClassName,
	            disabled: disabled,
	            primaryText: primaryText,
	            secondaryText: secondaryText,
	            threeLines: threeLines,
	            className: (0, _classnames2.default)({
	              'md-tile-content--left-icon': leftIcon,
	              'md-tile-content--left-avatar': leftAvatar,
	              'md-tile-content--right-padding': rightIcon || rightAvatar
	            })
	          }),
	          rightNode,
	          children
	        ),
	        prependNested ? null : nestedList
	      );
	    }
	  }]);
	
	  return ListItem;
	}(_react.PureComponent);
	
	ListItem.propTypes = {
	  /**
	   * An optional style to apply to the `li` tag.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `li` tag.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the `.md-list-tile`.
	   *
	   * @see component
	   */
	  tileStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `.md-list-tile`.
	   *
	   * @see component
	   */
	  tileClassName: _propTypes2.default.string,
	
	  /**
	   * Any additional children to display in the `.md-list-tile`. If you use this prop,
	   * you will most likely need to override the `height` for the `.md-list-tile--icon`,
	   * `.md-list-tile--avatar`, `.md-list-tile--two-lines`, and/or `.md-list-tile--three-lines`
	   * to get it to display correctly unless the children are positioned `absolute`.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the `ListItem` is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional tab index for the `.md-list-tile`. If omitted, it will default to the
	   * `AccessibleFakeButton`'s `tabIndex` default prop value.
	   */
	  tabIndex: _propTypes2.default.number,
	
	  /**
	   * The primary text to display. This will only be rendered as a single line. Any overflown
	   * text will be converted to ellipsis.
	   */
	  primaryText: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional secondary text to display below the `primaryText`. This can be an additional
	   * one or two lines. Like the `primaryText`, and overflown text will be converted to ellipsis.
	   *
	   * You must set the `threeLines` prop to `true` if you want this to be displayed as two lines.
	   */
	  secondaryText: _propTypes2.default.node,
	
	  /**
	   * An optional `FontIcon` to display to the left of the text.
	   */
	  leftIcon: _propTypes2.default.node,
	
	  /**
	   * Boolean if the list item should be inset as if there is a `leftIcon` or a `leftAvatar`.
	   * This is used for some lists where only a parent contains the icon.
	   */
	  inset: _propTypes2.default.bool,
	
	  /**
	   * An optional `Avatar` to display to the left of the text. If you have a mixed `List` of
	   * `FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to
	   * `true` so that the `Avatar` will be scaled down to the `FontIcon` size.
	   */
	  leftAvatar: _propTypes2.default.node,
	
	  /**
	   * An optional `FontIcon` to display to the right of the text.
	   */
	  rightIcon: _propTypes2.default.node,
	
	  /**
	   * An optional `Avatar` to display to the right of the text. If you have a mixed `List` of
	   * `FontIcon` and `Avatar`, it is recommended to set the `iconSized` prop on the `Avatar` to
	   * `true` so that the `Avatar` will be scaled down to the `FontIcon` size.
	   */
	  rightAvatar: _propTypes2.default.node,
	
	  /**
	   * Boolean if the `secondaryText` should span two lines instead of one. This will include
	   * three lines of text in total when including the `primaryText`.
	   */
	  threeLines: _propTypes2.default.bool,
	
	  /**
	   * An optional component to render the `.md-list-tile` as. This is mostly useful if you
	   * want to use the `ListItem` for navigation and working with the `react-router`'s `Link`
	   * component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,
	
	  /**
	   * An optional list of `ListItem`, `ListItemControl`, `Divider`, or `Subheader` components
	   * to render in a nested list. This will inject an expander icon to the right of the text
	   * in the `.md-list-tile` that rotates 180 degrees when open.
	   *
	   * The nested items will be visible once the user clicks on the `ListItem`.
	   *
	   * @see `defaultOpen`
	   * @see `isOpen`
	   */
	  nestedItems: _propTypes2.default.arrayOf(_propTypes2.default.node),
	
	  /**
	   * An optional parameter determining whether `nestedItems` should be placed before or after `ListItemText`
	   */
	  prependNested: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `nestedItems` are visible by default.
	   */
	  defaultOpen: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `nestedItems` are visible. This will make the `nestedItems` controlled
	   * and require the `onClick` function to be defined.
	   */
	  isOpen: (0, _controlled2.default)(_propTypes2.default.bool, 'onClick', 'defaultOpen'),
	
	  /**
	   * Any children used to render the expander icon.
	   */
	  expanderIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use to render the expander icon.
	   */
	  expanderIconClassName: _propTypes2.default.string,
	
	  /**
	   * An optional function to call when the `.md-list-tile` is clicked. This is required if the
	   * `isOpen` prop is defined.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `mouseover` event.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `mouseleave` event.
	   */
	  onMouseLeave: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `touchstart` event.
	   */
	  onTouchStart: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `touchend` event.
	   */
	  onTouchEnd: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `keydown` event.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `.md-list-tile` triggers the `keyup` event.
	   */
	  onKeyUp: _propTypes2.default.func,
	
	  /**
	   * Boolean if the `ListItem` is currently active. This will apply the `activeClassName` prop
	   * to the `leftIcon`, `rightIcon`, and the `primaryText`.
	   */
	  active: _propTypes2.default.bool,
	
	  /**
	   * The className to apply to the `leftIcon`, `rightIcon`, and `primaryText` when the `active`
	   * prop is `true`.
	   */
	  activeClassName: _propTypes2.default.string,
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultOpen` instead')
	};
	ListItem.defaultProps = {
	  activeClassName: 'md-text--theme-primary',
	  component: 'div',
	  expanderIconChildren: 'keyboard_arrow_down'
	};
	exports.default = ListItem;

/***/ },
/* 47 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  TOP_RIGHT: 'tr',
	  TOP_LEFT: 'tl',
	  BOTTOM_RIGHT: 'br',
	  BOTTOM_LEFT: 'bl',
	  CONTEXT: 'context',
	  BELOW: 'below'
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _getDisplayName = __webpack_require__(123);
	
	var _getDisplayName2 = _interopRequireDefault(_getDisplayName);
	
	var _TooltipContainer = __webpack_require__(263);
	
	var _TooltipContainer2 = _interopRequireDefault(_TooltipContainer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Takes any component and injects a tooltip container as a prop. The tooltip container
	 * will add event listeners for touch, mouse, and keyboard events so that a tooltip will appear
	 * in the ComposedComponent.
	 *
	 * If the `tooltipLabel` prop is omitted, the tooltip and event listeners will not
	 * be included.
	 *
	 * ```js
	 * @param {function} ComposedComponent the component to compose with the tooltip functionality.
	 * @return {function} the ComposedComponent with a tooltip.
	 * ```
	 */
	exports.default = function (ComposedComponent) {
	  var _class, _temp;
	
	  return _temp = _class = function (_PureComponent) {
	    _inherits(TooltipedComponent, _PureComponent);
	
	    function TooltipedComponent(props) {
	      _classCallCheck(this, TooltipedComponent);
	
	      var _this = _possibleConstructorReturn(this, (TooltipedComponent.__proto__ || Object.getPrototypeOf(TooltipedComponent)).call(this, props));
	
	      _this._composed = null;
	
	      _this.getComposedComponent = _this.getComposedComponent.bind(_this);
	      _this._setComposedComponent = _this._setComposedComponent.bind(_this);
	      return _this;
	    }
	
	    /**
	     * Gets the composed component as a ref. This is usefull if you need to access the ref of the
	     * composed component instead of the `injectTooltip` HOC to use some publically accessible methods.
	     *
	     * ```js
	     * <SomeInkedComponent
	     *   ref={tooltipHOC => {
	     *     tooltipHOC.getComposedComponent().focus();
	     *   }}
	     * />
	     * ```
	     *
	     * > NOTE: This can be `null`, so make sure to do a null check before using..
	     */
	
	
	    _createClass(TooltipedComponent, [{
	      key: 'getComposedComponent',
	      value: function getComposedComponent() {
	        return this._composed;
	      }
	    }, {
	      key: '_setComposedComponent',
	      value: function _setComposedComponent(component) {
	        this._composed = component;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _props = this.props,
	            tooltipLabel = _props.tooltipLabel,
	            tooltipDelay = _props.tooltipDelay,
	            tooltipPosition = _props.tooltipPosition,
	            tooltipStyle = _props.tooltipStyle,
	            tooltipClassName = _props.tooltipClassName,
	            tooltipContainerStyle = _props.tooltipContainerStyle,
	            tooltipContainerClassName = _props.tooltipContainerClassName,
	            tooltipTransitionEnterTimeout = _props.tooltipTransitionEnterTimeout,
	            tooltipTransitionLeaveTimeout = _props.tooltipTransitionLeaveTimeout,
	            props = _objectWithoutProperties(_props, ['tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'tooltipStyle', 'tooltipClassName', 'tooltipContainerStyle', 'tooltipContainerClassName', 'tooltipTransitionEnterTimeout', 'tooltipTransitionLeaveTimeout']);
	
	        if (tooltipLabel) {
	          props.tooltip = _react2.default.createElement(_TooltipContainer2.default, {
	            key: 'tooltipContainer',
	            label: tooltipLabel,
	            delay: tooltipDelay,
	            position: tooltipPosition,
	            enterTimeout: tooltipTransitionEnterTimeout,
	            leaveTimeout: tooltipTransitionLeaveTimeout,
	            style: tooltipContainerStyle,
	            className: tooltipContainerClassName,
	            tooltipStyle: tooltipStyle,
	            tooltipClassName: tooltipClassName
	          });
	        }
	
	        props.ref = this._setComposedComponent;
	
	        return _react2.default.createElement(ComposedComponent, props);
	      }
	    }]);
	
	    return TooltipedComponent;
	  }(_react.PureComponent), _class.displayName = (0, _getDisplayName2.default)(ComposedComponent, 'Tooltiped'), _class.propTypes = {
	    /**
	     * An optional style to apply to the tooltip container.
	     */
	    tooltipContainerStyle: _propTypes2.default.object,
	
	    /**
	     * An optional className to apply to the tooltip container.
	     */
	    tooltipContainerClassName: _propTypes2.default.string,
	
	    /**
	     * An optional style to apply to the tooltip itself.
	     */
	    tooltipStyle: _propTypes2.default.object,
	
	    /**
	     * An optional className to the tooltip itself.
	     */
	    tooltipClassName: _propTypes2.default.string,
	
	    /**
	     * The tooltip to display. If omitted, the `tooltip` prop will not be injected.
	     */
	    tooltipLabel: _propTypes2.default.node,
	
	    /**
	     * The amount of delay before the tooltip will appear on hover, touch, or keyboard focus.
	     */
	    tooltipDelay: _propTypes2.default.number.isRequired,
	
	    /**
	     * The position that the tooltip should appear related to the composed compoennt.
	     */
	    tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']).isRequired,
	
	    /**
	     * The transition time for the tooltip appearing.
	     */
	    tooltipTransitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	    /**
	     * The transition time for the tooltip disappearing.
	     */
	    tooltipTransitionLeaveTimeout: _propTypes2.default.number.isRequired
	  }, _class.defaultProps = {
	    tooltipDelay: 0,
	    tooltipPosition: 'bottom',
	    tooltipTransitionEnterTimeout: 150,
	    tooltipTransitionLeaveTimeout: 150
	  }, _temp;
	};

/***/ },
/* 49 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 51 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 52 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	module.exports = exports['default'];

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;
	
	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }
	
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(340)))

/***/ },
/* 54 */
/***/ function(module, exports) {

	
	// turn {x: {val: 1, stiffness: 1, damping: 2}, y: 2} generated by
	// `{x: spring(1, {stiffness: 1, damping: 2}), y: 2}` into {x: 1, y: 2}
	
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = stripStyle;
	
	function stripStyle(style) {
	  var ret = {};
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }
	    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
	  }
	  return ret;
	}
	
	module.exports = exports['default'];

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function() {};
	
	if (true) {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}
	
	module.exports = warning;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _injectTooltip = __webpack_require__(48);
	
	var _injectTooltip2 = _interopRequireDefault(_injectTooltip);
	
	var _Collapser = __webpack_require__(61);
	
	var _Collapser2 = _interopRequireDefault(_Collapser);
	
	var _IconSeparator = __webpack_require__(26);
	
	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A column in a table. This is either the `th` or `td` component. This column
	 * can be automatically configured to be adjusted with additional padding
	 * or auto expand to fill the remaining table space if the `TableRow` component
	 * has `autoAdjust` set to `true`. If you would like to prevent this column
	 * for being a candidate for auto expanding to remaining space, add the className
	 * `.prevent-grow`.
	 */
	var TableColumn = function (_PureComponent) {
	  _inherits(TableColumn, _PureComponent);
	
	  function TableColumn() {
	    _classCallCheck(this, TableColumn);
	
	    return _possibleConstructorReturn(this, (TableColumn.__proto__ || Object.getPrototypeOf(TableColumn)).apply(this, arguments));
	  }
	
	  _createClass(TableColumn, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          numeric = _props.numeric,
	          adjusted = _props.adjusted,
	          header = _props.header,
	          children = _props.children,
	          sorted = _props.sorted,
	          sortIconChildren = _props.sortIconChildren,
	          sortIconClassName = _props.sortIconClassName,
	          tooltip = _props.tooltip,
	          selectColumnHeader = _props.selectColumnHeader,
	          __fixedColumn = _props.__fixedColumn,
	          props = _objectWithoutProperties(_props, ['className', 'numeric', 'adjusted', 'header', 'children', 'sorted', 'sortIconChildren', 'sortIconClassName', 'tooltip', 'selectColumnHeader', '__fixedColumn']);
	
	      var sortable = typeof sorted === 'boolean';
	
	      var displayedChildren = children;
	      if (sortable) {
	        displayedChildren = _react2.default.createElement(
	          _IconSeparator2.default,
	          { label: children, iconBefore: true },
	          _react2.default.createElement(
	            _Collapser2.default,
	            { flipped: !sorted, iconClassName: sortIconClassName },
	            sortIconChildren
	          )
	        );
	      }
	
	      var Component = header ? 'th' : 'td';
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-table-column', {
	            'md-table-column--header': header,
	            'md-table-column--data': !header,
	            'md-table-column--adjusted': adjusted,
	            'md-table-column--sortable md-pointer--hover': sortable,
	            'md-table-column--relative': !__fixedColumn && tooltip,
	            'md-table-column--select-field': selectColumnHeader,
	            'md-text': !header,
	            'md-text--secondary': header,
	            'md-text-left': !numeric,
	            'md-text-right': numeric
	          }, className)
	        }),
	        tooltip,
	        displayedChildren
	      );
	    }
	  }]);
	
	  return TableColumn;
	}(_react.PureComponent);
	
	TableColumn.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * The optional className for the table column
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The children to display in the column.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the column is currently sorted. If this prop is not `undefined`,
	   * it will add the sort icon unto this column. You will also need to use the
	   * `onClick` function to toggle the `sorted` prop as well as handling the sorting
	   * of data.
	   *
	   * This value should really only be set in the `TableHeader` component.
	   */
	  sorted: _propTypes2.default.bool,
	
	  /**
	   * The optional icon children to display in the sort icon.
	   */
	  sortIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className for the sort icon.
	   */
	  sortIconClassName: _propTypes2.default.string.isRequired,
	
	  /**
	   * A boolean if the column has numeric data. It will right-align the data.
	   */
	  numeric: _propTypes2.default.bool,
	
	  /**
	   * Boolean if this column should be adjusted with additional padding. This *should*
	   * be handled automatically by the `TableRow` component but can be set manually as well.
	   */
	  adjusted: _propTypes2.default.bool,
	
	  /**
	   * Boolean if this column is the `th` for a column of `SelectFieldColumn`. This will apply
	   * additional styling to the column to position with the select field.
	   */
	  selectColumnHeader: _propTypes2.default.bool,
	
	  /**
	   * Boolean if this is a `th` component. This value **should** be set
	   * automatically for you if it is in the `TableHeader` component.
	   */
	  header: _propTypes2.default.bool.isRequired,
	
	  /**
	   * The optional tooltip to render on hover.
	   */
	  tooltipLabel: _propTypes2.default.node,
	
	  /**
	   * An optional delay to apply to the tooltip before it appears.
	   */
	  tooltipDelay: _propTypes2.default.number,
	
	  /**
	   * The position of the tooltip.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	
	  /**
	   * The injected tooltip.
	   * @access private
	   */
	  tooltip: _propTypes2.default.node,
	
	  /**
	   * Boolean if the TableColumn is coming from the EditDialogColumn or SelectFieldColumn
	   * components. When this is false, it will update the column to have `position: relative`
	   * so that tooltips can be displayed.
	   */
	  __fixedColumn: _propTypes2.default.bool
	};
	TableColumn.defaultProps = {
	  header: false,
	  sortIconClassName: 'material-icons',
	  sortIconChildren: 'arrow_upward'
	};
	exports.default = (0, _injectTooltip2.default)(TableColumn);

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _contextTypes = __webpack_require__(43);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = Object.assign({}, _contextTypes2.default, { header: _propTypes2.default.bool });

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _CSSTransitionGroup = __webpack_require__(25);
	
	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _keyCodes = __webpack_require__(6);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _toggleScroll = __webpack_require__(282);
	
	var _toggleScroll2 = _interopRequireDefault(_toggleScroll);
	
	var _oneRequiredForA11y = __webpack_require__(277);
	
	var _oneRequiredForA11y2 = _interopRequireDefault(_oneRequiredForA11y);
	
	var _Dialog = __webpack_require__(180);
	
	var _Dialog2 = _interopRequireDefault(_Dialog);
	
	var _Portal = __webpack_require__(27);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DialogContainer = function (_PureComponent) {
	  _inherits(DialogContainer, _PureComponent);
	
	  function DialogContainer(props) {
	    _classCallCheck(this, DialogContainer);
	
	    var _this = _possibleConstructorReturn(this, (DialogContainer.__proto__ || Object.getPrototypeOf(DialogContainer)).call(this, props));
	
	    var visible = typeof props.isOpen !== 'undefined' ? props.isOpen : props.visible;
	    var dialogVisible = visible && !props.defaultVisibleTransitionable;
	
	    _this.state = {
	      active: visible && !props.fullPage,
	      overlay: visible && !props.fullPage,
	      portalVisible: visible,
	      dialogVisible: dialogVisible
	    };
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._handleDialogMounting = _this._handleDialogMounting.bind(_this);
	    _this._mountPortal = _this._mountPortal.bind(_this);
	    _this._mountDialog = _this._mountDialog.bind(_this);
	    _this._unmountPortal = _this._unmountPortal.bind(_this);
	    _this._handleEscClose = _this._handleEscClose.bind(_this);
	    return _this;
	  }
	  /* eslint-disable max-len */
	
	
	  _createClass(DialogContainer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (!this.props.isOpen && !this.props.visible) {
	        return;
	      }
	
	      this._mountDialog(this.props);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var visible = typeof nextProps.isOpen !== 'undefined' ? nextProps.isOpen : nextProps.visible;
	      if (this.props.isOpen === visible || this.props.visible === visible) {
	        return;
	      }
	
	      var el = (0, _getField2.default)(this.props, this.context, 'renderNode') || window;
	      var pageX = el.scrollX,
	          pageY = el.scrollY;
	
	      if (typeof el.scrollTop !== 'undefined' && typeof el.scrollLeft !== 'undefined') {
	        pageX = el.scrollLeft;
	        pageY = el.scrollTop;
	      } else if (typeof el.scrollY !== 'undefined' && typeof el.scrollX !== 'undefined') {
	        pageX = el.scrollX;
	        pageY = el.scrollY;
	      }
	
	      this._pageX = pageX;
	      this._pageY = pageY;
	
	      if (visible) {
	        this._activeElement = document.activeElement;
	        this._mountPortal(nextProps);
	      } else {
	        this.setState({ dialogVisible: false, active: false });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      var _props = this.props,
	          visible = _props.visible,
	          closeOnEsc = _props.closeOnEsc,
	          modal = _props.modal;
	
	      var escapable = !modal && closeOnEsc;
	      var prevEscapable = !prevProps.modal && prevProps.closeOnEsc;
	
	      // Only going to support visible here since it was not implemented before.
	      if (visible === prevProps.visible && escapable === prevEscapable) {
	        return;
	      }
	
	      var add = false;
	      var remove = false;
	
	      if (escapable !== prevEscapable) {
	        add = visible && escapable;
	        remove = !visible || prevEscapable && !escapable;
	      } else if (escapable) {
	        add = visible;
	        remove = !visible;
	      }
	
	      if (add) {
	        window.addEventListener('keydown', this._handleEscClose);
	      } else if (remove) {
	        window.removeEventListener('keydown', this._handleEscClose);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.props.isOpen || this.props.visible) {
	        (0, _toggleScroll2.default)(false);
	      }
	
	      if (this.props.visible && this.props.closeOnEsc && !this.props.modal) {
	        window.removeEventListener('keydown', this._handleEscClose);
	      }
	
	      if (this._inTimeout) {
	        clearTimeout(this._inTimeout);
	      }
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      if (container !== null) {
	        this._container = (0, _reactDom.findDOMNode)(container);
	      }
	    }
	  }, {
	    key: '_handleEscClose',
	    value: function _handleEscClose(e) {
	      if ((e.which || e.keyCode) === _keyCodes.ESC) {
	        (this.props.onHide || this.props.close)(e);
	      }
	    }
	  }, {
	    key: '_mountPortal',
	    value: function _mountPortal(props) {
	      this._mountDialog(props);
	      this.setState({ portalVisible: true });
	    }
	  }, {
	    key: '_mountDialog',
	    value: function _mountDialog(props) {
	      var _this2 = this;
	
	      var fullPage = props.fullPage,
	          onShow = props.onShow;
	
	      this._inTimeout = setTimeout(function () {
	        _this2._inTimeout = fullPage ? null : setTimeout(function () {
	          _this2._inTimeout = null;
	          _this2.setState({ active: true });
	        }, _CSSTransitionGroupTick2.default);
	        _this2.setState({ dialogVisible: true, overlay: !fullPage }, onShow);
	      }, _CSSTransitionGroupTick2.default);
	    }
	  }, {
	    key: '_unmountPortal',
	    value: function _unmountPortal() {
	      this.setState({ portalVisible: false });
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      var visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : this.props.visible;
	      if (this.props.modal || !visible || e.target !== this._container) {
	        return;
	      }
	
	      (this.props.onHide || this.props.close)(e);
	    }
	  }, {
	    key: '_handleDialogMounting',
	    value: function _handleDialogMounting(dialog) {
	      var disableScrollLocking = this.props.disableScrollLocking;
	
	      if (dialog === null) {
	        if (this._activeElement) {
	          this._activeElement.focus();
	        }
	
	        if (!disableScrollLocking) {
	          (0, _toggleScroll2.default)(false, this.scrollEl);
	        }
	
	        this._activeElement = null;
	        this.setState({ overlay: false });
	      } else {
	        var container = document.querySelector('#' + this.props.id);
	        if (!container || disableScrollLocking) {
	          return;
	        }
	
	        var el = (0, _getField2.default)(this.props, this.context, 'renderNode');
	        var node = container.parentNode;
	        while (node && node.classList && !el) {
	          if (node.classList.contains('md-dialog')) {
	            el = node;
	          }
	
	          node = node.parentNode;
	        }
	
	        this.scrollEl = el;
	        (0, _toggleScroll2.default)(true, el);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          overlay = _state.overlay,
	          active = _state.active,
	          dialogVisible = _state.dialogVisible,
	          portalVisible = _state.portalVisible;
	
	      var _props2 = this.props,
	          style = _props2.style,
	          className = _props2.className,
	          dialogStyle = _props2.dialogStyle,
	          dialogClassName = _props2.dialogClassName,
	          modal = _props2.modal,
	          fullPage = _props2.fullPage,
	          component = _props2.component,
	          transitionEnterTimeout = _props2.transitionEnterTimeout,
	          transitionLeaveTimeout = _props2.transitionLeaveTimeout,
	          lastChild = _props2.lastChild,
	          props = _objectWithoutProperties(_props2, ['style', 'className', 'dialogStyle', 'dialogClassName', 'modal', 'fullPage', 'component', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'lastChild']);
	
	      delete props.renderNode;
	      delete props.close;
	      delete props.isOpen;
	      delete props.visible;
	      delete props.onShow;
	      delete props.onHide;
	      delete props.actionLeft;
	      delete props.actionRight;
	      delete props.transitionName;
	      delete props.transitionEnter;
	      delete props.transitionLeave;
	      delete props.closeOnEsc;
	      delete props.disableScrollLocking;
	      delete props.defaultVisibleTransitionable;
	
	      var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	
	      var dialog = _react2.default.createElement(_Dialog2.default, _extends({
	        key: 'dialog',
	        style: dialogStyle,
	        className: dialogClassName,
	        ref: this._handleDialogMounting,
	        fullPage: fullPage
	      }, props, {
	        containerX: this._pageX,
	        containerY: this._pageY,
	        onLeave: this._unmountPortal
	      }));
	
	      return _react2.default.createElement(
	        _Portal2.default,
	        { visible: portalVisible, renderNode: renderNode, lastChild: lastChild },
	        _react2.default.createElement(
	          _CSSTransitionGroup2.default,
	          {
	            component: component,
	            ref: this._setContainer,
	            style: style,
	            className: (0, _classnames2.default)('md-dialog-container', {
	              'md-overlay': !fullPage && overlay,
	              'md-pointer--hover': !fullPage && overlay && !modal,
	              'md-overlay--active': !fullPage && active && overlay
	            }, className),
	            transitionName: 'md-dialog--' + (fullPage ? 'full-page' : 'centered'),
	            transitionEnterTimeout: transitionEnterTimeout,
	            transitionLeaveTimeout: transitionLeaveTimeout,
	            onClick: this._handleClick
	          },
	          dialogVisible ? dialog : null
	        )
	      );
	    }
	  }]);
	
	  return DialogContainer;
	}(_react.PureComponent);
	
	DialogContainer.propTypes = {
	  /**
	   * An id to use for the `Dialog` once it has been opened. This is used for the
	   * [dialog role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role).
	   * This is used to generate an `id` for the `title` prop when it has been defined.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	  /* eslint-enable max-len */
	
	  /**
	   * An optional accessibility prop to use when the `Dialog` is opened. This should be an id
	   * pointing to some text that describes the content of the dialog. For accessibility
	   * reasons, one of the following props must be defined:
	   * - `title`
	   * - `aria-describedby`
	   * - `aria-labelledby`
	   * - `aria-label`
	   *
	   * An example usage:
	   *
	   * ```js
	   * <Dialog id="accessibleExample" visible aria-describedby="accessibleContent">
	   *   <p id="accessibleContent">This is some content that describes the dialog.</p>
	   * </Dialog>
	   * ```
	   */
	  'aria-describedby': (0, _oneRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'title', 'aria-labelledby', 'aria-label'),
	
	  /**
	   * An optional accessibility prop to use when the `title` prop is not given. This should be
	   * an id pointing to a `h` tag that labels the dialog.
	   *
	   * An example usage:
	   *
	   * ```js
	   * <Dialog visible id="accessibleExample" aria-labelledby="accessibleDialogLabel">
	   *   <h2 id="accessibleDialogLabel">Some Accessible Dialog</h2>
	   * </Dialog>
	   * ```
	   */
	  'aria-labelledby': _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional accessibility prop to use when the `title` and `aria-labelledby` props are
	   * not defined. This should be a string that describes what is in the `Dialog`.
	   *
	   * An example usage:
	   *
	   * ```js
	   * <Dialog visible id="accessibleExample" aria-label="Some Accessible Dialog">
	   *   <p>Lorem Ipsum</p>
	   * </Dialog>
	   * ```
	   */
	  'aria-label': _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the dialog's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the dialog's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the dialog itself when the `visible` prop is `true`.
	   */
	  dialogStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the dialog itself when the `visible` prop is `true`.
	   */
	  dialogClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the dialog's content.
	   */
	  contentStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the dialog's content.
	   */
	  contentClassName: _propTypes2.default.string,
	
	  /**
	   * The component to render the dialog's container in.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * The component to render the dialog's content in.
	   */
	  contentComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * The content to display in the dialog once open.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * A single action or a list of actions to display in the dialog. This can either be a list
	   * of `FlatButton` props or `<Button flat {...props} />` elements.
	   */
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]))]),
	
	  /**
	   * Bolean if the `Dialog` is current visible.
	   */
	  visible: _propTypes2.default.bool.isRequired,
	
	  /**
	   * An optional function to call when the `visible` prop is changed from `false` to `true`.
	   */
	  onShow: _propTypes2.default.func,
	
	  /**
	   * A function to call that will close the dialog. This is required when the `modal` and `fullPage`
	   * props are not `true`.
	   */
	  onHide: function onHide(props, propName) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    var validator = _propTypes2.default.func;
	    if (!props.modal && !props.fullPage) {
	      validator = validator.isRequired;
	    }
	
	    return validator.apply(undefined, [props, propName].concat(args));
	  },
	
	  /**
	   * Boolean if the dialog should behave like a modal. This means that the dialog can only
	   * be closed by clicking on an action instead of also clicking on the overlay.
	   */
	  modal: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the dialog should be displayed as a full page dialog.
	   */
	  fullPage: function fullPage(props, propName, componentName) {
	    for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      args[_key2 - 3] = arguments[_key2];
	    }
	
	    if (typeof props[propName] === 'undefined') {
	      return null;
	    }
	    var componentNameSafe = componentName || '<<anonymous>>';
	
	    var err = _propTypes2.default.bool.apply(_propTypes2.default, [props, propName, componentName].concat(args));
	
	    if (!err && typeof props.title !== 'undefined') {
	      err = new Error('You provided a `title` ' + location + ' to the `' + componentNameSafe + '` when `fullPage` ' + 'has been set to true. A title for a full page dialog should be rendered as a child instead.');
	    }
	
	    return err;
	  },
	
	  /**
	   * An optional pageX location to use when rendering a full page dialog. This is used to set the location
	   * the dialog should appear from.
	   */
	  pageX: _propTypes2.default.number,
	
	  /**
	   * An optional pageY location to use when rendering a full page dialog. This is used to set the location
	   * the dialog should appear from.
	   */
	  pageY: _propTypes2.default.number,
	
	  /**
	   * Boolean if the dialog should focus one of children once it has mounted.
	   */
	  focusOnMount: _propTypes2.default.bool.isRequired,
	
	  /**
	   * The transition enter timeout for the dialog.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The transition leave timeout for the dialog.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the dialog should be closeable by pressing the escape key.
	   * This will always be considered `false` of the `modal` props is `true`.
	   */
	  closeOnEsc: _propTypes2.default.bool,
	
	  /**
	   * Since the `Dialog` uses the `Portal` component, you can pass an optional HTML Node to render
	   * the dialog in instead of the `document.body`.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the dialog should be rendered as the last child in the `renderNode` or `body` instead
	   * of as the first.
	   */
	  lastChild: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the dialog should animate into view if it is constructed with `visible` enabled.
	   *
	   * This basically means that if the `Dialog` has `visible` enabled on initial page load, does it animate?
	   * In some cases, it can also mean if the `Dialog` is added to the render tree with `visible` enabled,
	   * does it animate?
	   */
	  defaultVisibleTransitionable: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the Dialog should no longer try to prevent the parent container from scrolling while visible.
	   * In most cases, this will attempt to prevent the main window scrolling. If this dialog is nested in another
	   * dialog, it will attempt to prevent the parent dialog from scrolling.
	   */
	  disableScrollLocking: _propTypes2.default.bool,
	
	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  transitionName: (0, _deprecated2.default)(_propTypes2.default.string, 'The transition name will be managed by the component'),
	  transitionEnter: (0, _deprecated2.default)(_propTypes2.default.bool, 'The transition will always be enforced'),
	  transitionLeave: (0, _deprecated2.default)(_propTypes2.default.bool, 'The transition will always be enforced'),
	  actionLeft: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `fullPage` prop instead'),
	  actionRight: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `fullPage` prop instead'),
	  close: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onHide` instead.')
	};
	DialogContainer.defaultProps = {
	  component: 'span',
	  closeOnEsc: true,
	  contentComponent: 'section',
	  focusOnMount: true,
	  transitionEnterTimeout: 300,
	  transitionLeaveTimeout: 300,
	  defaultVisibleTransitionable: false
	};
	DialogContainer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};
	exports.default = DialogContainer;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The divider component will pass all other props such as style or
	 * event listeners on to the component.
	 */
	var Divider = function (_PureComponent) {
	  _inherits(Divider, _PureComponent);
	
	  function Divider() {
	    _classCallCheck(this, Divider);
	
	    return _possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).apply(this, arguments));
	  }
	
	  _createClass(Divider, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          inset = _props.inset,
	          vertical = _props.vertical,
	          props = _objectWithoutProperties(_props, ['className', 'inset', 'vertical']);
	
	      var Component = vertical ? 'div' : 'hr';
	
	      return _react2.default.createElement(Component, _extends({}, props, {
	        className: (0, _classnames2.default)('md-divider', {
	          'md-divider--vertical': vertical,
	          'md-divider--inset': inset
	        }, className)
	      }));
	    }
	  }]);
	
	  return Divider;
	}(_react.PureComponent);
	
	Divider.propTypes = {
	  /*
	   * An optional style to apply to the divider.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the divider.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if this divider should be inset relative to it's container
	   * component. This means that if it is in a `List` with `Avatar`, it
	   * will start the divider  to the left of the main text in the list.
	   */
	  inset: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the divider should be vertical instead of horizontal.
	   */
	  vertical: _propTypes2.default.bool
	};
	exports.default = Divider;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _media = __webpack_require__(114);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _mapToListParts = __webpack_require__(127);
	
	var _mapToListParts2 = _interopRequireDefault(_mapToListParts);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _Portal = __webpack_require__(27);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	var _List = __webpack_require__(28);
	
	var _List2 = _interopRequireDefault(_List);
	
	var _isType = __webpack_require__(94);
	
	var _DrawerTypes = __webpack_require__(93);
	
	var _DrawerTypes2 = _interopRequireDefault(_DrawerTypes);
	
	var _Overlay = __webpack_require__(184);
	
	var _Overlay2 = _interopRequireDefault(_Overlay);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var oneOfDrawerTypes = _propTypes2.default.oneOf([_DrawerTypes2.default.FULL_HEIGHT, _DrawerTypes2.default.CLIPPED, _DrawerTypes2.default.FLOATING, _DrawerTypes2.default.PERSISTENT, _DrawerTypes2.default.PERSISTENT_MINI, _DrawerTypes2.default.TEMPORARY, _DrawerTypes2.default.TEMPORARY_MINI]);
	
	/**
	 * The `Drawer` component is used for having a sliding panel of content or navigation
	 * that appears from the side of a screen.
	 *
	 * If the `Drawer` uses any of the `_MINI` drawer types, you will need to also create another
	 * `Drawer` that is not `_MINI`. Transitioning the `width` on mobile devices is very sluggish,
	 * and it isn't much more work to create another drawer.
	 */
	
	var Drawer = function (_PureComponent) {
	  _inherits(Drawer, _PureComponent);
	
	  _createClass(Drawer, null, [{
	    key: 'getCurrentMedia',
	
	
	    /**
	     * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,
	     * and the current drawer type. This expects a `props` object of the drawer.
	     *
	     * If this is used server side, it will default to only matching mobile.
	     *
	     * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet, and desktop type/min
	     *    widths. This defaults to the drawer's default props.
	     * @return {Object} an object containing the media matches and the current type to use for the drawer.
	     */
	    value: function getCurrentMedia() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Drawer.defaultProps;
	      var mobileMinWidth = props.mobileMinWidth,
	          tabletMinWidth = props.tabletMinWidth,
	          desktopMinWidth = props.desktopMinWidth,
	          mobileType = props.mobileType,
	          tabletType = props.tabletType,
	          desktopType = props.desktopType,
	          constantType = props.constantType;
	
	      if (typeof window === 'undefined') {
	        var _type = constantType && props.type ? props.type : mobileType;
	        return { mobile: true, tablet: false, desktop: false, type: _type };
	      }
	
	      var mobile = Drawer.matchesMedia(mobileMinWidth, tabletMinWidth - 1);
	      var tablet = Drawer.matchesMedia(tabletMinWidth, desktopMinWidth);
	      var desktop = Drawer.matchesMedia(desktopMinWidth);
	
	      var type = void 0;
	      if (constantType && props.type && (0, _isType.isTemporary)(props.type)) {
	        type = props.type;
	      } else if (desktop) {
	        type = desktopType;
	      } else if (tablet) {
	        type = tabletType;
	      } else {
	        type = mobileType;
	      }
	
	      return { type: type, mobile: mobile, tablet: tablet, desktop: desktop };
	    }
	
	    /**
	     * Simply does a `window.matchMedia(query)` where the query gets defined as a min width
	     * and optional max width.
	     *
	     * @param {Number} min - The min width for the media query.
	     * @param {Number=} max - An optional max width to include for the media query.
	     * @return true if the media matches.
	     */
	
	  }, {
	    key: 'matchesMedia',
	    value: function matchesMedia(min, max) {
	      var media = 'screen and (min-width: ' + min + 'px)';
	      if (max) {
	        media += ' and (max-width: ' + max + 'px)';
	      }
	
	      return window.matchMedia(media).matches;
	    }
	  }]);
	
	  function Drawer(props) {
	    _classCallCheck(this, Drawer);
	
	    var _this = _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this, props));
	
	    var defaultVisible = props.defaultVisible,
	        defaultMedia = props.defaultMedia,
	        overlay = props.overlay;
	
	
	    _this.state = {
	      mobile: defaultMedia === 'mobile',
	      tablet: defaultMedia === 'tablet',
	      desktop: defaultMedia === 'desktop',
	      animating: false,
	      overlayActive: false,
	      drawerActive: false
	    };
	
	    if (typeof props.type === 'undefined') {
	      _this.state.type = props[defaultMedia + 'Type'];
	    }
	
	    var type = (0, _getField2.default)(props, _this.state, 'type');
	    _this._initialFix = true;
	
	    if (typeof props.visible === 'undefined') {
	      _this.state.visible = typeof defaultVisible !== 'undefined' ? defaultVisible : (0, _isType.isPermanent)(type);
	    }
	
	    var visible = (0, _getField2.default)(props, _this.state, 'visible');
	
	    _this.state.overlayActive = (typeof overlay !== 'undefined' ? overlay : (0, _isType.isTemporary)(type) && !_this.state.desktop) && visible;
	    _this.state.drawerActive = visible;
	
	    _this._animate = _this._animate.bind(_this);
	    _this._closeDrawer = _this._closeDrawer.bind(_this);
	    _this._setNavigation = _this._setNavigation.bind(_this);
	    _this._handleNavClick = _this._handleNavClick.bind(_this);
	    _this._updateType = _this._updateType.bind(_this);
	    _this._updateMedia = _this._updateMedia.bind(_this);
	    return _this;
	  }
	
	  _createClass(Drawer, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      if (typeof window !== 'undefined') {
	        this._updateType(this.props);
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      window.addEventListener('resize', this._updateMedia);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _props = this.props,
	          mobileMinWidth = _props.mobileMinWidth,
	          mobileType = _props.mobileType,
	          tabletMinWidth = _props.tabletMinWidth,
	          tabletType = _props.tabletType,
	          desktopMinWidth = _props.desktopMinWidth,
	          desktopType = _props.desktopType;
	
	
	      if (nextProps.mobileMinWidth !== mobileMinWidth || nextProps.mobileType !== mobileType || nextProps.tabletMinWidth !== tabletMinWidth || nextProps.tabletType !== tabletType || nextProps.desktopMinWidth !== desktopMinWidth || nextProps.desktopType !== desktopType) {
	        this._updateType(nextProps);
	      }
	
	      var visible = nextProps.visible,
	          transitionDuration = nextProps.transitionDuration,
	          overlay = nextProps.overlay;
	
	      if (this.props.visible === nextProps.visible) {
	        return;
	      }
	
	      var type = (0, _getField2.default)(nextProps, this.state, 'type');
	      this._animate(visible, type, transitionDuration, overlay, this.state.desktop);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var visible = nextState.visible;
	
	      if (typeof nextProps.visible !== 'undefined' || this.state.visible === visible) {
	        return;
	      }
	      var type = (0, _getField2.default)(nextProps, nextState, 'type');
	      this._animate(visible, type, nextProps.transitionDuration, nextProps.overlay, nextState.desktop);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	
	      if (this._closeTimeout) {
	        clearTimeout(this._closeTimeout);
	      }
	
	      window.removeEventListener('resize', this._updateMedia);
	    }
	  }, {
	    key: '_updateType',
	    value: function _updateType(props) {
	      var onMediaTypeChange = props.onMediaTypeChange,
	          onVisibilityToggle = props.onVisibilityToggle,
	          overlay = props.overlay;
	
	
	      var state = Drawer.getCurrentMedia(props);
	      var diffType = (0, _getField2.default)(props, this.state, 'type') !== state.type;
	      var diffMedia = state.mobile !== this.state.mobile || state.tablet !== this.state.tablet || state.desktop !== this.state.desktop;
	
	      if (onMediaTypeChange && (diffType || diffMedia)) {
	        onMediaTypeChange(state.type, { mobile: state.mobile, tablet: state.tablet, desktop: state.desktop });
	      }
	
	      if (diffType) {
	        var visible = (0, _isType.isPermanent)(state.type);
	        if (this._initialFix) {
	          if (props.defaultVisible) {
	            visible = props.defaultVisible;
	          } else if (props.visible) {
	            visible = props.visible;
	          }
	        }
	
	        var prevVisible = (0, _getField2.default)(props, this.state, 'visible');
	        if (onVisibilityToggle && visible !== prevVisible) {
	          onVisibilityToggle(visible);
	        }
	
	        if (typeof props.visible === 'undefined') {
	          state.visible = visible;
	        }
	      } else if (this._initialFix && diffMedia) {
	        state.overlayActive = (typeof overlay !== 'undefined' ? overlay : (0, _isType.isTemporary)(state.type) && !state.desktop) && (0, _getField2.default)(props, this.state, 'visible');
	      }
	
	      if (typeof props.type !== 'undefined') {
	        delete state.type;
	      }
	
	      this._initialFix = false;
	      this.setState(state);
	    }
	  }, {
	    key: '_updateMedia',
	    value: function _updateMedia() {
	      this._updateType(this.props);
	    }
	  }, {
	    key: '_animate',
	    value: function _animate(visible, type, timeout, overlay, desktop) {
	      var _this2 = this;
	
	      if (visible) {
	        this.timeout = setTimeout(function () {
	          _this2.timeout = null;
	
	          _this2.setState({
	            overlayActive: overlay || (0, _isType.isTemporary)(type) && !desktop,
	            drawerActive: true,
	            animating: true
	          });
	        }, _CSSTransitionGroupTick2.default);
	      } else {
	        this._timeout = setTimeout(function () {
	          _this2._timeout = null;
	
	          _this2.setState({ animating: false });
	        }, timeout);
	        this.setState({ animating: true, overlayActive: false, drawerActive: false });
	      }
	    }
	  }, {
	    key: '_setNavigation',
	    value: function _setNavigation(navigation) {
	      this._navigation = (0, _reactDom.findDOMNode)(navigation);
	    }
	  }, {
	    key: '_handleNavClick',
	    value: function _handleNavClick(e) {
	      var _this3 = this;
	
	      if (!this.props.closeOnNavItemClick || !(0, _isType.isTemporary)((0, _getField2.default)(this.props, this.state, 'type'))) {
	        return;
	      }
	
	      var target = e.target;
	
	      while (target && this._navigation.contains(target)) {
	        if (target.classList.contains('md-list-tile')) {
	          // Clicked a nav item that has a nested list
	          if (target.getAttribute('aria-expanded') !== null) {
	            return;
	          }
	
	          this._closeTimeout = setTimeout(function () {
	            _this3._closeTimeout = null;
	
	            _this3._closeDrawer(e);
	          }, _CSSTransitionGroupTick2.default);
	          return;
	        }
	
	        target = target.parentNode;
	      }
	    }
	  }, {
	    key: '_closeDrawer',
	    value: function _closeDrawer() {
	      if (this.props.onVisibilityToggle) {
	        this.props.onVisibilityToggle(false);
	      }
	
	      if (typeof this.props.visible === 'undefined') {
	        this.setState({ visible: false });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _cn;
	
	      var _state = this.state,
	          overlayActive = _state.overlayActive,
	          drawerActive = _state.drawerActive,
	          animating = _state.animating;
	
	      var _props2 = this.props,
	          style = _props2.style,
	          className = _props2.className,
	          navStyle = _props2.navStyle,
	          navClassName = _props2.navClassName,
	          component = _props2.component,
	          navItems = _props2.navItems,
	          header = _props2.header,
	          children = _props2.children,
	          inline = _props2.inline,
	          position = _props2.position,
	          overlay = _props2.overlay,
	          autoclose = _props2.autoclose,
	          clickableDesktopOverlay = _props2.clickableDesktopOverlay,
	          lastChild = _props2.lastChild,
	          props = _objectWithoutProperties(_props2, ['style', 'className', 'navStyle', 'navClassName', 'component', 'navItems', 'header', 'children', 'inline', 'position', 'overlay', 'autoclose', 'clickableDesktopOverlay', 'lastChild']);
	
	      delete props.constantType;
	      delete props.renderNode;
	      delete props.visible;
	      delete props.defaultVisible;
	      delete props.type;
	      delete props.defaultMedia;
	      delete props.mobileType;
	      delete props.mobileMinWidth;
	      delete props.tabletType;
	      delete props.tabletMinWidth;
	      delete props.desktopType;
	      delete props.desktopMinWidth;
	      delete props.transitionDuration;
	      delete props.onVisibilityToggle;
	      delete props.onMediaTypeChange;
	      delete props.closeOnNavItemClick;
	
	      var desktop = this.state.desktop;
	
	      var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	      var visible = (0, _getField2.default)(this.props, this.state, 'visible');
	      var type = (0, _getField2.default)(this.props, this.state, 'type');
	      var mini = (0, _isType.isMini)(type);
	      var temporary = (0, _isType.isTemporary)(type);
	      var floating = _DrawerTypes2.default.FLOATING === type;
	      var permanent = (0, _isType.isPermanent)(type);
	
	      var Component = void 0;
	      if (component) {
	        Component = component;
	      } else if (navItems) {
	        Component = 'nav';
	      } else {
	        Component = 'aside';
	      }
	
	      var navigation = void 0;
	      if (navItems) {
	        navigation = _react2.default.createElement(
	          _List2.default,
	          {
	            ref: this._setNavigation,
	            key: 'navigation',
	            style: navStyle,
	            className: (0, _classnames2.default)('md-list--drawer', {
	              'md-toolbar-relative': mini && !visible,
	              'md-background': floating
	            }, navClassName),
	            onClick: autoclose ? this._handleNavClick : null
	          },
	          navItems.map(_mapToListParts2.default)
	        );
	      }
	      var zDepth = 1;
	      if (floating || inline) {
	        zDepth = 0;
	      } else if (temporary && visible) {
	        zDepth = 5;
	      }
	
	      var overlayVisible = (!desktop || clickableDesktopOverlay) && (overlay || temporary) && (animating || visible);
	
	      var drawer = _react2.default.createElement(
	        _Paper2.default,
	        _extends({}, props, {
	          key: 'drawer',
	          component: Component,
	          zDepth: zDepth,
	          raiseOnHover: false,
	          style: style,
	          className: (0, _classnames2.default)('md-drawer', (_cn = {}, _defineProperty(_cn, 'md-drawer--' + position, !inline), _defineProperty(_cn, 'md-drawer--fixed', !inline), _defineProperty(_cn, 'md-drawer--inline', inline), _defineProperty(_cn, 'md-drawer--active', mini || drawerActive), _defineProperty(_cn, 'md-drawer--mini', mini), _defineProperty(_cn, 'md-transition--decceleration', visible), _defineProperty(_cn, 'md-transition--acceleration', !visible), _defineProperty(_cn, 'md-background', inline || floating), _defineProperty(_cn, 'md-background--card', !floating && !inline), _cn), className)
	        }),
	        header,
	        navigation,
	        children,
	        _react2.default.createElement(_Overlay2.default, {
	          active: overlayActive,
	          visible: overlayVisible,
	          onClick: this._closeDrawer,
	          renderNode: renderNode
	        })
	      );
	
	      if (inline || permanent) {
	        return drawer;
	      }
	
	      return _react2.default.createElement(
	        _Portal2.default,
	        { visible: mini || animating || visible, renderNode: renderNode, lastChild: lastChild },
	        drawer
	      );
	    }
	  }]);
	
	  return Drawer;
	}(_react.PureComponent);
	
	Drawer.DrawerTypes = _DrawerTypes2.default;
	Drawer.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the `List` surrounding the `navItems`.
	   */
	  navStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `List` surrounding the `navItems`.
	   */
	  navClassName: _propTypes2.default.string,
	
	  /**
	   * An optional component to render the drawer in. When this prop is undefined, the drawer
	   * will be rendered as a `nav` if the `navItems` prop is defined, otherwise an `aside`.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.element]),
	
	  /**
	   * An optional list of navigation items to display in the drawer. This list can either contain
	   * a valid child component for a `List` or an object used to create a `Divider`, `Subheader`,
	   * or `ListItem`.
	   *
	   * - To create a divider in the list, set a `divider` key to `true`. Any other keys will be
	   * passed to the `Divider` component.
	   * - To create a subheader in the list, set the `subheader` key to `true`. Any other keys will
	   * be passed to the `Subheader` component.
	   * - To create a list item, just create an object with any normal `ListItem` props.
	   */
	  navItems: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.shape({
	    divider: _propTypes2.default.bool,
	    subheader: _propTypes2.default.bool,
	    primaryText: _propTypes2.default.node
	  })])),
	
	  /**
	   * Boolean if a temporary drawer should close when a nav item is clicked.
	   */
	  autoclose: _propTypes2.default.bool,
	
	  /**
	   * An optional header to display. This _should_ normally be a toolbar.
	   */
	  header: _propTypes2.default.node,
	
	  /**
	   * Any additional children to display after the `header` and `navItems`.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The drawer type to use when the current device matches the mobile
	   * media query.
	   */
	  mobileType: _propTypes2.default.oneOf([Drawer.DrawerTypes.TEMPORARY, Drawer.DrawerTypes.TEMPORARY_MINI]).isRequired,
	
	  /**
	   * The min-width to use for the mobile media query.
	   */
	  mobileMinWidth: _propTypes2.default.number.isRequired,
	
	  /**
	   * The drawer type to use when the current device matches the tablet
	   * media query.
	   */
	  tabletType: oneOfDrawerTypes.isRequired,
	
	  /**
	   * The min-width to use for the tablet media query.
	   */
	  tabletMinWidth: _propTypes2.default.number.isRequired,
	
	  /**
	   * The drawer type to use when the current device matches the desktop media
	   * query.
	   */
	  desktopType: oneOfDrawerTypes.isRequired,
	
	  /**
	   * The min-width for a desktop screen.
	   */
	  desktopMinWidth: _propTypes2.default.number.isRequired,
	
	  /**
	   * An optional type to enforce across all media sizes. Since `mobile` devices are
	   * included, you are required to manually specify when the `type` should be `temporary`.
	   *
	   * When the `type` is not one of the `temporary` types, the `onMediaTypeChange` prop
	   * must be provided.
	   */
	  type: function type(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    var type = props[propName];
	    if ((0, _isType.isTemporary)(type)) {
	      return oneOfDrawerTypes.apply(undefined, [props, propName, component].concat(others));
	    }
	
	    var err = oneOfDrawerTypes.apply(undefined, [props, propName, component].concat(others));
	    if (!err && typeof type !== 'undefined' && !(0, _isType.isMini)(type) && typeof props.onMediaTypeChange === 'undefined') {
	      err = new Error('You provided a `' + propName + '` prop to the ' + component + ' without the `onMediaTypeChange` ' + ('handler. The `onMediaTypeChange` prop must be specified when the `' + propName + '` is not ') + 'one of the `temporary` types.');
	    }
	
	    return err;
	  },
	
	  /**
	   * An optional function to call when the drawer's type changes when the screen resizes.
	   * The callback will include the new `type` that should be used for the screen size,
	   * and an object containing the media matches for `mobile`, `tablet`, and `desktop`.
	   *
	   * ```js
	   * this.props.onMediaTypeChange(Drawer.DrawerTypes.TEMPORARY, {
	   *   mobile: true,
	   *   tablet: false,
	   *   desktop: false,
	   * });
	   * ```
	   */
	  onMediaTypeChange: _propTypes2.default.func,
	
	  /**
	   * The default drawer type to display on initial render. The drawer will automatically
	   * adjust itself to the correct media once it has mounted. This prop is really only useful
	   * for server side rendering.
	   */
	  defaultMedia: _propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']).isRequired,
	
	  /**
	   * Boolean if there should be a visible overlay when the drawer is visible. The default behavior
	   * is to only include a visible overlay when the `type` is `TEMPORARY` or `TEMPORARY_MINI` and
	   * the device is not a desktop.
	   */
	  overlay: _propTypes2.default.bool,
	
	  /**
	   * An optional DOM Node to render the drawer into. The default is to render as
	   * the first child in the `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the drawer should be rendered as the last child instead of the first child
	   * in the `renderNode` or `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  lastChild: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the drawer is visible by default. If this is omitted, the drawer will be visible
	   * if the current drawer type is NOT `Drawer.DrawerTypes.TEMPORARY` or `Drawer.DrawerTypes.TEMPORARY_MINI`.
	   *
	   * This basically means that if you are using the default configuration, a mobile device's drawer
	   * will be hidden while tablets and desktops will be visible.
	   */
	  defaultVisible: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the drawer is visible. This will force the component to define the `onVisibilityToggle`
	   * prop as well as manually updating the drawer's visibility.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityToggle', 'defaultVisible'),
	
	  /**
	   * An optional function to call when the visibility of the drawer is changed. The function will
	   * be called with the new visibility state.
	   *
	   * ```js
	   * onVisibilityToggle(!currentlyVisible);
	   * ```
	   */
	  onVisibilityToggle: _propTypes2.default.func,
	
	  /**
	   * The drawer's position on the page when it is not `inline`. When the drawer's position is `left`,
	   * the width will be `calc(100vw - 56px)` on mobile devices and `$md-drawer-desktop-width` on desktops.
	   *
	   * When the position is `right`, the width will be `100vw` for mobile devices and scaling to the drawer's
	   * children width on desktops.
	   */
	  position: _propTypes2.default.oneOf(['left', 'right']).isRequired,
	
	  /**
	   * Boolean if the drawer should be displayed inline instead of fixed to the page. When this prop
	   * is enabled, the `position` prop will not be used.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * The `$md-drawer-transition-time` value from sass.
	   */
	  transitionDuration: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the temporary drawer's overlay should be created on desktop screens. This is really used so that
	   * the drawer will close when a user clicks anywhere on the page except in the drawer.
	   */
	  clickableDesktopOverlay: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the navigation drawer should automatically close when a nav item has been clicked.
	   */
	  closeOnNavItemClick: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `type` prop should be constant across all media sizes. This is only valid if the `type` is
	   * one of the temporary types.
	   *
	   * This will basically mean that when attempting to do a media adjustment, it will use the `type` prop instead of
	   * `mobileType`, `tabletType`, and `desktopType` to determine the next drawer type.
	   */
	  constantType: _propTypes2.default.bool.isRequired
	};
	Drawer.defaultProps = {
	  defaultMedia: 'mobile',
	  mobileType: Drawer.DrawerTypes.TEMPORARY,
	  mobileMinWidth: _media.MOBILE_MIN_WIDTH,
	  tabletType: Drawer.DrawerTypes.PERSISTENT,
	  tabletMinWidth: _media.TABLET_MIN_WIDTH,
	  desktopType: Drawer.DrawerTypes.FULL_HEIGHT,
	  desktopMinWidth: _media.DESKTOP_MIN_WIDTH,
	  position: 'left',
	  transitionDuration: 300,
	  autoclose: true,
	  clickableDesktopOverlay: true,
	  closeOnNavItemClick: true,
	  constantType: true
	};
	Drawer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};
	exports.default = Drawer;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Collapser = function (_PureComponent) {
	  _inherits(Collapser, _PureComponent);
	
	  function Collapser(props) {
	    _classCallCheck(this, Collapser);
	
	    var _this = _possibleConstructorReturn(this, (Collapser.__proto__ || Object.getPrototypeOf(Collapser)).call(this, props));
	
	    _this.state = {};
	    return _this;
	  }
	
	  _createClass(Collapser, [{
	    key: 'render',
	    value: function render() {
	      var _cn;
	
	      var _props = this.props,
	          className = _props.className,
	          flipped = _props.flipped,
	          suffix = _props.suffix,
	          suffixFlipped = _props.suffixFlipped,
	          props = _objectWithoutProperties(_props, ['className', 'flipped', 'suffix', 'suffixFlipped']);
	
	      return _react2.default.createElement(_FontIcon2.default, _extends({
	        key: 'collapser'
	      }, props, {
	        className: (0, _classnames2.default)('md-collapser', (_cn = {
	          'md-collapser--flipped': flipped && (!suffixFlipped || !suffix)
	        }, _defineProperty(_cn, 'md-collapser--' + suffix, suffix), _defineProperty(_cn, 'md-collapser--' + suffix + '-flipped', suffix && flipped && suffixFlipped), _cn), className)
	      }));
	    }
	  }]);
	
	  return Collapser;
	}(_react.PureComponent);
	
	Collapser.propTypes = {
	  className: _propTypes2.default.string,
	  iconClassName: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  flipped: _propTypes2.default.bool,
	  suffix: _propTypes2.default.string,
	  suffixFlipped: _propTypes2.default.bool
	};
	Collapser.defaultProps = {
	  children: 'keyboard_arrow_down'
	};
	exports.default = Collapser;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _InkContainer = __webpack_require__(196);
	
	var _InkContainer2 = _interopRequireDefault(_InkContainer);
	
	var _getDisplayName = __webpack_require__(123);
	
	var _getDisplayName2 = _interopRequireDefault(_getDisplayName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Takes any component and injects an ink container for having the Material Design Ink effect.
	 *
	 * The default triggers for an ink are:
	 * - mouse down event
	 * - touch start event
	 * - keyboard focus
	 * - form submit
	 *
	 * The form submit ink will only be triggered if the `ComposedComponent` has the attribute
	 * `type="submit"`, the `ComposedComponent` is in a form, and the user hits the `enter` key
	 * while not actively focusing the `ComposedComponent`.
	 *
	 * ```js
	 * @param {function} ComposedComponent - The React Component to inject an `ink` prop into.
	 * @return {function} a new React class rendering the `ComposedComponent` and adding an
	 *    `ink` pop.
	 * ```
	 */
	exports.default = function (ComposedComponent) {
	  var _class, _temp;
	
	  return _temp = _class = function (_PureComponent) {
	    _inherits(InkedComponent, _PureComponent);
	
	    function InkedComponent(props, context) {
	      _classCallCheck(this, InkedComponent);
	
	      var _this = _possibleConstructorReturn(this, (InkedComponent.__proto__ || Object.getPrototypeOf(InkedComponent)).call(this, props, context));
	
	      _this.focus = _this.focus.bind(_this);
	      _this.createInk = _this.createInk.bind(_this);
	      _this.getComposedComponent = _this.getComposedComponent.bind(_this);
	      _this._setInkRef = _this._setInkRef.bind(_this);
	      _this._setComposedComponent = _this._setComposedComponent.bind(_this);
	      return _this;
	    }
	
	    _createClass(InkedComponent, [{
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        var ref = this.props.__SUPER_SECRET_REF__;
	        // Emulate the ref callback...
	
	        if (ref) {
	          ref(this);
	        }
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        var ref = this.props.__SUPER_SECRET_REF__;
	        // Emulate the ref callback...
	
	        if (ref) {
	          ref(null);
	        }
	      }
	
	      /**
	       * A publically accessible way to manually create an ink. This can be used with the `refs`.
	       * The ink can either be created by using the `pageX` and `pageY` from a click/touch event
	       * or it will be created in the center of the `ComposedComponent`.
	       *
	       * ```js
	       * <SomeInkedComponent ref={inkHOC => inkHOC.createInk()} />
	       * ```
	       *
	       * @param {number=} pageX - An optional pageX of the click or touch event.
	       * @param {number=} pageY - An optional pageY of the click or touch event.
	       */
	
	    }, {
	      key: 'createInk',
	      value: function createInk(pageX, pageY) {
	        if (this._inkContainer && !this.props.disabled && !this.props.inkDisabled) {
	          this._inkContainer.createInk(pageX, pageY);
	        }
	      }
	
	      /**
	       * This will attempt to focus the composed component. If the component is disabled, nothing
	       * will happen. If the `disabled` and `inkDisabled` props are not set to `true`, an ink will
	       * also be created.
	       *
	       * ```js
	       * <SomeInkedComponent ref={inkHOC => inkHOC.focus()} />
	       * ```
	       */
	
	    }, {
	      key: 'focus',
	      value: function focus() {
	        if (this._inkContainer) {
	          this._inkContainer.focus();
	        }
	      }
	
	      /**
	       * Gets the composed component as a ref. This is usefull if you need to access the ref of the
	       * composed component instead of the `injectInk` HOC to use some publically accessible methods.
	       *
	       * ```js
	       * <SomeInkedComponent
	       *   ref={inkHOC => {
	       *     inkHOC.getComposedComponent().focus();
	       *   }}
	       * />
	       * ```
	       */
	
	    }, {
	      key: 'getComposedComponent',
	      value: function getComposedComponent() {
	        return this._composed;
	      }
	    }, {
	      key: '_setInkRef',
	      value: function _setInkRef(inkContainer) {
	        if (inkContainer) {
	          this._inkContainer = inkContainer;
	        }
	      }
	    }, {
	      key: '_setComposedComponent',
	      value: function _setComposedComponent(component) {
	        this._composed = component;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _props = this.props,
	            inkDisabled = _props.inkDisabled,
	            transitionOverlap = _props.inkTransitionOverlap,
	            transitionEnterTimeout = _props.inkTransitionEnterTimeout,
	            transitionLeaveTimeout = _props.inkTransitionLeaveTimeout,
	            inkStyle = _props.inkStyle,
	            inkClassName = _props.inkClassName,
	            inkContainerStyle = _props.inkContainerStyle,
	            inkContainerClassName = _props.inkContainerClassName,
	            disabledInteractions = _props.disabledInteractions,
	            waitForInkTransition = _props.waitForInkTransition,
	            props = _objectWithoutProperties(_props, ['inkDisabled', 'inkTransitionOverlap', 'inkTransitionEnterTimeout', 'inkTransitionLeaveTimeout', 'inkStyle', 'inkClassName', 'inkContainerStyle', 'inkContainerClassName', 'disabledInteractions', 'waitForInkTransition']);
	
	        delete props.__SUPER_SECRET_REF__;
	
	        if (!(props.disabled || inkDisabled)) {
	          props.ink = _react2.default.createElement(_InkContainer2.default, {
	            ref: this._setInkRef,
	            key: 'ink-container',
	            style: inkContainerStyle,
	            className: inkContainerClassName,
	            inkStyle: inkStyle,
	            inkClassName: inkClassName,
	            disabledInteractions: disabledInteractions,
	            transitionOverlap: transitionOverlap,
	            transitionEnterTimeout: transitionEnterTimeout,
	            transitionLeaveTimeout: transitionLeaveTimeout,
	            waitForInkTransition: waitForInkTransition
	          });
	        }
	
	        props.ref = this._setComposedComponent;
	
	        return _react2.default.createElement(ComposedComponent, props);
	      }
	    }]);
	
	    return InkedComponent;
	  }(_react.PureComponent), _class.displayName = (0, _getDisplayName2.default)(ComposedComponent, 'Inked'), _class.propTypes = {
	    /**
	     * An optional style to apply to each ink that gets generated.
	     */
	    inkStyle: _propTypes2.default.object,
	
	    /**
	     * An optional className to apply to each ink that gets generated.
	     */
	    inkClassName: _propTypes2.default.string,
	
	    /**
	     * An optional style to apply to the ink's container.
	     */
	    inkContainerStyle: _propTypes2.default.object,
	
	    /**
	     * An optional className to apply to the ink's container.
	     */
	    inkContainerClassName: _propTypes2.default.string,
	
	    /**
	     * Boolean if the composed component or the ink is disabled.
	     */
	    disabled: _propTypes2.default.bool,
	
	    /**
	     * Boolean if only the ink is disabled for the composed component.
	     */
	    inkDisabled: _propTypes2.default.bool,
	
	    /**
	     * The time (in ms) that the enter and leave transitions for the ink should overlap.
	     * This really just allows for a more _fluid_ looking ink when something is quickly
	     * touched or clicked by having it fade out while growing.
	     */
	    inkTransitionOverlap: _propTypes2.default.number.isRequired,
	
	    /**
	     * The transition time for the ink to be considered fully entered. This should really
	     * map up to whatever value you set for `$md-ink-enter-transition-time`.
	     */
	    inkTransitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	    /**
	     * The transition time for the ink to be considered fully leaved (left?). This should really
	     * map up to whatever value you set for `$md-ink-leave-transition-time`.
	     */
	    inkTransitionLeaveTimeout: _propTypes2.default.number.isRequired,
	
	    /**
	     * Boolean if the `ComposedComponent`'s click event only after the ink has finished transitioning
	     * in and out. This is really only to get a more _fluid_ looking click event when clicking on
	     * the `ComposedComponent` ends up taking it out of the view. (ex: Closing a Dialog).
	     */
	    waitForInkTransition: _propTypes2.default.bool,
	
	    /**
	     * An optional array of interactions that can be disabled for the ink. This is a *very* limited
	     * use case where `Switches` needed the ink disabled only when using a mouse.
	     */
	    disabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'mouse', 'touch'])),
	
	    /**
	     * When using inked components in a `TransitionGroup`, the ref callback is not actually invoked.
	     * This is a little _hack_ to get it to work by not using `ref`, but this name.
	     */
	    __SUPER_SECRET_REF__: _propTypes2.default.func
	  }, _class.defaultProps = {
	    inkTransitionOverlap: 150,
	    inkTransitionEnterTimeout: 450,
	    inkTransitionLeaveTimeout: 300
	  }, _temp;
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TileAddon` component is used to render either a `FontIcon` or an `Avatar`
	 * next to the `ListTileText` for a `ListItem`.
	 */
	var TileAddon = function (_PureComponent) {
	  _inherits(TileAddon, _PureComponent);
	
	  function TileAddon() {
	    _classCallCheck(this, TileAddon);
	
	    return _possibleConstructorReturn(this, (TileAddon.__proto__ || Object.getPrototypeOf(TileAddon)).apply(this, arguments));
	  }
	
	  _createClass(TileAddon, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          icon = _props.icon,
	          avatar = _props.avatar,
	          active = _props.active,
	          activeClassName = _props.activeClassName,
	          style = _props.style,
	          className = _props.className;
	
	      if (!icon && !avatar) {
	        return null;
	      }
	
	      var avatarIcon = false;
	      if (avatar) {
	        var avatarChild = _react2.default.Children.only(avatar);
	        if (avatarChild.props.iconSized) {
	          avatarIcon = true;
	        }
	      }
	      return _react2.default.createElement(
	        'div',
	        {
	          style: style,
	          className: (0, _classnames2.default)('md-tile-addon', _defineProperty({
	            'md-tile-addon--icon': icon || avatarIcon,
	            'md-tile-addon--avatar': avatar && !avatarIcon
	          }, activeClassName, active), className)
	        },
	        icon || avatar
	      );
	    }
	  }]);
	
	  return TileAddon;
	}(_react.PureComponent);
	
	TileAddon.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  activeClassName: _propTypes2.default.string,
	  icon: _propTypes2.default.node,
	  avatar: _propTypes2.default.node
	};
	exports.default = TileAddon;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `PickerControl` component is the button that goes in the header
	 * of a `Picker` component. It is used to switch the view of the `Picker`
	 * from state to state.
	 *
	 * For example, this is the year and date views for the `DatePicker`.
	 */
	var PickerControl = function (_PureComponent) {
	  _inherits(PickerControl, _PureComponent);
	
	  function PickerControl() {
	    _classCallCheck(this, PickerControl);
	
	    return _possibleConstructorReturn(this, (PickerControl.__proto__ || Object.getPrototypeOf(PickerControl)).apply(this, arguments));
	  }
	
	  _createClass(PickerControl, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          active = _props.active,
	          props = _objectWithoutProperties(_props, ['className', 'active']);
	
	      return _react2.default.createElement('button', _extends({}, props, {
	        type: 'button',
	        className: (0, _classnames2.default)('md-btn md-pointer--hover md-picker-control md-picker-text', {
	          'md-picker-text--active': active
	        }, className)
	      }));
	    }
	  }]);
	
	  return PickerControl;
	}(_react.PureComponent);
	
	PickerControl.propTypes = {
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool.isRequired,
	  onClick: _propTypes2.default.func.isRequired,
	  children: _propTypes2.default.node.isRequired
	};
	exports.default = PickerControl;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _reactDom = __webpack_require__(4);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _keyCodes = __webpack_require__(6);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _handleKeyboardAccessibility = __webpack_require__(37);
	
	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _isBetween = __webpack_require__(120);
	
	var _isBetween2 = _interopRequireDefault(_isBetween);
	
	var _addSuffix = __webpack_require__(122);
	
	var _addSuffix2 = _interopRequireDefault(_addSuffix);
	
	var _List = __webpack_require__(28);
	
	var _List2 = _interopRequireDefault(_List);
	
	var _ListItem = __webpack_require__(46);
	
	var _ListItem2 = _interopRequireDefault(_ListItem);
	
	var _Menu = __webpack_require__(35);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	var _Positions = __webpack_require__(47);
	
	var _Positions2 = _interopRequireDefault(_Positions);
	
	var _FloatingLabel = __webpack_require__(110);
	
	var _FloatingLabel2 = _interopRequireDefault(_FloatingLabel);
	
	var _TextFieldMessage = __webpack_require__(112);
	
	var _TextFieldMessage2 = _interopRequireDefault(_TextFieldMessage);
	
	var _Field = __webpack_require__(227);
	
	var _Field2 = _interopRequireDefault(_Field);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var VALID_LIST_ITEM_PROPS = Object.keys(_ListItem2.default.propTypes);
	
	var MOBILE_LIST_PADDING = 8;
	var SelectFieldPositions = Object.assign({}, _Positions2.default);
	delete SelectFieldPositions.BOTTOM_RIGHT;
	delete SelectFieldPositions.BOTTOM_LEFt;
	
	var SelectField = function (_PureComponent) {
	  _inherits(SelectField, _PureComponent);
	
	  function SelectField(props) {
	    _classCallCheck(this, SelectField);
	
	    var _this = _possibleConstructorReturn(this, (SelectField.__proto__ || Object.getPrototypeOf(SelectField)).call(this, props));
	
	    _this.state = {
	      active: false,
	      activeIndex: _this._getActiveIndex(props, { value: props.defaultValue }),
	      isOpen: typeof props.initiallyOpen !== 'undefined' ? props.initiallyOpen : !!props.defaultOpen,
	      activeLabel: _this._getActiveLabel(props, typeof props.value !== 'undefined' ? props.value : props.defaultValue),
	      match: null,
	      lastSearch: null,
	      error: false
	    };
	
	    if (typeof props.value === 'undefined') {
	      _this.state.value = props.defaultValue;
	    }
	
	    _this._setMenu = _this._setMenu.bind(_this);
	    _this._setField = _this._setField.bind(_this);
	    _this._positionList = _this._positionList.bind(_this);
	    _this._toggleOpen = _this._toggleOpen.bind(_this);
	    _this._handleBlur = _this._handleBlur.bind(_this);
	    _this._handleFocus = _this._handleFocus.bind(_this);
	    _this._handleOpen = _this._handleOpen.bind(_this);
	    _this._handleClose = _this._handleClose.bind(_this);
	    _this._getActiveLabel = _this._getActiveLabel.bind(_this);
	    _this._mapToListItem = _this._mapToListItem.bind(_this);
	    _this._handleItemSelect = _this._handleItemSelect.bind(_this);
	    _this._handleContainerClick = _this._handleContainerClick.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._setMenuItem = _this._setMenuItem.bind(_this);
	    _this._getActiveIndex = _this._getActiveIndex.bind(_this);
	    _this._advanceFocus = _this._advanceFocus.bind(_this);
	    _this._attemptItemFocus = _this._attemptItemFocus.bind(_this);
	    _this._selectItemByLetter = _this._selectItemByLetter.bind(_this);
	    _this._selectFirstMatch = _this._selectFirstMatch.bind(_this);
	
	    _this._items = [];
	    _this._activeItem = null;
	    _this._focusedAtLeastOnce = false;
	    return _this;
	  }
	
	  _createClass(SelectField, [{
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var prevValue = (0, _getField2.default)(this.props, this.state, 'value');
	      var value = (0, _getField2.default)(nextProps, nextState, 'value');
	      var error = (0, _getField2.default)(nextProps, nextState, 'error');
	      var isOpen = (0, _getField2.default)(nextProps, nextState, 'isOpen');
	      var valued = !(0, _getField2.default)(nextProps, nextState, 'value');
	
	      var state = void 0;
	      if (prevValue !== value || this.props.menuItems !== nextProps.menuItems) {
	        state = {
	          activeLabel: this._getActiveLabel(nextProps, value)
	        };
	      }
	
	      if (this._focusedAtLeastOnce && nextProps.required && !isOpen && error !== valued) {
	        state = state || {};
	        state.error = valued;
	      }
	
	      if (state) {
	        this.setState(state);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._matchingTimeout) {
	        clearTimeout(this._matchingTimeout);
	      }
	    }
	  }, {
	    key: '_attemptItemFocus',
	    value: function _attemptItemFocus(index) {
	      if (index === -1) {
	        return;
	      }
	
	      var item = this._items[index];
	      if (item) {
	        item.focus();
	      }
	    }
	  }, {
	    key: '_getActiveLabel',
	    value: function _getActiveLabel(_ref, value) {
	      var _this2 = this;
	
	      var menuItems = _ref.menuItems,
	          itemLabel = _ref.itemLabel,
	          itemValue = _ref.itemValue;
	
	      var activeLabel = '';
	      menuItems.some(function (item) {
	        activeLabel = _this2._getActiveLabelFromItem(item, value, itemLabel, itemValue);
	        return activeLabel;
	      });
	
	      return activeLabel;
	    }
	  }, {
	    key: '_getActiveLabelFromItem',
	    value: function _getActiveLabelFromItem(item, value, itemLabel, itemValue) {
	      switch (typeof item === 'undefined' ? 'undefined' : _typeof(item)) {
	        case 'number':
	        case 'string':
	          if (item === value || item === parseInt(value, 10)) {
	            return item;
	          }
	
	          break;
	        case 'object':
	          if (item[itemValue] === value || item[itemValue] === parseInt(value, 10)) {
	            return item[itemLabel];
	          }
	
	          break;
	        default:
	      }
	
	      return '';
	    }
	  }, {
	    key: '_getActiveIndex',
	    value: function _getActiveIndex(props, state) {
	      var _this3 = this;
	
	      var value = (0, _getField2.default)(props, state, 'value');
	      if (!value) {
	        return -1;
	      }
	
	      var itemLabel = props.itemLabel,
	          itemValue = props.itemValue,
	          menuItems = props.menuItems;
	
	      var index = -1;
	      menuItems.some(function (item, i) {
	        var found = _this3._getActiveLabelFromItem(item, value, itemLabel, itemValue);
	        if (found) {
	          index = i;
	        }
	
	        return found;
	      });
	
	      return index;
	    }
	  }, {
	    key: '_setMenu',
	    value: function _setMenu(menu) {
	      this._menu = (0, _reactDom.findDOMNode)(menu);
	    }
	  }, {
	    key: '_setField',
	    value: function _setField(field) {
	      this._field = (0, _reactDom.findDOMNode)(field);
	    }
	  }, {
	    key: '_positionList',
	    value: function _positionList(listRef) {
	      if (listRef === null) {
	        this._items = [];
	      } else if (!this._activeItem) {
	        return;
	      }
	
	      var list = (0, _reactDom.findDOMNode)(listRef);
	      var _props = this.props,
	          position = _props.position,
	          menuItems = _props.menuItems,
	          toolbar = _props.toolbar;
	
	      if (position === SelectField.Positions.BELOW || toolbar) {
	        // only modify scroll distance when below
	        var activeIndex = Math.min(this._activeItem, menuItems.length - 2);
	        var _itemTop = list.querySelectorAll('.md-list-tile')[activeIndex].offsetTop;
	
	        list.scrollTop = _itemTop > MOBILE_LIST_PADDING ? _itemTop : 0;
	        return;
	      }
	
	      var _activeItem = this._activeItem,
	          itemTop = _activeItem.offsetTop,
	          itemHeight = _activeItem.offsetHeight;
	      var menuHeight = this._menu.offsetHeight;
	
	      var itemPosition = Math.max(0, itemTop - itemHeight);
	      var listPadding = parseInt(window.getComputedStyle(list).getPropertyValue('padding-top'), 10);
	
	      // Basically calculates where the current item is in the list, and attempts to make the menu
	      // originate from that position.
	      var x = SelectField.Positions.TOP_LEFT === position ? '0' : '100%';
	      var y = (itemPosition === 0 ? 0 : menuHeight) + menuHeight / 2 + listPadding;
	      var transformOrigin = x + ' ' + y + 'px';
	
	      var top = void 0;
	      if (itemPosition > 0) {
	        // close enough. It is off by 4px for floating label on desktop
	        top = -(itemHeight + listPadding - (menuHeight - itemHeight));
	      }
	
	      if (itemPosition > 0) {
	        list.scrollTop = itemPosition;
	      }
	
	      this.setState({
	        listStyle: {
	          top: top,
	          transformOrigin: transformOrigin
	        }
	      });
	    }
	  }, {
	    key: '_handleFocus',
	    value: function _handleFocus(e) {
	      this._focusedAtLeastOnce = true;
	      if (this.props.onFocus) {
	        this.props.onFocus(e);
	      }
	
	      this.setState({ active: true });
	    }
	  }, {
	    key: '_handleBlur',
	    value: function _handleBlur(e) {
	      if (this.props.onBlur) {
	        this.props.onBlur(e);
	      }
	
	      var isOpen = (0, _getField2.default)(this.props, this.state, 'isOpen');
	      var value = (0, _getField2.default)(this.props, this.state, 'value');
	
	      this.setState({
	        active: false,
	        error: this.props.required && !isOpen && !value
	      });
	    }
	  }, {
	    key: '_handleItemSelect',
	    value: function _handleItemSelect(index, v, e) {
	      var _props2 = this.props,
	          required = _props2.required,
	          menuItems = _props2.menuItems,
	          itemLabel = _props2.itemLabel,
	          itemValue = _props2.itemValue,
	          onChange = _props2.onChange,
	          position = _props2.position;
	
	      var number = typeof menuItems[index] === 'number' || typeof menuItems[index][itemValue] === 'number';
	      var value = number ? Number(v) : v;
	
	      var below = position === SelectField.Positions.BELOW;
	      if ((0, _getField2.default)(this.props, this.state, 'value') !== value && onChange) {
	        onChange(value, index, e);
	      }
	
	      var state = {
	        activeIndex: below ? 0 : index,
	        activeLabel: this._getActiveLabelFromItem(menuItems[index], value, itemLabel, itemValue),
	        error: required && !value
	      };
	
	      if (typeof this.props.value === 'undefined') {
	        state.value = value;
	      }
	
	      if (typeof this.props.isOpen === 'undefined' && e.type !== 'click') {
	        state.isOpen = false;
	      }
	
	      this.setState(state);
	    }
	  }, {
	    key: '_handleContainerClick',
	    value: function _handleContainerClick(e) {
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      var target = e.target;
	
	      while (this._menu && this._menu.contains(target)) {
	        if (target.dataset.id) {
	          this._handleItemSelect(parseInt(target.dataset.id, 10), target.dataset.value, e);
	          return;
	        }
	
	        target = target.parentNode;
	      }
	    }
	
	    /**
	     * This function is only called when the user _clicks_ or _touches_ the select field. Since
	     * clicking it can either open or close it, this is actually toggled.
	     */
	
	  }, {
	    key: '_toggleOpen',
	    value: function _toggleOpen(e) {
	      var isOpen = !(0, _getField2.default)(this.props, this.state, 'isOpen');
	      if (this.props.onMenuToggle) {
	        this.props.onMenuToggle(isOpen, e);
	      }
	
	      if (typeof this.props.isOpen === 'undefined') {
	        this.setState({ isOpen: isOpen });
	      }
	    }
	
	    /**
	     * Ths function is used for opening the select field with keyboard input.
	     */
	
	  }, {
	    key: '_handleOpen',
	    value: function _handleOpen(e) {
	      if (this.props.onMenuToggle) {
	        this.props.onMenuToggle(true, e);
	      }
	
	      var state = void 0;
	      if (!(0, _getField2.default)(this.props, this.state, 'value') && this.state.activeIndex === -1) {
	        // When there is no value, need to change the default active index to 0 instead of -1
	        // so that the next DOWN arrow increments correctly
	        state = { activeIndex: 0 };
	      }
	
	      if (typeof this.props.isOpen === 'undefined') {
	        state = state || {};
	        state.isOpen = true;
	      }
	
	      if (state) {
	        this.setState(state);
	      }
	    }
	  }, {
	    key: '_handleClose',
	    value: function _handleClose(e) {
	      if (this.props.onMenuToggle) {
	        this.props.onMenuToggle(false, e);
	      }
	
	      var state = void 0;
	      if (this.props.position === SelectField.Positions.BELOW) {
	        // Set the active index back to 0 since the active item will be spliced out
	        // of the menu items
	        state = { activeIndex: 0 };
	      }
	
	      if (typeof this.props.isOpen === 'undefined') {
	        state = state || {};
	        state.isOpen = false;
	      }
	
	      if (state) {
	        this.setState(state);
	      }
	    }
	  }, {
	    key: '_mapToListItem',
	    value: function _mapToListItem(item, i) {
	      var _props3 = this.props,
	          id = _props3.id,
	          itemLabel = _props3.itemLabel,
	          itemValueKey = _props3.itemValue,
	          position = _props3.position;
	
	      var below = position === SelectField.Positions.BELOW;
	      var value = (0, _getField2.default)(this.props, this.state, 'value');
	
	      var primaryText = '';
	      var itemValue = '';
	      var props = void 0;
	      switch (typeof item === 'undefined' ? 'undefined' : _typeof(item)) {
	        case 'number':
	        case 'string':
	          primaryText = item;
	          itemValue = item;
	          break;
	        case 'object':
	          primaryText = item[itemLabel];
	          itemValue = typeof item[itemValueKey] !== 'undefined' ? item[itemValueKey] : item[itemLabel];
	          props = Object.keys(item).reduce(function (validProps, key) {
	            if (key !== itemLabel && key !== itemValueKey && key !== 'primaryText' && VALID_LIST_ITEM_PROPS.indexOf(key) !== -1) {
	              validProps[key] = item[key];
	            }
	
	            return validProps;
	          }, {});
	          break;
	        default:
	      }
	
	      var active = itemValue === value || itemValue === parseInt(value, 10);
	      if (below && active) {
	        return null;
	      }
	
	      return _react2.default.createElement(_ListItem2.default, _extends({}, props, {
	        ref: this._setMenuItem,
	        active: active,
	        tabIndex: -1,
	        primaryText: primaryText,
	        key: item.key || i,
	        role: 'option',
	        id: active ? id + 'Active' : null,
	        'data-id': i,
	        'data-value': itemValue,
	        tileStyle: below ? { paddingLeft: 24 } : undefined
	      }));
	    }
	  }, {
	    key: '_setMenuItem',
	    value: function _setMenuItem(item) {
	      if (!item) {
	        return;
	      }
	
	      if (item.props.active) {
	        this._activeItem = (0, _reactDom.findDOMNode)(item);
	        item.focus();
	      }
	
	      this._items.push(item);
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      var key = e.which || e.keyCode;
	      var isOpen = (0, _getField2.default)(this.props, this.state, 'isOpen');
	
	      if (key === _keyCodes.UP || key === _keyCodes.DOWN) {
	        e.preventDefault();
	
	        if (!isOpen) {
	          this._handleOpen(e);
	          return;
	        }
	      }
	
	      if (!isOpen && (0, _handleKeyboardAccessibility2.default)(e, this._handleOpen, true, true)) {
	        return;
	      } else if (isOpen && (key === _keyCodes.ESC || key === _keyCodes.TAB)) {
	        if (this._field && key === _keyCodes.ESC) {
	          this._field.focus();
	        }
	
	        this._handleClose(e);
	        return;
	      }
	
	      switch (key) {
	        case _keyCodes.UP:
	        case _keyCodes.DOWN:
	          this._advanceFocus(key === _keyCodes.UP, e);
	          break;
	        case _keyCodes.ENTER:
	        case _keyCodes.SPACE:
	          if (this._field) {
	            this._field.focus();
	          }
	
	          this._handleContainerClick(e);
	          break;
	        default:
	          this._selectItemByLetter(e, key);
	      }
	    }
	  }, {
	    key: '_advanceFocus',
	    value: function _advanceFocus(decrement) {
	      var _props4 = this.props,
	          menuItems = _props4.menuItems,
	          position = _props4.position;
	      var activeIndex = this.state.activeIndex;
	
	
	      var below = position === SelectField.Positions.BELOW;
	
	      // If the select field is positioned below and there is no value, need to increment the last index
	      // by one since this select field removes the active item. Need to account for that here when there
	      // is no value.
	      var lastIndex = menuItems.length - (below && !(0, _getField2.default)(this.props, this.state, 'value') ? 0 : 1);
	      if (decrement && activeIndex <= 0 || !decrement && activeIndex >= lastIndex) {
	        return;
	      }
	
	      var nextIndex = Math.max(-1, Math.min(lastIndex, activeIndex + (decrement ? -1 : 1)));
	      if (nextIndex === activeIndex) {
	        return;
	      }
	
	      this._attemptItemFocus(nextIndex - (below ? 1 : 0));
	      if (below && decrement && nextIndex === 0) {
	        return;
	      }
	
	      this.setState({ activeIndex: nextIndex });
	    }
	  }, {
	    key: '_selectItemByLetter',
	    value: function _selectItemByLetter(e, key) {
	      var _this4 = this;
	
	      var charCode = String.fromCharCode(key);
	      var isLetter = charCode && charCode.match(/[A-Za-z0-9-_ ]/);
	      var isKeypad = (0, _isBetween2.default)(key, _keyCodes.KEYPAD_ZERO, _keyCodes.KEYPAD_NINE);
	      if (!(0, _isBetween2.default)(key, _keyCodes.ZERO, _keyCodes.NINE) && !isKeypad && !isLetter) {
	        return;
	      }
	
	      var letter = isLetter ? charCode : String(key - (isKeypad ? _keyCodes.KEYPAD_ZERO : _keyCodes.ZERO));
	
	      if (this._matchingTimeout) {
	        clearTimeout(this._matchingTimeout);
	      }
	
	      this._matchingTimeout = setTimeout(function () {
	        _this4._matchingTimeout = null;
	
	        _this4.setState({ match: null, lastSearch: null });
	      }, this.props.keyboardMatchingTimeout);
	
	      this._selectFirstMatch(letter, e);
	    }
	  }, {
	    key: '_selectFirstMatch',
	    value: function _selectFirstMatch(letter, e) {
	      var _props5 = this.props,
	          menuItems = _props5.menuItems,
	          itemLabel = _props5.itemLabel,
	          itemValue = _props5.itemValue;
	
	
	      var search = '' + (this.state.lastSearch || '') + letter;
	      var match = -1;
	      menuItems.some(function (item, i) {
	        var value = String((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && item ? item[itemLabel] : item);
	        if (value && value.toUpperCase().indexOf(search) === 0) {
	          match = i;
	        }
	
	        return match > -1;
	      });
	
	      var activeItem = menuItems[match];
	
	      var state = {
	        match: match,
	        lastSearch: search
	      };
	
	      if (match === -1) {
	        this.setState(state);
	        return;
	      }
	
	      state.activeLabel = (typeof activeItem === 'undefined' ? 'undefined' : _typeof(activeItem)) === 'object' ? activeItem[itemLabel] : activeItem;
	      state.activeIndex = match;
	
	      if ((0, _getField2.default)(this.props, this.state, 'isOpen')) {
	        if (state.match !== this.state.match) {
	          this._attemptItemFocus(state.activeIndex);
	        }
	      } else {
	        var value = (typeof activeItem === 'undefined' ? 'undefined' : _typeof(activeItem)) === 'object' ? activeItem[itemValue] : activeItem;
	        state.error = !value;
	
	        if ((0, _getField2.default)(this.props, this.state, 'value') !== value && this.props.onChange) {
	          this.props.onChange(value, state.activeIndex, e);
	        }
	
	        if (typeof this.props.value === 'undefined') {
	          state.value = value;
	        }
	      }
	
	      this.setState(state);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          activeLabel = _state.activeLabel,
	          active = _state.active;
	
	      var _props6 = this.props,
	          id = _props6.id,
	          style = _props6.style,
	          className = _props6.className,
	          listStyle = _props6.listStyle,
	          listClassName = _props6.listClassName,
	          inputStyle = _props6.inputStyle,
	          inputClassName = _props6.inputClassName,
	          disabled = _props6.disabled,
	          menuItems = _props6.menuItems,
	          position = _props6.position,
	          stretchList = _props6.stretchList,
	          errorText = _props6.errorText,
	          helpText = _props6.helpText,
	          helpOnFocus = _props6.helpOnFocus,
	          required = _props6.required,
	          fullWidth = _props6.fullWidth,
	          props = _objectWithoutProperties(_props6, ['id', 'style', 'className', 'listStyle', 'listClassName', 'inputStyle', 'inputClassName', 'disabled', 'menuItems', 'position', 'stretchList', 'errorText', 'helpText', 'helpOnFocus', 'required', 'fullWidth']);
	
	      delete props.error;
	      delete props.itemLabel;
	      delete props.itemValue;
	      delete props.menuId;
	      delete props.listId;
	      delete props.defaultValue;
	      delete props.value;
	      delete props.isOpen;
	      delete props.defaultOpen;
	      delete props.keyboardMatchingTimeout;
	      delete props.onMenuToggle;
	
	      // delete deprecated
	      delete props.menuStyle;
	      delete props.menuClassName;
	      delete props.initiallyOpen;
	      delete props.floatingLabel;
	      delete props.noAutoAdjust;
	      delete props.adjustMinWidth;
	
	      var _props7 = this.props,
	          menuId = _props7.menuId,
	          listId = _props7.listId,
	          placeholder = _props7.placeholder,
	          label = _props7.label,
	          error = _props7.error;
	
	      error = error || this.state.error;
	      var value = (0, _getField2.default)(this.props, this.state, 'value');
	      var isOpen = (0, _getField2.default)(this.props, this.state, 'isOpen');
	      var below = position === SelectField.Positions.BELOW;
	
	      if (!menuId) {
	        menuId = id + 'Menu';
	      }
	
	      if (!listId) {
	        listId = id + 'Values';
	      }
	
	      if (required) {
	        if (label) {
	          label = (0, _addSuffix2.default)(label, '*');
	        }
	
	        if (placeholder && !label) {
	          placeholder = (0, _addSuffix2.default)(placeholder, '*');
	        }
	      }
	
	      var toggle = [_react2.default.createElement(_FloatingLabel2.default, {
	        key: 'floating-label',
	        label: label,
	        htmlFor: id,
	        active: active || isOpen,
	        error: error,
	        floating: !!activeLabel || active || isOpen,
	        disabled: disabled
	      }), _react2.default.createElement(_Field2.default, _extends({}, props, {
	        id: id,
	        ref: this._setField,
	        key: 'select-field',
	        style: inputStyle,
	        className: inputClassName,
	        activeLabel: activeLabel,
	        required: required,
	        disabled: disabled,
	        active: active || isOpen,
	        below: below,
	        value: value,
	        label: label,
	        error: error,
	        placeholder: placeholder,
	        onClick: this._toggleOpen,
	        onFocus: this._handleFocus,
	        onBlur: this._handleBlur
	      })), _react2.default.createElement(_TextFieldMessage2.default, {
	        key: 'message',
	        active: active || isOpen,
	        error: error,
	        errorText: errorText,
	        helpText: helpText,
	        helpOnFocus: helpOnFocus,
	        leftIcon: false,
	        rightIcon: false
	      })];
	
	      return _react2.default.createElement(
	        _Menu2.default,
	        {
	          id: menuId,
	          position: position,
	          isOpen: isOpen,
	          onClose: this._handleClose,
	          onClick: this._handleContainerClick,
	          onKeyDown: this._handleKeyDown,
	          toggle: toggle,
	          style: style,
	          className: (0, _classnames2.default)('md-select-field-menu', {
	            'md-select-field-menu--stretch': stretchList
	          }, className),
	          ref: this._setMenu,
	          fullWidth: fullWidth
	        },
	        _react2.default.createElement(
	          _List2.default,
	          {
	            id: listId,
	            role: 'listbox',
	            ref: this._positionList,
	            'aria-activedescendant': value ? id + 'Active' : null,
	            style: _extends({}, listStyle, this.state.listStyle),
	            className: listClassName
	          },
	          menuItems.map(this._mapToListItem).filter(function (item) {
	            return item !== null;
	          })
	        )
	      );
	    }
	  }]);
	
	  return SelectField;
	}(_react.PureComponent);
	
	SelectField.Positions = SelectFieldPositions;
	SelectField.propTypes = {
	  /**
	   * An id to use for the select field. This is required for a11y. If the `menuId` and
	   * `listId` are not given, this will be used to create their ids for a11y.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * An optional name to give the select field's input.
	   */
	  name: _propTypes2.default.string,
	
	  /**
	   * An id to give the menu containing the select field. If this is omitted, the `id` prop
	   * will be used to make this id. `${id}Menu`.
	   */
	  menuId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An id to give the list that appears once the menu is open. If this is omitted, the `id` prop
	   * will be used to make this id. `${id}Values`.
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional style to apply to the select field's container. This is the `Menu` component.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional style to apply to the select field's container. This is the `Menu` component.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the select field's list of items that appear when opened.
	   */
	  listStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the select field's list of items that appear when opened.
	   */
	  listClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the select field itself.
	   */
	  inputStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the select field itself.
	   */
	  inputClassName: _propTypes2.default.string,
	
	  /**
	   * An optional value for the select field. This will require the `onChange` prop
	   * to be defined since it will be a controlled component.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'onChange'),
	
	  /**
	   * The default value for an uncontrolled select field.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	
	  /**
	   * Boolean if the select field is open by default.
	   */
	  defaultOpen: _propTypes2.default.bool,
	
	  /**
	   * An optional boolean if the select field is currently open. This will make the component
	   * controlled and require the `onMenuToggle` prop to be defined.
	   */
	  isOpen: (0, _controlled2.default)(_propTypes2.default.bool, 'onMenuToggle', 'defaultOpen'),
	
	  /**
	   * An optional function to call when the menu's open state changes. The callback will include
	   * the next open state and the event that driggered it.
	   *
	   * ```js
	   * onMenuToggle(isOpen, event);
	   * ```
	   */
	  onMenuToggle: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the value for the select field changes. The callback will
	   * include the new value, the index of the menu item that was selected, and the event that
	   * triggered the change.
	   *
	   * ```js
	   * onChange(newValue, newActiveIndex, event);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * A list of items to select from. This can be a mixed list of number, string,
	   * or object. If the item is an object, make sure the `itemLabel` and `itemValue`
	   * props match the keys in the object for the label and value.
	   */
	  menuItems: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.object])),
	
	  /**
	   * An optional floating label to display with the text field. This is invalid
	   * if the `position` is set to `SelectField.Positions.BELOW`.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * An optional placeholder to display in the select field.
	   */
	  placeholder: _propTypes2.default.string,
	
	  /**
	   * Boolean if the select field is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * The key to use for extracting a menu item's label if the menu item is an object.
	   *
	   * Example:
	   *
	   * ```js
	   * const item = { something: 'My Label', somethingElse: 'value' };
	   * const itemLabel = 'something';
	   * const itemValue = 'somethingElse';
	   * ```
	   */
	  itemLabel: _propTypes2.default.string.isRequired,
	
	  /**
	   * The key to use for extracting a menu item'value label if the menu item is an object.
	   *
	   * Example:
	   *
	   * ```js
	   * const item = { something: 'My Label', somethingElse: 'value' };
	   * const itemLabel = 'something';
	   * const itemValue = 'somethingElse';
	   * ```
	   */
	  itemValue: _propTypes2.default.string.isRequired,
	
	  /**
	   * Any children used to display the select field's drop down icon.
	   */
	  iconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon class name to use to display the select field's drop down icon.
	   */
	  iconClassName: _propTypes2.default.string,
	
	  /*
	   * An optional function to call when the menu is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * The position that the select field's options should appear from. If the position is
	   * set to `BELOW`, the select field will be displayed as a button with ink instead of
	   * a text field.
	   */
	  position: _propTypes2.default.oneOf([SelectField.Positions.TOP_LEFT, SelectField.Positions.TOP_RIGHT, SelectField.Positions.BELOW]).isRequired,
	
	  /*
	   * The direction that the select field's focus indicator should grow from.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']).isRequired,
	
	  /**
	   * An optional function to call when the select field is focused.
	   */
	  onFocus: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the select field is blurred. This
	   * will also be triggered when a user selects a new item or keyboard navigates
	   * through the list items.
	   */
	  onBlur: _propTypes2.default.func,
	
	  /**
	   * The amount of time that a list of letters should be used when finding a menu item
	   * while typing. Since a user can select items by typing multiple letters in a row,
	   * this will be used as the timeout for clearing those letters.
	   *
	   * For example:
	   * - User types `g`
	   *
	   * Full match is now `'g'`.
	   *
	   * - User delays 200ms and types `u`
	   *
	   * Full match is now `'gu'`
	   *
	   * - User delays 1000ms and types `a`.
	   *
	   * Full match is now `'a'`
	   */
	  keyboardMatchingTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the select field's list of menu items should stretch to at least
	   * be the width of the select field.
	   */
	  stretchList: _propTypes2.default.bool,
	
	  /**
	   * Boolean if there has been an error for the select field. This will display
	   * the `errorText`. And style the floating label and focus indicator with the
	   * error color.
	   */
	  error: _propTypes2.default.bool,
	
	  /**
	   * An optional error text to display when the `error` prop is true.
	   */
	  errorText: _propTypes2.default.node,
	
	  /**
	   * An optional help text to display below the select field.
	   */
	  helpText: _propTypes2.default.node,
	
	  /**
	   * Boolean if the help text should only be displayed when the select field
	   * has focus.
	   */
	  helpOnFocus: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the select field is required. This will updated the label or placeholder
	   * to include an asterisk.
	   */
	  required: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the select field is in a toolbar. This will automatically be injected if the select field
	   * is passed in as the `menuTitle` prop.
	   */
	  toolbar: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the menu surrounding the select field should be full width or not.
	   */
	  fullWidth: _propTypes2.default.bool,
	
	  menuStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'Use `style` instead'),
	  menuClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `className` instead'),
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultOpen` instead'),
	  floatingLabel: (0, _deprecated2.default)(_propTypes2.default.bool, 'A select field can only have floating labels now. Only provide the `label` prop'),
	  noAutoAdjust: (0, _deprecated2.default)(_propTypes2.default.bool, 'No longer valid to use since select fields are no longer text fields'),
	  adjustMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'No longer valid to use since select fields are no longer text fields')
	};
	SelectField.defaultProps = {
	  defaultValue: '',
	  itemLabel: 'label',
	  itemValue: 'value',
	  iconChildren: 'arrow_drop_down',
	  position: SelectField.Positions.TOP_LEFT,
	  lineDirection: 'left',
	  keyboardMatchingTimeout: 1000,
	  stretchList: true,
	  menuItems: []
	};
	exports.default = SelectField;

/***/ },
/* 66 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addDate;
	
	/**
	 * Adds a given amount to a date.
	 *
	 * @param {date} sourceDate the date to add
	 * @param {number} amt the amount to add
	 * @param {string} part the date part to add to. ['D', 'M', 'Y']
	 * @return a new Date with the part added or the date if the part is not valid.
	 */
	function addDate(sourceDate, amt, part) {
	  var date = new Date(sourceDate);
	
	  switch (part) {
	    case 'D':
	      return new Date(date.setDate(date.getDate() + amt));
	    case 'M':
	      date.setDate(1);
	      return new Date(date.setMonth(date.getMonth() + amt));
	    case 'Y':
	      return new Date(date.setFullYear(date.getFullYear() + amt));
	    default:
	      return date;
	  }
	}

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isValidClick;
	
	var _keyCodes = __webpack_require__(6);
	
	/**
	 * Checks if an event is a valid click event by ignoring
	 * any clisk that are not the left mouse button and not
	 * clicks that involve the shift key.
	 *
	 * @param {Object} e - the event to check
	 * @return {Boolean} true if the event is valid.
	 */
	function isValidClick(e) {
	  return e.button === _keyCodes.LEFT_MOUSE && !e.shiftKey;
	}

/***/ },
/* 68 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 69 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 70 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 71 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(40)
	  , dPs         = __webpack_require__(314)
	  , enumBugKeys = __webpack_require__(69)
	  , IE_PROTO    = __webpack_require__(75)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(132)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(307).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 73 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(23).f
	  , has = __webpack_require__(22)
	  , TAG = __webpack_require__(33)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(76)('keys')
	  , uid    = __webpack_require__(51);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(16)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 77 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(68);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(41);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(16)
	  , core           = __webpack_require__(15)
	  , LIBRARY        = __webpack_require__(71)
	  , wksExt         = __webpack_require__(81)
	  , defineProperty = __webpack_require__(23).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(33);

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(53)
	  , root = typeof window === 'undefined' ? global : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]
	
	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix]
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix]
	}
	
	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60
	
	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }
	
	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}
	
	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(root, arguments)
	}
	module.exports.polyfill = function() {
	  root.requestAnimationFrame = raf
	  root.cancelAnimationFrame = caf
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 83 */
/***/ function(module, exports) {

	
	
	// currently used to initiate the velocity style object to 0
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = mapToZero;
	
	function mapToZero(obj) {
	  var ret = {};
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      ret[key] = 0;
	    }
	  }
	  return ret;
	}
	
	module.exports = exports['default'];

/***/ },
/* 84 */
/***/ function(module, exports) {

	
	
	// usage assumption: currentStyle values have already been rendered but it says
	// nothing of whether currentStyle is stale (see unreadPropStyle)
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = shouldStopAnimation;
	
	function shouldStopAnimation(currentStyle, style, currentVelocity) {
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }
	
	    if (currentVelocity[key] !== 0) {
	      return false;
	    }
	
	    var styleValue = typeof style[key] === 'number' ? style[key] : style[key].val;
	    // stepper will have already taken care of rounding precision errors, so
	    // won't have such thing as 0.9999 !=== 1
	    if (currentStyle[key] !== styleValue) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = exports['default'];

/***/ },
/* 85 */
/***/ function(module, exports) {

	
	
	// stepper is used a lot. Saves allocation to return the same array wrapper.
	// This is fine and danger-free against mutations because the callsite
	// immediately destructures it and gets the numbers inside without passing the
	"use strict";
	
	exports.__esModule = true;
	exports["default"] = stepper;
	
	var reusedTuple = [0, 0];
	
	function stepper(secondPerFrame, x, v, destX, k, b, precision) {
	  // Spring stiffness, in kg / s^2
	
	  // for animations, destX is really spring length (spring at rest). initial
	  // position is considered as the stretched/compressed position of a spring
	  var Fspring = -k * (x - destX);
	
	  // Damping, in kg / s
	  var Fdamper = -b * v;
	
	  // usually we put mass here, but for animation purposes, specifying mass is a
	  // bit redundant. you could simply adjust k and b accordingly
	  // let a = (Fspring + Fdamper) / mass;
	  var a = Fspring + Fdamper;
	
	  var newV = v + a * secondPerFrame;
	  var newX = x + newV * secondPerFrame;
	
	  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
	    reusedTuple[0] = destX;
	    reusedTuple[1] = 0;
	    return reusedTuple;
	  }
	
	  reusedTuple[0] = newX;
	  reusedTuple[1] = newV;
	  return reusedTuple;
	}
	
	module.exports = exports["default"];
	// array reference around.

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _chainFunction = __webpack_require__(295);
	
	var _chainFunction2 = _interopRequireDefault(_chainFunction);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _warning = __webpack_require__(55);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _ChildMapping = __webpack_require__(357);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var propTypes = {
	  component: _propTypes2.default.any,
	  childFactory: _propTypes2.default.func,
	  children: _propTypes2.default.node
	};
	
	var defaultProps = {
	  component: 'span',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	
	var TransitionGroup = function (_React$Component) {
	  _inherits(TransitionGroup, _React$Component);
	
	  function TransitionGroup(props, context) {
	    _classCallCheck(this, TransitionGroup);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));
	
	    _this.performAppear = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      var component = _this.childRefs[key];
	
	      if (component.componentWillAppear) {
	        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key));
	      } else {
	        _this._handleDoneAppearing(key);
	      }
	    };
	
	    _this._handleDoneAppearing = function (key) {
	      var component = _this.childRefs[key];
	      if (component && component.componentDidAppear) {
	        component.componentDidAppear();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);
	
	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully appeared. Remove it.
	        _this.performLeave(key);
	      }
	    };
	
	    _this.performEnter = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      var component = _this.childRefs[key];
	
	      if (component.componentWillEnter) {
	        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key));
	      } else {
	        _this._handleDoneEntering(key);
	      }
	    };
	
	    _this._handleDoneEntering = function (key) {
	      var component = _this.childRefs[key];
	      if (component && component.componentDidEnter) {
	        component.componentDidEnter();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);
	
	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully entered. Remove it.
	        _this.performLeave(key);
	      }
	    };
	
	    _this.performLeave = function (key) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      var component = _this.childRefs[key];
	      if (component.componentWillLeave) {
	        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key));
	      } else {
	        // Note that this is somewhat dangerous b/c it calls setState()
	        // again, effectively mutating the component before all the work
	        // is done.
	        _this._handleDoneLeaving(key);
	      }
	    };
	
	    _this._handleDoneLeaving = function (key) {
	      var component = _this.childRefs[key];
	
	      if (component && component.componentDidLeave) {
	        component.componentDidLeave();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);
	
	      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	        // This entered again before it fully left. Add it again.
	        _this.performEnter(key);
	      } else {
	        _this.setState(function (state) {
	          var newChildren = _extends({}, state.children);
	          delete newChildren[key];
	          return { children: newChildren };
	        });
	      }
	    };
	
	    _this.childRefs = Object.create(null);
	
	    _this.state = {
	      children: (0, _ChildMapping.getChildMapping)(props.children)
	    };
	    return _this;
	  }
	
	  TransitionGroup.prototype.componentWillMount = function componentWillMount() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  };
	
	  TransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  };
	
	  TransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextChildMapping = (0, _ChildMapping.getChildMapping)(nextProps.children);
	    var prevChildMapping = this.state.children;
	
	    this.setState({
	      children: (0, _ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping)
	    });
	
	    for (var key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }
	
	    for (var _key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(_key);
	      if (prevChildMapping[_key] && !hasNext && !this.currentlyTransitioningKeys[_key]) {
	        this.keysToLeave.push(_key);
	      }
	    }
	
	    // If we want to someday check for reordering, we could do it here.
	  };
	
	  TransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  };
	
	  TransitionGroup.prototype.render = function render() {
	    var _this2 = this;
	
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	
	    var _loop = function _loop(key) {
	      var child = _this2.state.children[key];
	      if (child) {
	        var isCallbackRef = typeof child.ref !== 'string';
	        var factoryChild = _this2.props.childFactory(child);
	        var ref = function ref(r) {
	          _this2.childRefs[key] = r;
	        };
	
	         true ? (0, _warning2.default)(isCallbackRef, 'string refs are not supported on children of TransitionGroup and will be ignored. ' + 'Please use a callback ref instead: https://facebook.github.io/react/docs/refs-and-the-dom.html#the-ref-callback-attribute') : void 0;
	
	        // Always chaining the refs leads to problems when the childFactory
	        // wraps the child. The child ref callback gets called twice with the
	        // wrapper and the child. So we only need to chain the ref if the
	        // factoryChild is not different from child.
	        if (factoryChild === child && isCallbackRef) {
	          ref = (0, _chainFunction2.default)(child.ref, ref);
	        }
	
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(_react2.default.cloneElement(factoryChild, {
	          key: key,
	          ref: ref
	        }));
	      }
	    };
	
	    for (var key in this.state.children) {
	      _loop(key);
	    }
	
	    // Do not forward TransitionGroup props to primitive DOM nodes
	    var props = _extends({}, this.props);
	    delete props.transitionLeave;
	    delete props.transitionName;
	    delete props.transitionAppear;
	    delete props.transitionEnter;
	    delete props.childFactory;
	    delete props.transitionLeaveTimeout;
	    delete props.transitionEnterTimeout;
	    delete props.transitionAppearTimeout;
	    delete props.component;
	
	    return _react2.default.createElement(this.props.component, props, childrenToRender);
	  };
	
	  return TransitionGroup;
	}(_react2.default.Component);
	
	TransitionGroup.displayName = 'TransitionGroup';
	
	
	TransitionGroup.propTypes = propTypes;
	TransitionGroup.defaultProps = defaultProps;
	
	exports.default = TransitionGroup;
	module.exports = exports['default'];

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _componentDeprecated = __webpack_require__(18);
	
	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _injectTooltip = __webpack_require__(48);
	
	var _injectTooltip2 = _interopRequireDefault(_injectTooltip);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `IconButton` component automatically includes ink and a tooltip.
	 * The tooltip will only be included if the `tooltipLabel` prop is given.
	 *
	 * Any other props (such as style or event listeners) will also be
	 * applied.
	 */
	var IconButton = function (_PureComponent) {
	  _inherits(IconButton, _PureComponent);
	
	  function IconButton() {
	    _classCallCheck(this, IconButton);
	
	    return _possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
	  }
	
	  _createClass(IconButton, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          iconClassName = _props.iconClassName,
	          children = _props.children,
	          tooltip = _props.tooltip,
	          floating = _props.floating,
	          props = _objectWithoutProperties(_props, ['iconClassName', 'children', 'tooltip', 'floating']);
	
	      delete props.tooltipLabel;
	      delete props.tooltipPosition;
	
	      return _react2.default.createElement(
	        _Button2.default,
	        _extends({}, props, { icon: !floating, floating: floating }),
	        tooltip,
	        _react2.default.createElement(
	          _FontIcon2.default,
	          { iconClassName: iconClassName },
	          children
	        )
	      );
	    }
	  }]);
	
	  return IconButton;
	}(_react.PureComponent);
	
	IconButton.propTypes = {
	  /**
	   * The className to use for rendering the `FontIcon`.
	   */
	  iconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children to use to render the `FontIcon`.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,
	
	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,
	
	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,
	  /**
	   * Boolean if the IconButton is floating
	  floating: PropTypes.bool,
	   /**
	   * An optional label to use if you would like a tooltip to display
	   * on hover or touch hold.
	   */
	  tooltipLabel: _propTypes2.default.node,
	
	  /**
	   * The position that the tooltip should be displayed relative to
	   * the button.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	
	  /**
	   * An optional amount of delay before the tooltip appears.
	   */
	  tooltipDelay: _propTypes2.default.number,
	
	  // Inject from injectTooltip
	  tooltip: _propTypes2.default.node,
	  floating: _propTypes2.default.bool,
	
	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `IconButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` compnent and add a ' + 'prop `icon`.')
	};
	IconButton.defaultProps = {
	  type: 'button'
	};
	exports.default = (0, _injectTooltip2.default)(IconButton);

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _CardExpander = __webpack_require__(89);
	
	var _CardExpander2 = _interopRequireDefault(_CardExpander);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `CardActions` component is used for adding actions on your card.
	 * The actions should be `FlatButton`s or `IconButton`s.
	 *
	 * This component can act as a `CardExpander`.
	 */
	var CardActions = function (_Component) {
	  _inherits(CardActions, _Component);
	
	  function CardActions() {
	    _classCallCheck(this, CardActions);
	
	    return _possibleConstructorReturn(this, (CardActions.__proto__ || Object.getPrototypeOf(CardActions)).apply(this, arguments));
	  }
	
	  _createClass(CardActions, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          children = _props.children,
	          isExpander = _props.isExpander,
	          expander = _props.expander,
	          centered = _props.centered,
	          stacked = _props.stacked,
	          props = _objectWithoutProperties(_props, ['className', 'children', 'isExpander', 'expander', 'centered', 'stacked']);
	
	      return _react2.default.createElement(
	        'section',
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-dialog-footer--card', {
	            'md-dialog-footer--inline': !stacked,
	            'md-dialog-footer--stacked': stacked,
	            'md-dialog-footer--card-centered': centered
	          }, className)
	        }),
	        children,
	        isExpander || expander && _react2.default.createElement(_CardExpander2.default, null)
	      );
	    }
	  }]);
	
	  return CardActions;
	}(_react.Component);
	
	CardActions.propTypes = {
	  /**
	   * Boolean if this component should act as an expander and inject the
	   * `CardExpander`.
	   */
	  expander: _propTypes2.default.bool,
	
	  /**
	   * An optional className to apply to the actions container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An actions to display.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the actions should be centered.
	   */
	  centered: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the actions should be stacked.
	   */
	  stacked: _propTypes2.default.bool,
	
	  isExpander: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `expander` instead')
	};
	exports.default = CardActions;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _contextTypes = __webpack_require__(92);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The CardExpander component is just a simple `IconButton` that
	 * gets generated through the `Card`'s `contextTypes`. Props are not used
	 * at all.
	 *
	 * Any component below a component that has this component inject into it
	 * and has the prop `expandable={true}` will be toggleable when this is clicked.
	 *
	 * You can manually inject the `CardExpander` component yourself if you want to
	 * use a component that is not a `CardActions` or a `CardTitle`.
	 */
	var CardExpander = function (_Component) {
	  _inherits(CardExpander, _Component);
	
	  function CardExpander() {
	    _classCallCheck(this, CardExpander);
	
	    return _possibleConstructorReturn(this, (CardExpander.__proto__ || Object.getPrototypeOf(CardExpander)).apply(this, arguments));
	  }
	
	  _createClass(CardExpander, [{
	    key: 'render',
	    value: function render() {
	      var _context = this.context,
	          expanded = _context.expanded,
	          onExpandClick = _context.onExpandClick,
	          iconClassName = _context.iconClassName,
	          iconChildren = _context.iconChildren,
	          tooltipPosition = _context.tooltipPosition,
	          tooltipLabel = _context.tooltipLabel,
	          tooltipDelay = _context.tooltipDelay;
	
	
	      return _react2.default.createElement(
	        _Button2.default,
	        {
	          icon: true,
	          className: (0, _classnames2.default)('md-collapser md-collapser--card', {
	            'md-collapser--flipped': expanded
	          }),
	          onClick: onExpandClick,
	          iconClassName: iconClassName,
	          tooltipLabel: tooltipLabel,
	          tooltipDelay: tooltipDelay,
	          tooltipPosition: tooltipPosition
	        },
	        iconChildren
	      );
	    }
	  }]);
	
	  return CardExpander;
	}(_react.Component);
	
	CardExpander.contextTypes = _contextTypes2.default;
	exports.default = CardExpander;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _CardTitleBlock = __webpack_require__(91);
	
	var _CardTitleBlock2 = _interopRequireDefault(_CardTitleBlock);
	
	var _CardExpander = __webpack_require__(89);
	
	var _CardExpander2 = _interopRequireDefault(_CardExpander);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `CardTitle` component is used to render a title in a Card along
	 * with an optional subtitle or avatar.
	 */
	var CardTitle = function (_Component) {
	  _inherits(CardTitle, _Component);
	
	  function CardTitle() {
	    _classCallCheck(this, CardTitle);
	
	    return _possibleConstructorReturn(this, (CardTitle.__proto__ || Object.getPrototypeOf(CardTitle)).apply(this, arguments));
	  }
	
	  _createClass(CardTitle, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          id = _props.id,
	          style = _props.style,
	          className = _props.className,
	          title = _props.title,
	          subtitle = _props.subtitle,
	          expander = _props.expander,
	          isExpander = _props.isExpander,
	          children = _props.children,
	          props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'title', 'subtitle', 'expander', 'isExpander', 'children']);
	
	      delete props.avatar;
	      var avatar = this.props.avatar;
	
	      if (avatar) {
	        var avatarClassName = _react.Children.only(avatar).props.className;
	
	        avatar = (0, _react.cloneElement)(avatar, {
	          className: (0, _classnames2.default)('md-avatar--card', avatarClassName)
	        });
	      }
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, {
	          style: style,
	          className: (0, _classnames2.default)('md-card-title', {
	            'md-card-title--primary': !avatar
	          }, className)
	        }),
	        avatar,
	        _react2.default.createElement(_CardTitleBlock2.default, { id: id, title: title, subtitle: subtitle, avatar: !!avatar }),
	        children,
	        isExpander || expander && _react2.default.createElement(_CardExpander2.default, null)
	      );
	    }
	  }]);
	
	  return CardTitle;
	}(_react.Component);
	
	CardTitle.propTypes = {
	  /**
	   * An optional id to add to the `title`.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The title to display.
	   */
	  title: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional subtitle to display.
	   */
	  subtitle: _propTypes2.default.node,
	
	  /**
	   * Any additional children to display in the title block
	   * after the avatar, title, and subtitle.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * An optional avatar to display before the title and subtitle.
	   */
	  avatar: _propTypes2.default.element,
	
	  /**
	   * Boolean if the `CardTitle` component should inject a button
	   * for expanding all children below it.
	   */
	  expander: _propTypes2.default.bool,
	
	  isExpander: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `expander` instead')
	};
	exports.default = CardTitle;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CardTitleBlock = function (_PureComponent) {
	  _inherits(CardTitleBlock, _PureComponent);
	
	  function CardTitleBlock() {
	    _classCallCheck(this, CardTitleBlock);
	
	    return _possibleConstructorReturn(this, (CardTitleBlock.__proto__ || Object.getPrototypeOf(CardTitleBlock)).apply(this, arguments));
	  }
	
	  _createClass(CardTitleBlock, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          id = _props.id,
	          subtitle = _props.subtitle,
	          avatar = _props.avatar;
	      var title = this.props.title;
	
	      title = _react2.default.createElement(
	        'h2',
	        {
	          id: id,
	          className: (0, _classnames2.default)('md-card-title--title md-text', {
	            'md-card-title--large': !avatar
	          })
	        },
	        title
	      );
	
	      if (!subtitle) {
	        return title;
	      }
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'md-card-title--title-block' },
	        title,
	        _react2.default.createElement(
	          'h3',
	          { className: 'md-card-title--title md-text--secondary' },
	          subtitle
	        )
	      );
	    }
	  }]);
	
	  return CardTitleBlock;
	}(_react.PureComponent);
	
	CardTitleBlock.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  title: _propTypes2.default.node.isRequired,
	  subtitle: _propTypes2.default.node,
	  avatar: _propTypes2.default.bool
	};
	exports.default = CardTitleBlock;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  onExpandClick: _propTypes2.default.func,
	  expanded: _propTypes2.default.bool,
	  iconClassName: _propTypes2.default.string,
	  iconChildren: _propTypes2.default.node,
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	  tooltipLabel: _propTypes2.default.node,
	  tooltipDelay: _propTypes2.default.number
	};

/***/ },
/* 93 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  // Permanent drawers
	  FULL_HEIGHT: 'full-height',
	  CLIPPED: 'clipped',
	  FLOATING: 'floating',
	
	  // Persistent drawers
	  PERSISTENT: 'persistent',
	  PERSISTENT_MINI: 'persistent-mini',
	
	  // Temporary
	  TEMPORARY: 'temporary',
	  TEMPORARY_MINI: 'temporary-mini'
	};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isTemporary = isTemporary;
	exports.isPersistent = isPersistent;
	exports.isPermanent = isPermanent;
	exports.isMini = isMini;
	
	var _DrawerTypes = __webpack_require__(93);
	
	var _DrawerTypes2 = _interopRequireDefault(_DrawerTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FULL_HEIGHT = _DrawerTypes2.default.FULL_HEIGHT,
	    CLIPPED = _DrawerTypes2.default.CLIPPED,
	    FLOATING = _DrawerTypes2.default.FLOATING,
	    PERSISTENT = _DrawerTypes2.default.PERSISTENT,
	    PERSISTENT_MINI = _DrawerTypes2.default.PERSISTENT_MINI,
	    TEMPORARY = _DrawerTypes2.default.TEMPORARY,
	    TEMPORARY_MINI = _DrawerTypes2.default.TEMPORARY_MINI;
	function isTemporary(type) {
	  return [TEMPORARY, TEMPORARY_MINI].indexOf(type) !== -1;
	}
	
	function isPersistent(type) {
	  return [PERSISTENT, PERSISTENT_MINI].indexOf(type) !== -1;
	}
	
	function isPermanent(type) {
	  return [FULL_HEIGHT, CLIPPED, FLOATING].indexOf(type) !== -1;
	}
	
	function isMini(type) {
	  return [PERSISTENT_MINI, TEMPORARY_MINI].indexOf(type) !== -1;
	}

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _keyCodes = __webpack_require__(6);
	
	var _captureNextEvent = __webpack_require__(36);
	
	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _IconSeparator = __webpack_require__(26);
	
	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `FileInput` component is used as simple styling for the `<input type="file" />`.
	 * It will style the input as a raised button by default.
	 */
	var FileInput = function (_PureComponent) {
	  _inherits(FileInput, _PureComponent);
	
	  function FileInput(props) {
	    _classCallCheck(this, FileInput);
	
	    var _this = _possibleConstructorReturn(this, (FileInput.__proto__ || Object.getPrototypeOf(FileInput)).call(this, props));
	
	    _this.state = { hover: false, pressed: false };
	
	    _this._blur = _this._blur.bind(_this);
	    _this._handleChange = _this._handleChange.bind(_this);
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleMouseUp = _this._handleMouseUp.bind(_this);
	    _this._handleMouseDown = _this._handleMouseDown.bind(_this);
	    _this._handleTouchEnd = _this._handleTouchEnd.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    return _this;
	  }
	
	  _createClass(FileInput, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.disabled && !nextProps.disabled && this.state.hover) {
	        this.setState({ hover: false });
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var _this2 = this;
	
	      // I honestly don't remember why this was implemented, but it was copied from the Button
	      // component
	      if (!this.state.pressed && nextState.pressed) {
	        this._timeout = setTimeout(function () {
	          _this2._timeout = null;
	          if (_this2._attemptedBlur) {
	            _this2._attemptedBlur = false;
	
	            _this2.setState({ pressed: false });
	          }
	        }, 450);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	
	      window.removeEventListener('click', this._blur);
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(e) {
	      var _props = this.props,
	          multiple = _props.multiple,
	          onChange = _props.onChange;
	      var files = e.target.files;
	
	      if (!multiple) {
	        onChange(files[0] || null, e);
	      } else {
	        onChange(Array.prototype.slice.call(files), e);
	      }
	    }
	  }, {
	    key: '_blur',
	    value: function _blur() {
	      if (this.props.disabled) {
	        return;
	      }
	
	      if (this._timeout) {
	        this._attemptedBlur = true;
	      } else {
	        this.setState({ pressed: false });
	      }
	    }
	  }, {
	    key: '_handleMouseUp',
	    value: function _handleMouseUp(e) {
	      if (this.props.onMouseUp) {
	        this.props.onMouseUp(e);
	      }
	
	      this._blur();
	    }
	  }, {
	    key: '_handleMouseDown',
	    value: function _handleMouseDown(e) {
	      if (this.props.onMouseDown) {
	        this.props.onMouseDown(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ pressed: true });
	      }
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      if (this.props.onTouchStart) {
	        this.props.onTouchStart(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ pressed: true });
	      }
	    }
	  }, {
	    key: '_handleTouchEnd',
	    value: function _handleTouchEnd(e) {
	      if (this.props.onTouchEnd) {
	        this.props.onTouchEnd(e);
	      }
	
	      this._blur();
	      (0, _captureNextEvent2.default)('mouseover');
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      if (this.props.onKeyUp) {
	        this.props.onKeyUp(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        window.addEventListener('click', this._blur);
	        this.setState({ pressed: true });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (this.props.onKeyDown) {
	        this.props.onKeyDown(e);
	      }
	
	      var key = e.which || e.keyCode;
	
	      if (key === _keyCodes.TAB) {
	        window.removeEventListener('click', this._blur);
	        this.setState({ pressed: false });
	      } else if (key === _keyCodes.SPACE || key === _keyCodes.ENTER) {
	        e.preventDefault();
	        e.target.click();
	      }
	    }
	  }, {
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ hover: true });
	      }
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ hover: false });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          hover = _state.hover,
	          pressed = _state.pressed;
	
	      var _props2 = this.props,
	          style = _props2.style,
	          className = _props2.className,
	          label = _props2.label,
	          iconChildren = _props2.iconChildren,
	          iconClassName = _props2.iconClassName,
	          primary = _props2.primary,
	          secondary = _props2.secondary,
	          flat = _props2.flat,
	          id = _props2.id,
	          name = _props2.name,
	          iconBefore = _props2.iconBefore,
	          disabled = _props2.disabled,
	          accept = _props2.accept,
	          multiple = _props2.multiple,
	          props = _objectWithoutProperties(_props2, ['style', 'className', 'label', 'iconChildren', 'iconClassName', 'primary', 'secondary', 'flat', 'id', 'name', 'iconBefore', 'disabled', 'accept', 'multiple']);
	
	      delete props.onChange;
	      delete props.onKeyUp;
	      delete props.onKeyDown;
	      delete props.onMouseUp;
	      delete props.onMouseDown;
	      delete props.onMouseOver;
	      delete props.onMouseLeave;
	      delete props.onTouchStart;
	      delete props.onTouchEnd;
	
	      var icon = !iconClassName && !iconChildren ? null : _react2.default.createElement(
	        _FontIcon2.default,
	        { iconClassName: iconClassName },
	        iconChildren
	      );
	
	      var themeClassNames = !disabled && (0, _classnames2.default)({
	        'md-text--theme-primary md-ink--primary': flat && primary,
	        'md-text--theme-secondary md-ink--secondary': flat && secondary,
	        'md-background--primary md-background--primary-hover': !flat && primary,
	        'md-background--secondary md-background--secondary-hover': !flat && secondary,
	        'md-btn--color-primary-active': flat && hover && primary,
	        'md-btn--color-secondary-active': flat && hover && secondary
	      });
	
	      var labelChildren = label;
	      if (icon) {
	        labelChildren = _react2.default.createElement(
	          _IconSeparator2.default,
	          { label: label, iconBefore: iconBefore },
	          icon
	        );
	      }
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, {
	          style: style,
	          className: (0, _classnames2.default)('md-inline-block md-file-input-container', className)
	        }),
	        _react2.default.createElement(
	          _AccessibleFakeInkedButton2.default,
	          {
	            component: 'label',
	            htmlFor: id,
	            disabled: disabled,
	            onTouchStart: this._handleTouchStart,
	            onTouchEnd: this._handleTouchEnd,
	            onMouseDown: this._handleMouseDown,
	            onMouseUp: this._handleMouseUp,
	            onKeyDown: this._handleKeyDown,
	            onKeyUp: this._handleKeyUp,
	            onMouseOver: this._handleMouseOver,
	            onMouseLeave: this._handleMouseLeave,
	            className: (0, _classnames2.default)('md-btn md-btn--' + (flat || disabled ? 'flat' : 'raised') + ' md-btn--text', themeClassNames, {
	              'md-text': !disabled,
	              'md-text--disabled': disabled,
	              'md-btn--raised-disabled': disabled && !flat,
	              'md-btn--raised-pressed': !disabled && !flat && pressed
	            })
	          },
	          labelChildren
	        ),
	        _react2.default.createElement('input', {
	          id: id,
	          name: name,
	          accept: accept,
	          type: 'file',
	          multiple: multiple,
	          disabled: disabled,
	          'aria-hidden': 'true',
	          className: 'md-file-input',
	          onChange: this._handleChange
	        })
	      );
	    }
	  }]);
	
	  return FileInput;
	}(_react.PureComponent);
	
	FileInput.propTypes = {
	  /**
	   * The id for the text field. This is required for a11y and to get the `input type="file"` to
	   * open.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
	
	  /**
	   * An optional name to provide to the input.
	   */
	  name: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if the `FileInput` should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `FileInput` should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `FileInput` should be styled as a flat button instead of a
	   * raised button.
	   */
	  flat: _propTypes2.default.bool,
	
	  /**
	   * This should be a comma separated list of Media Types that the `FileInput` can
	   * accept. If this prop is left blank, any file will be accepted.
	   *
	   * The values can either be:
	   * - A file extension
	   * - audio/*
	   * - video/*
	   * - image/*
	   * - any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)
	   *
	   * > NOTE: IE does not enforce this.
	   */
	  accept: _propTypes2.default.string,
	
	  /**
	   * Boolean if multiple files will be accepted.
	   */
	  multiple: _propTypes2.default.bool,
	
	  /**
	   * A label to display on the `FileInput`. This will be used with the `AccessibleFakeInkedButton` component to
	   * create a `<label>` for the `<input type="file">`.
	   */
	  label: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the icons hould appear before the label.
	   */
	  iconBefore: _propTypes2.default.bool,
	
	  /**
	   * The icon children to use for the upload icon.
	   */
	  iconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className to use for the upload icon.
	   */
	  iconClassName: _propTypes2.default.string,
	
	  /**
	   * A function to call when the value of the input changes. This will
	   * be triggered when the user selects a new file or cancels the new file selection.
	   *
	   * This function will be given the new [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)
	   * as an array and the change event. If this is not a multiple file input, only the
	   * newly selected File will be given instead of a list of one file. Since this is an
	   * `input` tag, the user will not be able to select the same file multiple times unless
	   * you manually clear the input's value.
	   *
	   * > NOTE: If the user hits cancel, null will be given for a single file input.
	   *
	   * ```js
	   * onChange(files, e);
	   * ```
	   */
	  onChange: _propTypes2.default.func.isRequired,
	
	  /**
	   * Boolean if the `FileInput` is currently disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when they keyup event is triggerred on the file input's label.
	   */
	  onKeyUp: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when they keydown event is triggerred on the file input's label.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when they mouseup event is triggerred on the file input's label.
	   */
	  onMouseUp: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when they mousedown event is triggerred on the file input's label.
	   */
	  onMouseDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when they mouseover event is triggerred on the file input's label.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when they mouseleave event is triggerred on the file input's label.
	   */
	  onMouseLeave: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when they touchend event is triggerred on the file input's label.
	   */
	  onTouchEnd: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when they touchstart event is triggerred on the file input's label.
	   */
	  onTouchStart: _propTypes2.default.func
	};
	FileInput.defaultProps = {
	  label: 'Select a file',
	  iconChildren: 'file_upload'
	};
	exports.default = FileInput;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _FontIcon2.default;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _invariant = __webpack_require__(339);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _isValidFocusKeypress = __webpack_require__(119);
	
	var _isValidFocusKeypress2 = _interopRequireDefault(_isValidFocusKeypress);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var hrefables = ['a', 'area'].map(function (tag) {
	  return tag + '[href],';
	}).join('');
	var disableables = ['button', 'input', 'textarea', 'select'].map(function (tag) {
	  return tag + ':not([disabled]),';
	}).join('');
	var FOCUSABLE_QUERY = '' + hrefables + disableables + '*[tabIndex]';
	
	/**
	 * This component is used for keeping the focus within some container. When the container
	 * is mounted and the `focusOnMount` prop is `true`, it will attempt to focus either:
	 * - an element that matches `document.getElementById(this.props.initialFocus)`
	 * - an element that matches `this._container.querySelector(this.props.initialFocus)`
	 * - the first focusable element in it's children (if `this.props.initialFocus` is omitted)
	 */
	
	var FocusContainer = function (_PureComponent) {
	  _inherits(FocusContainer, _PureComponent);
	
	  function FocusContainer(props) {
	    _classCallCheck(this, FocusContainer);
	
	    var _this = _possibleConstructorReturn(this, (FocusContainer.__proto__ || Object.getPrototypeOf(FocusContainer)).call(this, props));
	
	    _this.state = {};
	    _this._containFocus = _this._containFocus.bind(_this);
	    _this._handleFocus = _this._handleFocus.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._enableFocusTrap = _this._enableFocusTrap.bind(_this);
	    _this._disableFocusTrap = _this._disableFocusTrap.bind(_this);
	    _this._attemptInitialFocus = _this._attemptInitialFocus.bind(_this);
	    return _this;
	  }
	
	  _createClass(FocusContainer, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.containFocus === nextProps.containFocus) {
	        return;
	      }
	
	      if (this.props.containFocus) {
	        this._enableFocusTrap();
	        this._attemptInitialFocus();
	      } else {
	        this._disableFocusTrap();
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this._container) {
	        this._focusables = Array.prototype.slice.call(this._container.querySelectorAll(FOCUSABLE_QUERY)).filter(function (el) {
	          return el.tabIndex !== -1;
	        });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._container) {
	        this._disableFocusTrap();
	      }
	    }
	  }, {
	    key: '_enableFocusTrap',
	    value: function _enableFocusTrap() {
	      window.addEventListener('focus', this._handleFocus, true);
	      window.addEventListener('keydown', this._handleKeyDown, true);
	    }
	  }, {
	    key: '_disableFocusTrap',
	    value: function _disableFocusTrap() {
	      window.removeEventListener('focus', this._handleFocus, true);
	      window.removeEventListener('keydown', this._handleKeyDown, true);
	    }
	  }, {
	    key: '_attemptInitialFocus',
	    value: function _attemptInitialFocus() {
	      if (!this._container) {
	        return;
	      }
	
	      var initialFocus = this.props.initialFocus;
	
	
	      var toFocus = initialFocus ? document.getElementById(initialFocus) || this._container.querySelector(initialFocus) : this._focusables[0];
	
	      var debugError = void 0;
	      if (!toFocus && initialFocus) {
	        debugError = ' The `initialFocus` did not match a document\'s `id` or was an invalid ';
	        debugError += '`querySelector` for the container. `initialFocus`: `' + initialFocus + '`. ';
	        debugError += 'If this was supposed to be an `id`, make sure to prefix with the `#` symbol.';
	      }
	
	      (0, _invariant2.default)(toFocus, 'You specified that the `FocusContainer` should focus an element on mount, ' + 'but a focusable element was not found in the children. This could be because ' + 'the `initialFocus` prop is an invalid id or query selector, or the children ' + ('do not contain a valid focusable element.' + debugError));
	
	      if (toFocus) {
	        toFocus.focus();
	      }
	    }
	
	    /**
	     * Manages the event listeners to contain the focus within some container.  When the container
	     * ref is not null, the container has mounted and then attempts to focus an element inside
	     * if the `focusOnMount` prop is `true`.
	     */
	
	  }, {
	    key: '_containFocus',
	    value: function _containFocus(containerRef) {
	      if (containerRef === null) {
	        this._container = null;
	        this._disableFocusTrap();
	        return;
	      }
	
	      var focusOnMount = this.props.focusOnMount;
	
	      this._container = (0, _reactDom.findDOMNode)(containerRef);
	      this._focusables = Array.prototype.slice.call(this._container.querySelectorAll(FOCUSABLE_QUERY)).filter(function (el) {
	        return el.tabIndex !== -1;
	      });
	
	      if (focusOnMount) {
	        this._attemptInitialFocus();
	      }
	
	      this._enableFocusTrap();
	    }
	  }, {
	    key: '_handleFocus',
	    value: function _handleFocus(e) {
	      if (e.target !== window && this._shifted && this._container && !this._container.contains(e.target)) {
	        // Prevent the default focus action and focus the last focusable item
	        e.stopPropagation();
	        this._focusables[this._focusables.length - 1].focus();
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      this._shifted = e.shiftKey;
	      if (!(0, _isValidFocusKeypress2.default)(e, this.props.additionalFocusKeys)) {
	        return;
	      }
	
	      var target = e.target,
	          shiftKey = e.shiftKey;
	
	      var _focusables = _toArray(this._focusables),
	          first = _focusables[0],
	          focusables = _focusables.slice(1);
	
	      var last = focusables[focusables.length - 1];
	
	      if (shiftKey && target === first) {
	        e.preventDefault();
	        last.focus();
	      } else if (!shiftKey && target === last) {
	        e.preventDefault();
	        first.focus();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Component = _props.component,
	          props = _objectWithoutProperties(_props, ['component']);
	
	      delete props.initialFocus;
	      delete props.focusOnMount;
	      delete props.containFocus;
	      delete props.additionalFocusKeys;
	
	      return _react2.default.createElement(Component, _extends({}, props, { ref: this._containFocus }));
	    }
	  }]);
	
	  return FocusContainer;
	}(_react.PureComponent);
	
	FocusContainer.propTypes = {
	  /**
	   * The component to render as. This can be a React DOM element or
	   * a react Component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,
	
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The children to display.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * An optional id string or a query selector string to use for the initial focus.
	   * This will only be triggered if the `focusOnMount` prop is `true`. If this is
	   * omitted and the `focusOnMount` prop is `true`, the first focusable element in the
	   * container will be focused.
	   *
	   * Examples:
	   *
	   * ```js
	   * initialFocus="#someAmazingId"
	   * // or
	   * initialFocus=".md-btn,.md-list-tile"
	   * ```
	   */
	  initialFocus: _propTypes2.default.string,
	
	  /**
	   * Boolean if an element in the container should be focused when mounted.
	   */
	  focusOnMount: _propTypes2.default.bool,
	
	  /**
	   * An optional list of additional key codes to use for focus events.
	   */
	  additionalFocusKeys: _propTypes2.default.arrayOf(_propTypes2.default.number),
	
	  /**
	   * Boolean if the focus container should start or stop containing the focus within the container.
	   * This is useful for changing the focus requirements after mount.
	   */
	  containFocus: _propTypes2.default.bool
	};
	FocusContainer.defaultProps = {
	  component: 'div'
	};
	exports.default = FocusContainer;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `ListItemText` component is used to render the `primaryText` and an optional
	 * `secondaryText` for a `ListItem`.
	 */
	var ListItemText = function (_PureComponent) {
	  _inherits(ListItemText, _PureComponent);
	
	  function ListItemText() {
	    _classCallCheck(this, ListItemText);
	
	    return _possibleConstructorReturn(this, (ListItemText.__proto__ || Object.getPrototypeOf(ListItemText)).apply(this, arguments));
	  }
	
	  _createClass(ListItemText, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          active = _props.active,
	          activeClassName = _props.activeClassName,
	          disabled = _props.disabled,
	          primaryText = _props.primaryText,
	          secondaryText = _props.secondaryText,
	          className = _props.className,
	          threeLines = _props.threeLines,
	          props = _objectWithoutProperties(_props, ['active', 'activeClassName', 'disabled', 'primaryText', 'secondaryText', 'className', 'threeLines']);
	
	      var secondaryTextNode = void 0;
	      if (secondaryText) {
	        secondaryTextNode = _react2.default.createElement(
	          'div',
	          {
	            className: (0, _classnames2.default)('md-tile-text--secondary', {
	              'md-text--disabled': disabled,
	              'md-text--secondary': !disabled,
	              'md-tile-text--three-lines': threeLines
	            })
	          },
	          secondaryText
	        );
	      }
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, { className: (0, _classnames2.default)('md-tile-content', className) }),
	        _react2.default.createElement(
	          'div',
	          {
	            className: (0, _classnames2.default)('md-tile-text--primary', _defineProperty({
	              'md-text--disabled': disabled,
	              'md-text': !disabled && !active
	            }, activeClassName, !disabled && active))
	          },
	          primaryText
	        ),
	        secondaryTextNode
	      );
	    }
	  }]);
	
	  return ListItemText;
	}(_react.PureComponent);
	
	ListItemText.propTypes = {
	  active: _propTypes2.default.bool,
	  activeClassName: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  primaryText: _propTypes2.default.node.isRequired,
	  secondaryText: _propTypes2.default.node,
	  className: _propTypes2.default.string,
	  threeLines: _propTypes2.default.bool
	};
	exports.default = ListItemText;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function validateAspectRatio(props, propName, component) {
	  var _PropTypes$string;
	
	  var value = props[propName];
	
	  for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	    args[_key - 3] = arguments[_key];
	  }
	
	  var err = (_PropTypes$string = _propTypes2.default.string).isRequired.apply(_PropTypes$string, [props, propName, component].concat(args));
	  if (!err && value.split('-').length !== 2) {
	    err = new Error('Your provided an `' + propName + '` prop to the ' + component + ' that is not a valid ' + ('aspect ratio `' + value + '`. This should be in the form of \'{width}-{height}\'.'));
	  }
	
	  return err;
	}
	
	/**
	 * The `Media` component is used to display images, iframes, ...media. Who'da thunk?
	 */
	
	var Media = function (_PureComponent) {
	  _inherits(Media, _PureComponent);
	
	  function Media() {
	    _classCallCheck(this, Media);
	
	    return _possibleConstructorReturn(this, (Media.__proto__ || Object.getPrototypeOf(Media)).apply(this, arguments));
	  }
	
	  _createClass(Media, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Component = _props.component,
	          className = _props.className,
	          children = _props.children,
	          forceAspect = _props.forceAspect,
	          aspectRatio = _props.aspectRatio,
	          props = _objectWithoutProperties(_props, ['component', 'className', 'children', 'forceAspect', 'aspectRatio']);
	
	      delete props.expandable;
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-media', _defineProperty({}, 'md-media--' + aspectRatio, forceAspect), className)
	        }),
	        children
	      );
	    }
	  }]);
	
	  return Media;
	}(_react.PureComponent);
	
	Media.propTypes = {
	  /**
	   * An optional className to apply to the card media component.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Any media to display.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the aspect ratio should be forced.
	   */
	  forceAspect: _propTypes2.default.bool,
	
	  /**
	   * The aspect ratio to use.
	   */
	  aspectRatio: validateAspectRatio,
	
	  /**
	   * Boolean if this component should be expandable when there is a `CardExpander`
	   * above it in the `Card`.
	   */
	  expandable: _propTypes2.default.bool,
	
	  /**
	   * The component to render the card media as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Media.defaultProps = {
	  forceAspect: true,
	  aspectRatio: '16-9',
	  component: 'section'
	};
	exports.default = Media;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `MediaOverlay` component is just a very simple wrapper that adds the
	 * `.md-media-overlay` class name to a div. The overlay will be positioned
	 * at the bottom of the `Media` by default.
	 */
	var MediaOverlay = function (_PureComponent) {
	  _inherits(MediaOverlay, _PureComponent);
	
	  function MediaOverlay() {
	    _classCallCheck(this, MediaOverlay);
	
	    return _possibleConstructorReturn(this, (MediaOverlay.__proto__ || Object.getPrototypeOf(MediaOverlay)).apply(this, arguments));
	  }
	
	  _createClass(MediaOverlay, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          Component = _props.component,
	          props = _objectWithoutProperties(_props, ['className', 'component']);
	
	      return _react2.default.createElement(Component, _extends({ className: (0, _classnames2.default)('md-media-overlay', className) }, props));
	    }
	  }]);
	
	  return MediaOverlay;
	}(_react.PureComponent);
	
	MediaOverlay.propTypes = {
	  /**
	   * An optional style to apply to the overlay.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the overlay.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Any children to display in the overlay. This is _normally_ a `CardTitle` component
	   * or some buttons.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The component to be rendered as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	MediaOverlay.defaultProps = {
	  component: 'div'
	};
	exports.default = MediaOverlay;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _Positions = __webpack_require__(47);
	
	var _Positions2 = _interopRequireDefault(_Positions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  menuCascading: _propTypes2.default.bool,
	  menuPosition: _propTypes2.default.oneOf([_Positions2.default.TOP_LEFT, _Positions2.default.TOP_RIGHT, _Positions2.default.BOTTOM_LEFT, _Positions2.default.BOTTOM_RIGHT, _Positions2.default.CONTEXT, _Positions2.default.BELOW]),
	  listLevel: _propTypes2.default.number
	};

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A button used to close the persistent navigation drawer. The button will
	 * be generated based on the `NavigationDrawer`'s `contextTypes`.
	 *
	 * This component is really only used if you are using a `persistent` drawer and you
	 * manually created the `drawerHeader` for the `NavigationDrawer`.
	 */
	var CloseButton = function (_PureComponent) {
	  _inherits(CloseButton, _PureComponent);
	
	  function CloseButton(props) {
	    _classCallCheck(this, CloseButton);
	
	    var _this = _possibleConstructorReturn(this, (CloseButton.__proto__ || Object.getPrototypeOf(CloseButton)).call(this, props));
	
	    _this._handleClick = _this._handleClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(CloseButton, [{
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      if (this.context.onCloseClick) {
	        this.context.onCloseClick(e);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _context = this.context,
	          iconClassName = _context.closeIconClassName,
	          children = _context.closeChildren;
	
	
	      return _react2.default.createElement(
	        _Button2.default,
	        _extends({}, this.props, {
	          icon: true,
	          key: 'close',
	          iconClassName: iconClassName,
	          onClick: this._handleClick
	        }),
	        children
	      );
	    }
	  }]);
	
	  return CloseButton;
	}(_react.PureComponent);
	
	CloseButton.propTypes = {
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional additional function to call when the `click` event is triggered.
	   */
	  onClick: _propTypes2.default.func
	};
	CloseButton.contextTypes = {
	  closeIconClassName: _propTypes2.default.string,
	  closeChildren: _propTypes2.default.node,
	  onCloseClick: _propTypes2.default.func
	};
	exports.default = CloseButton;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This is an accessibility only component that should be used in the `NavigationDrawer`
	 * component. It allows keyboard users to quickly jump to the main content.
	 *
	 * This component relies on the `contextTypes` of the `NavigationDrawer` to work. If this is going
	 * to be used outside of that component, you will need to specify an `id` and `label` contextType
	 * to pass to this component.
	 */
	var JumpToContentLink = function (_PureComponent) {
	  _inherits(JumpToContentLink, _PureComponent);
	
	  function JumpToContentLink(props) {
	    _classCallCheck(this, JumpToContentLink);
	
	    var _this = _possibleConstructorReturn(this, (JumpToContentLink.__proto__ || Object.getPrototypeOf(JumpToContentLink)).call(this, props));
	
	    _this._handleClick = _this._handleClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(JumpToContentLink, [{
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      document.getElementById(this.context.id).focus();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['className']);
	
	      var _context = this.context,
	          id = _context.id,
	          label = _context.label;
	
	      return _react2.default.createElement(
	        'a',
	        _extends({}, props, {
	          id: 'skipTo' + id,
	          href: '#' + id,
	          onClick: this._handleClick,
	          className: (0, _classnames2.default)('md-content-jump', className)
	        }),
	        label
	      );
	    }
	  }]);
	
	  return JumpToContentLink;
	}(_react.PureComponent);
	
	JumpToContentLink.propTypes = {
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional function to call when the linked is clicked.
	   */
	  onClick: _propTypes2.default.func
	};
	JumpToContentLink.contextTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  label: _propTypes2.default.node.isRequired
	};
	exports.default = JumpToContentLink;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _minMaxLoop = __webpack_require__(274);
	
	var _minMaxLoop2 = _interopRequireDefault(_minMaxLoop);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _SelectionControl = __webpack_require__(29);
	
	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A custom PropTypes validator to make sure that each `control` in the `controls` prop
	 * contains the given `propName`, or the `SelectionControlGroup` has defined that prop.
	 */
	function requiredByAllControls(validator) {
	  return function validate(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    var err = validator.apply(undefined, [props, propName, component].concat(others));
	
	    if (!err && typeof props[propName] === 'undefined') {
	      var invalids = props.controls.filter(function (c) {
	        return !c[propName];
	      }).map(function (_, i) {
	        return i;
	      });
	      if (invalids.length) {
	        var invalidPrefix = invalids.length === props.controls.length ? 'All `controls`' : 'The `controls` at indexes `' + invalids.join('`, `') + '`';
	        var invalidMsg = invalidPrefix + ' are missing the `' + propName + '` prop.';
	
	        err = new Error('The `' + propName + '` prop is required to make `' + component + '` accessible for users of ' + ('assistive technologies such as screen readers. Either add the `' + propName + '` to the `' + component + '` ') + ('or add the `' + propName + '` to each `control` in the `controls` prop. ' + invalidMsg));
	      }
	    }
	
	    return err;
	  };
	}
	
	/**
	 * The `SelectionControlGroup` component is used to simplify the generation of a list
	 * of `SelectionControl`. Any common props are extracted to this component and passed
	 * to the `SelectionControl`.
	 */
	
	var SelectionControlGroup = function (_PureComponent) {
	  _inherits(SelectionControlGroup, _PureComponent);
	
	  function SelectionControlGroup(props) {
	    _classCallCheck(this, SelectionControlGroup);
	
	    var _this = _possibleConstructorReturn(this, (SelectionControlGroup.__proto__ || Object.getPrototypeOf(SelectionControlGroup)).call(this, props));
	
	    var radio = props.type === 'radio';
	    _this.state = {};
	
	    if (typeof props.value === 'undefined') {
	      var value = props.defaultValue;
	
	      if (typeof value === 'undefined') {
	        value = radio ? props.controls[0].value : '';
	      }
	
	      _this.state.value = value;
	    }
	
	    var groupValue = (0, _getField2.default)(props, _this.state, 'value');
	    props.controls.some(function (_ref, i) {
	      var value = _ref.value;
	
	      if (value === groupValue) {
	        _this._activeIndex = i;
	      }
	
	      return typeof _this._activeIndex !== 'undefined';
	    });
	
	    _this._handleChange = _this._handleChange.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    return _this;
	  }
	
	  _createClass(SelectionControlGroup, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._group = (0, _reactDom.findDOMNode)(this);
	    }
	  }, {
	    key: '_isChecked',
	    value: function _isChecked(value, controlValue, type) {
	      return type === 'radio' ? value === controlValue : value.split(',').indexOf(controlValue) !== -1;
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(e) {
	      var value = e.target.value;
	      if (this.props.type === 'checkbox') {
	        var checked = e.target.checked;
	
	
	        var values = (0, _getField2.default)(this.props, this.state, 'value').split(',');
	        var index = values.indexOf(value);
	        if (checked) {
	          values.push(value);
	        } else {
	          values.splice(index, 1);
	        }
	
	        value = values.join(',');
	      }
	
	      if (this.props.onChange) {
	        this.props.onChange(value, e);
	      }
	
	      if (typeof this.props.value === 'undefined') {
	        this.setState({ value: value });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (this.props.onKeyDown) {
	        this.props.onKeyDown(e);
	      }
	
	      var key = e.which || e.keyCode;
	      var dec = key === _keyCodes.UP || key === _keyCodes.LEFT;
	      var inc = key === _keyCodes.DOWN || key === _keyCodes.RIGHT;
	      if (!this._group || !dec && !inc) {
	        return;
	      }
	
	      e.preventDefault();
	      var radios = this._group.querySelectorAll('*[role="radio"]');
	      this._activeIndex = (0, _minMaxLoop2.default)(this._activeIndex, 0, radios.length - 1, inc);
	      radios[this._activeIndex].focus();
	      var value = this.props.controls[this._activeIndex].value;
	
	      if ((0, _getField2.default)(this.props, this.state, 'value') !== value) {
	        if (this.props.onChange) {
	          this.props.onChange(value, e);
	        }
	
	        if (typeof this.props.value === 'undefined') {
	          this.setState({ value: value });
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _props = this.props,
	          id = _props.id,
	          name = _props.name,
	          type = _props.type,
	          label = _props.label,
	          labelClassName = _props.labelClassName,
	          className = _props.className,
	          controlStyle = _props.controlStyle,
	          controlClassName = _props.controlClassName,
	          Component = _props.component,
	          LabelComponent = _props.labelComponent,
	          inline = _props.inline,
	          disabled = _props.disabled,
	          props = _objectWithoutProperties(_props, ['id', 'name', 'type', 'label', 'labelClassName', 'className', 'controlStyle', 'controlClassName', 'component', 'labelComponent', 'inline', 'disabled']);
	
	      delete props.value;
	      delete props.controls;
	      delete props.defaultValue;
	
	      var value = (0, _getField2.default)(this.props, this.state, 'value');
	      var radio = type === 'radio';
	
	      var controls = this.props.controls.map(function (control, i) {
	        var style = control.style;
	        if (controlStyle) {
	          style = style ? _extends({}, controlStyle, style) : controlStyle;
	        }
	
	        var checked = _this2._isChecked(value, control.value, type);
	        var controlProps = _extends({
	          id: '' + id + i,
	          key: 'control' + i,
	          name: '' + name + (type === 'checkbox' ? '[]' : ''),
	          type: type,
	          inline: inline,
	          disabled: disabled,
	          checked: checked,
	          tabIndex: !radio || checked ? undefined : -1
	        }, control, {
	          style: style,
	          className: (0, _classnames2.default)(controlClassName, control.className)
	        });
	
	        return _react2.default.createElement(_SelectionControl2.default, controlProps);
	      });
	
	      var ariaLabel = void 0;
	      if (label) {
	        ariaLabel = _react2.default.createElement(
	          LabelComponent,
	          { className: labelClassName },
	          label
	        );
	      }
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-selection-control-group', className),
	          onChange: this._handleChange,
	          onKeyDown: radio ? this._handleKeyDown : null
	        }),
	        ariaLabel,
	        controls
	      );
	    }
	  }]);
	
	  return SelectionControlGroup;
	}(_react.PureComponent);
	
	SelectionControlGroup.propTypes = {
	  /**
	   * An optional style to apply to the container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to every `SelectionControl`. This will be merged with any `style`
	   * that a `control` might have.
	   */
	  controlStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to every `SelectionControl`. This will be merged with any
	   * `className` that a `control` might have.
	   */
	  controlClassName: _propTypes2.default.string,
	
	  /**
	   * An optional base id to apply to each `SelectionControl`. When this is included, the id for
	   * each control will start with this and end with their current index. If this is ommitted,
	   * each `control` in the `controls` prop *must* have an `id` prop. This is required for
	   * accessibility.
	   */
	  id: requiredByAllControls(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is
	   * valid for a grouping.
	   */
	  type: _propTypes2.default.oneOf(['checkbox', 'radio']).isRequired,
	
	  /**
	   * The component to render the `SelectionControlGroup` in.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,
	
	  /**
	   * An optional label to display above the group of `SelectionControl`s.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * An optional className to apply to the node surrounding the `label` prop.
	   */
	  labelClassName: _propTypes2.default.string,
	
	  /**
	   * The component to render the optional `label` in.
	   */
	  labelComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,
	
	  /**
	   * An optional function to call when any `SelectionControl`'s `checked` state is changed
	   * in the group. If the `type` of the group is `radio`, the `value` of the `checked` radio
	   * will be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited
	   * string of all `checked` checkboxes values will be given.
	   *
	   * ```js
	   * // checkbox
	   * onChange('Alpha,Omega', changeEvent);
	   *
	   * // radio
	   * onChange('Omega', changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * A name to use for each `SelectionControl` in the group. If the `type` of the group is
	   * `checkbox`, the name will be updated to be an array name so that using
	   * `document.querySelector('input[name="yourName[]"].value` will give the comma-delimited
	   * string of checked checkboxes.
	   *
	   * It is either required to have this prop set or every `control` in the `controls` prop to
	   * have the `name` prop.
	   */
	  name: requiredByAllControls(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * The default value for the `SelectionControlGroup`. This can either be a single value
	   * or a comma-delimited string of checkbox values. When the `type` of the group is `radio`
	   * and the group is uncontrolled, it is recommened to set this prop. Otherwise the first
	   * value of the `controls` prop will be used as the defalt value.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional value to use for the `SelectionControlGroup`. This will make the component
	   * controlled and require the `onChange` prop to be defined. Like the `defaultValue`, this
	   * can either be a single value or a comma-delimited list of checkbox values.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]), 'onChange'),
	
	  /**
	   * A list of objects to create the `SelectControl` components. The shape of the object
	   * is the `propTypes` of the `SelectionControl` component, except that `value` prop is
	   * now required.
	   *
	   * The `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`.
	   */
	  controls: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	    key: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    label: _propTypes2.default.node.isRequired,
	    value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]).isRequired
	  })).isRequired,
	
	  /**
	   * Boolean if the `SelectionControl` should be displayed inline.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * Boolean if all the selection controls in the group are disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when the keydown event is triggered.
	   */
	  onKeyDown: _propTypes2.default.func
	};
	SelectionControlGroup.defaultProps = {
	  component: 'fieldset',
	  labelComponent: 'legend',
	  labelClassName: 'md-subheading-1'
	};
	exports.default = SelectionControlGroup;

/***/ },
/* 105 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isInvalidAnimate;
	var gcc = 'getComposedComponent';
	
	/**
	 * Just checks if the fab is actually a ref to the FAB Button.
	 */
	function isInvalidAnimate(fab) {
	  return typeof fab[gcc] !== 'function' || typeof fab[gcc]()[gcc] !== 'function' || typeof fab[gcc]()[gcc]()._animateForSnackbar !== 'function';
	}

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Subheader` component is generally used inside of lists or menus.
	 */
	var Subheader = function (_PureComponent) {
	  _inherits(Subheader, _PureComponent);
	
	  function Subheader() {
	    _classCallCheck(this, Subheader);
	
	    return _possibleConstructorReturn(this, (Subheader.__proto__ || Object.getPrototypeOf(Subheader)).apply(this, arguments));
	  }
	
	  _createClass(Subheader, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Component = _props.component,
	          inset = _props.inset,
	          primary = _props.primary,
	          primaryText = _props.primaryText,
	          className = _props.className,
	          children = _props.children,
	          props = _objectWithoutProperties(_props, ['component', 'inset', 'primary', 'primaryText', 'className', 'children']);
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-subheader', {
	            'md-text--secondary': !primary,
	            'md-text--theme-primary': primary,
	            'md-list-item--inset': inset
	          }, className)
	        }),
	        primaryText,
	        children
	      );
	    }
	  }]);
	
	  return Subheader;
	}(_react.PureComponent);
	
	Subheader.propTypes = {
	  /**
	   * An optional style to apply to the subheader.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the subheader.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if the subheader should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the subheader is inset in the list. This will add additional
	   * spacing to align the subheader.
	   */
	  inset: _propTypes2.default.bool,
	
	  /**
	   * The primary text to use in the subheader.
	   */
	  primaryText: _propTypes2.default.node.isRequired,
	
	  /**
	   * Any optional children to display after the `primaryText`. This prop is
	   * unrecommended.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The component to render the Subheader as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired
	};
	Subheader.defaultProps = {
	  component: 'li'
	};
	exports.default = Subheader;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Subheader = __webpack_require__(106);
	
	var _Subheader2 = _interopRequireDefault(_Subheader);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Subheader2.default;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _Menu = __webpack_require__(35);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	var _mapToListParts = __webpack_require__(127);
	
	var _mapToListParts2 = _interopRequireDefault(_mapToListParts);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `MenuTab` component is used when there are too many desktop tabs
	 * to be displayed without any overflow. If the `Tabs` component is used,
	 * this will automatically be included when the `menuOverflow` prop is true.
	 */
	var MenuTab = function (_PureComponent) {
	  _inherits(MenuTab, _PureComponent);
	
	  function MenuTab(props) {
	    _classCallCheck(this, MenuTab);
	
	    var _this = _possibleConstructorReturn(this, (MenuTab.__proto__ || Object.getPrototypeOf(MenuTab)).call(this, props));
	
	    _this.state = { isOpen: false };
	    _this._toggleOpen = _this._toggleOpen.bind(_this);
	    _this._handleClose = _this._handleClose.bind(_this);
	    return _this;
	  }
	
	  _createClass(MenuTab, [{
	    key: '_toggleOpen',
	    value: function _toggleOpen(e) {
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      this.setState({ isOpen: !this.state.isOpen });
	    }
	  }, {
	    key: '_handleClose',
	    value: function _handleClose() {
	      this.setState({ isOpen: false });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          id = _props.id,
	          style = _props.style,
	          className = _props.className,
	          tabStyle = _props.tabStyle,
	          tabClassName = _props.tabClassName,
	          tabs = _props.tabs,
	          label = _props.label,
	          activeTabIndex = _props.activeTabIndex,
	          overflowAtIndex = _props.overflowAtIndex,
	          props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'tabStyle', 'tabClassName', 'tabs', 'label', 'activeTabIndex', 'overflowAtIndex']);
	
	      var active = activeTabIndex >= overflowAtIndex;
	
	      var tab = _react2.default.createElement(
	        _AccessibleFakeInkedButton2.default,
	        _extends({}, props, {
	          onClick: this._toggleOpen,
	          style: tabStyle,
	          className: (0, _classnames2.default)('md-tab md-tab--menu', tabClassName)
	        }),
	        label
	      );
	
	      return _react2.default.createElement(
	        _Menu2.default,
	        {
	          id: id,
	          style: style,
	          className: (0, _classnames2.default)('md-menu--tab', {
	            'md-tab--active': active,
	            'md-tab--inactive': !active
	          }, className),
	          toggle: tab,
	          isOpen: this.state.isOpen,
	          onClose: this._handleClose
	        },
	        tabs.map(_mapToListParts2.default)
	      );
	    }
	  }]);
	
	  return MenuTab;
	}(_react.PureComponent);
	
	MenuTab.propTypes = {
	  /**
	   * An id to give the tab's menu.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * The current active tab index. This is used to determine which list item
	   * is active in the menu, and if the styles for an active tab should be applied
	   * to the menu.
	   */
	  activeTabIndex: _propTypes2.default.number.isRequired,
	
	  /**
	   * An tab index that caused the overflow to happen.
	   */
	  overflowAtIndex: _propTypes2.default.number.isRequired,
	
	  /**
	   * A list of tabs that should be rendered in the menu once opened. This can either
	   * be:
	   *
	   * - a `ListItem`, `Divider`, or `Subheader` component
	   * - a string to use as the `primaryText` for a list item
	   * - an object that defines props to generate a `ListItem`, `Divider`, or `Subheader` component
	   */
	  tabs: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string, _propTypes2.default.shape({
	    divider: _propTypes2.default.bool,
	    subheader: _propTypes2.default.bool,
	    primaryText: _propTypes2.default.node
	  })])).isRequired,
	
	  /**
	   * An optional style to apply to the menu.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the menu.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the tab in the menu.
	   */
	  tabStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the tab in the menu.
	   */
	  tabClassName: _propTypes2.default.string,
	
	  /**
	   * An optional function to call when the tab is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * The label to display in the tab. This should normally be some text with
	   * a drop down arrow next to it.
	   */
	  label: _propTypes2.default.node.isRequired
	};
	exports.default = MenuTab;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This component is just a simple accessibility wrapper when using tabs. If you use the
	 * `TabsContainer` component, you *should* not manually use this as the `TabsContainer`
	 * generates this for you.
	 */
	var TabPanel = function (_PureComponent) {
	  _inherits(TabPanel, _PureComponent);
	
	  function TabPanel() {
	    _classCallCheck(this, TabPanel);
	
	    return _possibleConstructorReturn(this, (TabPanel.__proto__ || Object.getPrototypeOf(TabPanel)).apply(this, arguments));
	  }
	
	  _createClass(TabPanel, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Component = _props.component,
	          id = _props.id,
	          active = _props.active,
	          className = _props.className,
	          controlledById = _props.controlledById,
	          children = _props.children,
	          props = _objectWithoutProperties(_props, ['component', 'id', 'active', 'className', 'controlledById', 'children']);
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          id: id,
	          className: (0, _classnames2.default)('md-tab-panel', className),
	          role: 'tabpanel',
	          'aria-hidden': !active,
	          'aria-labelledby': controlledById
	        }),
	        children
	      );
	    }
	  }]);
	
	  return TabPanel;
	}(_react.PureComponent);
	
	TabPanel.propTypes = {
	  /**
	   * An id for the panel. This is used for a11y. This should equal the `controlsId`
	   * of whichever tab's children will be placed in here.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * An id for the tab that owns this panel. This should equal the `id` of whichever
	   * tab's children will be placed in here.
	   */
	  controlledById: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The component to render the panel as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * Boolean if the panel is currently active. This is used to generated the `aria-hidden`
	   * attribute.
	   */
	  active: _propTypes2.default.bool,
	
	  /**
	   * Any children to display.
	   */
	  children: _propTypes2.default.node
	};
	TabPanel.defaultProps = {
	  component: 'div'
	};
	exports.default = TabPanel;

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var FloatingLabel = function (_PureComponent) {
	  _inherits(FloatingLabel, _PureComponent);
	
	  function FloatingLabel() {
	    _classCallCheck(this, FloatingLabel);
	
	    return _possibleConstructorReturn(this, (FloatingLabel.__proto__ || Object.getPrototypeOf(FloatingLabel)).apply(this, arguments));
	  }
	
	  _createClass(FloatingLabel, [{
	    key: 'render',
	    value: function render() {
	      var _cn;
	
	      var _props = this.props,
	          label = _props.label,
	          htmlFor = _props.htmlFor,
	          className = _props.className,
	          floating = _props.floating,
	          active = _props.active,
	          error = _props.error,
	          disabled = _props.disabled,
	          iconOffset = _props.iconOffset,
	          customSize = _props.customSize,
	          props = _objectWithoutProperties(_props, ['label', 'htmlFor', 'className', 'floating', 'active', 'error', 'disabled', 'iconOffset', 'customSize']);
	
	      if (!label) {
	        return null;
	      }
	
	      return _react2.default.createElement(
	        'label',
	        _extends({}, props, {
	          htmlFor: htmlFor,
	          className: (0, _classnames2.default)('md-floating-label', (_cn = {
	            'md-floating-label--active': !error && active,
	            'md-floating-label--error': !disabled && error,
	            'md-floating-label--inactive': !floating,
	            'md-floating-label--inactive-sized': !floating && !customSize
	          }, _defineProperty(_cn, 'md-floating-label--' + customSize, customSize), _defineProperty(_cn, 'md-floating-label--inactive-' + customSize, customSize && !floating), _defineProperty(_cn, 'md-floating-label--floating', floating), _defineProperty(_cn, 'md-floating-label--disabled', disabled), _defineProperty(_cn, 'md-floating-label--icon-offset', iconOffset), _cn), className)
	        }),
	        label
	      );
	    }
	  }]);
	
	  return FloatingLabel;
	}(_react.PureComponent);
	
	FloatingLabel.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  label: _propTypes2.default.node,
	  floating: _propTypes2.default.bool,
	  error: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  iconOffset: _propTypes2.default.bool,
	  customSize: _propTypes2.default.string,
	  htmlFor: _propTypes2.default.string
	};
	exports.default = FloatingLabel;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Divider = __webpack_require__(59);
	
	var _Divider2 = _interopRequireDefault(_Divider);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TextFieldDivider = function (_PureComponent) {
	  _inherits(TextFieldDivider, _PureComponent);
	
	  function TextFieldDivider() {
	    _classCallCheck(this, TextFieldDivider);
	
	    return _possibleConstructorReturn(this, (TextFieldDivider.__proto__ || Object.getPrototypeOf(TextFieldDivider)).apply(this, arguments));
	  }
	
	  _createClass(TextFieldDivider, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          active = _props.active,
	          error = _props.error,
	          lineDirection = _props.lineDirection,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['active', 'error', 'lineDirection', 'className']);
	
	      return _react2.default.createElement(_Divider2.default, _extends({}, props, {
	        className: (0, _classnames2.default)('md-divider--text-field md-divider--expand-from-' + lineDirection, {
	          'md-divider--text-field-expanded': active,
	          'md-divider--text-field-active': !error && active,
	          'md-divider--text-field-error': error
	        }, className)
	      }));
	    }
	  }]);
	
	  return TextFieldDivider;
	}(_react.PureComponent);
	
	TextFieldDivider.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  error: _propTypes2.default.bool,
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right'])
	};
	exports.default = TextFieldDivider;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Message = __webpack_require__(256);
	
	var _Message2 = _interopRequireDefault(_Message);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TextFieldMessage = function (_PureComponent) {
	  _inherits(TextFieldMessage, _PureComponent);
	
	  function TextFieldMessage(props) {
	    _classCallCheck(this, TextFieldMessage);
	
	    var _this = _possibleConstructorReturn(this, (TextFieldMessage.__proto__ || Object.getPrototypeOf(TextFieldMessage)).call(this, props));
	
	    _this.state = {
	      message: props.error && props.errorText || props.helpText || props.errorText,
	      isMessageVisible: _this._isMessageVisible(props)
	    };
	    return _this;
	  }
	
	  _createClass(TextFieldMessage, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var keys = ['active', 'error', 'helpOnFocus', 'helpText', 'errorText'];
	      if (this._anyChanges(keys, this.props, nextProps)) {
	        this.setState({
	          isMessageVisible: this._isMessageVisible(nextProps),
	          message: nextProps.error && nextProps.errorText || nextProps.helpText || nextProps.errorText
	        });
	      }
	    }
	  }, {
	    key: '_anyChanges',
	    value: function _anyChanges(keys, p1, p2) {
	      var changed = false;
	      keys.some(function (key) {
	        if (p1[key] !== p2[key]) {
	          changed = true;
	        }
	
	        return changed;
	      });
	
	      return changed;
	    }
	  }, {
	    key: '_isMessageVisible',
	    value: function _isMessageVisible(props) {
	      var error = props.error,
	          errorText = props.errorText,
	          helpText = props.helpText,
	          helpOnFocus = props.helpOnFocus,
	          active = props.active;
	
	      return (error && errorText || !!helpText) && (!helpOnFocus || active);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          maxLength = _props.maxLength,
	          error = _props.error,
	          className = _props.className,
	          errorText = _props.errorText,
	          helpText = _props.helpText,
	          currentLength = _props.currentLength,
	          leftIcon = _props.leftIcon,
	          rightIcon = _props.rightIcon,
	          block = _props.block,
	          active = _props.active;
	      var _state = this.state,
	          isMessageVisible = _state.isMessageVisible,
	          message = _state.message;
	
	
	      if (currentLength === 'undefined' || !helpText && !errorText && !maxLength) {
	        return null;
	      }
	
	      return _react2.default.createElement(
	        'div',
	        {
	          className: (0, _classnames2.default)('md-text-field-message-container', {
	            'md-text-field-message-container--error': error,
	            'md-text-field-message-container--count-only': !message || !isMessageVisible,
	            'md-text-field-message-container--left-icon-offset': leftIcon,
	            'md-text-field-message-container--right-icon-offset': rightIcon,
	            'md-full-width': !block
	          }, className)
	        },
	        _react2.default.createElement(
	          _Message2.default,
	          { key: 'message', active: isMessageVisible },
	          message
	        ),
	        _react2.default.createElement(
	          _Message2.default,
	          { key: 'counter', className: 'md-text-field-message--counter', active: active },
	          maxLength ? currentLength + ' / ' + maxLength : null
	        )
	      );
	    }
	  }]);
	
	  return TextFieldMessage;
	}(_react.PureComponent);
	
	TextFieldMessage.propTypes = {
	  className: _propTypes2.default.string,
	  error: _propTypes2.default.bool,
	  helpText: _propTypes2.default.node,
	  errorText: _propTypes2.default.node,
	  active: _propTypes2.default.bool,
	  helpOnFocus: _propTypes2.default.bool,
	  maxLength: _propTypes2.default.number,
	  currentLength: _propTypes2.default.number,
	  leftIcon: _propTypes2.default.bool,
	  rightIcon: _propTypes2.default.bool,
	  block: _propTypes2.default.bool
	};
	exports.default = TextFieldMessage;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _invalidIf = __webpack_require__(19);
	
	var _invalidIf2 = _interopRequireDefault(_invalidIf);
	
	var _between = __webpack_require__(39);
	
	var _between2 = _interopRequireDefault(_between);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _ToolbarTitle = __webpack_require__(260);
	
	var _ToolbarTitle2 = _interopRequireDefault(_ToolbarTitle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Toolbar = function (_PureComponent) {
	  _inherits(Toolbar, _PureComponent);
	
	  function Toolbar() {
	    _classCallCheck(this, Toolbar);
	
	    return _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).apply(this, arguments));
	  }
	
	  _createClass(Toolbar, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          component = _props.component,
	          titleStyle = _props.titleStyle,
	          titleClassName = _props.titleClassName,
	          prominentTitle = _props.prominentTitle,
	          primary = _props.primary,
	          secondary = _props.secondary,
	          themed = _props.themed,
	          singleColor = _props.singleColor,
	          actions = _props.actions,
	          fixed = _props.fixed,
	          actionLeft = _props.actionLeft,
	          actionsRight = _props.actionsRight,
	          children = _props.children,
	          inset = _props.inset,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'component', 'titleStyle', 'titleClassName', 'prominentTitle', 'primary', 'secondary', 'themed', 'singleColor', 'actions', 'fixed', 'actionLeft', 'actionsRight', 'children', 'inset']);
	
	      delete props.nav;
	      delete props.title;
	      delete props.titleMenu;
	      delete props.zDepth;
	      delete props.colored;
	      delete props.prominent;
	
	      // delete deprecated;
	      delete props.containerStyle;
	      delete props.containerClassName;
	      delete props.actionLeft;
	      delete props.actionsRight;
	
	      var _props2 = this.props,
	          colored = _props2.colored,
	          title = _props2.title,
	          titleMenu = _props2.titleMenu,
	          nav = _props2.nav,
	          prominent = _props2.prominent,
	          zDepth = _props2.zDepth;
	
	
	      colored = colored || primary || secondary;
	      prominent = prominent || prominentTitle;
	
	      title = _react2.default.createElement(_ToolbarTitle2.default, {
	        key: 'title',
	        style: titleStyle,
	        className: titleClassName,
	        prominent: prominentTitle,
	        offset: prominentTitle,
	        title: title
	      });
	
	      if (nav || actionLeft) {
	        var navEl = _react.Children.only(nav || actionLeft);
	        nav = (0, _react.cloneElement)(nav, {
	          className: (0, _classnames2.default)('md-btn--toolbar md-toolbar--action-left', navEl.props.className)
	        });
	      }
	
	      var rightActions = void 0;
	      if (actions || actionsRight) {
	        rightActions = _react.Children.map(_react.Children.toArray(actions || actionsRight), function (action) {
	          return (0, _react.cloneElement)(action, {
	            className: (0, _classnames2.default)('md-btn--toolbar', action.props.className)
	          });
	        });
	
	        rightActions = _react2.default.createElement(
	          'div',
	          { key: 'actions', className: 'md-cell--right md-toolbar--action-right' },
	          rightActions
	        );
	      }
	
	      if (titleMenu) {
	        titleMenu = _react.Children.only(titleMenu);
	        titleMenu = (0, _react.cloneElement)(titleMenu, {
	          className: (0, _classnames2.default)('md-title md-title--toolbar md-select-field--toolbar', {
	            'md-title--toolbar-offset': prominentTitle,
	            'md-title--toolbar-prominent': prominentTitle
	          }, titleMenu.props.className),
	          position: titleMenu.props.position || 'tl',
	          toolbar: true
	        });
	      }
	
	      if (typeof zDepth !== 'number') {
	        zDepth = fixed ? 2 : 0;
	      }
	
	      return _react2.default.createElement(
	        _Paper2.default,
	        _extends({}, props, {
	          component: component,
	          zDepth: zDepth,
	          style: style,
	          className: (0, _classnames2.default)('md-toolbar', {
	            'md-background--primary': colored,
	            'md-toolbar--themed': themed,
	            'md-toolbar--text-white': singleColor && colored,
	            'md-toolbar--discrete': !prominent,
	            'md-toolbar--prominent': prominent,
	            'md-toolbar--fixed': fixed,
	            'md-toolbar--inset': inset
	          }, className)
	        }),
	        nav,
	        title,
	        titleMenu,
	        children,
	        rightActions
	      );
	    }
	  }]);
	
	  return Toolbar;
	}(_react.PureComponent);
	
	Toolbar.propTypes = {
	  /**
	   * An optional style to apply to the toolbar.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the toolbar,
	   */
	  className: _propTypes2.default.string,
	
	  /*
	   * An optional style to apply to the `h2` surroudning the `title` prop.
	   */
	  titleStyle: _propTypes2.default.object,
	
	  /*
	   * An optional className to apply to the `h2` surroudning the `title` prop.
	   */
	  titleClassName: _propTypes2.default.string,
	
	  /**
	   * Boolean if the toolbar should more prominent. This will double the height of the toolbar.
	   */
	  prominent: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the toolbar's title should be more prominent. This will move the title to the
	   * second line of the toolbar. This only works when the `prominent` prop is true as well.
	   */
	  prominentTitle: _propTypes2.default.bool,
	
	  /**
	   * The current title of the page to show in the toolbar. It is invalid to specify both a
	   * `title` and a `titleMenu`. Only one should be given.
	   */
	  title: (0, _invalidIf2.default)(_propTypes2.default.node, 'titleMenu'),
	
	  /**
	   * An optional title menu to display instead of the title. This should be a `SelectField` component.
	   * It is cloned with some additional props, so if the `SelectField` is separated into a separate
	   * component, the following props must be passed to get the correct styling: `className`, `block`,
	   * `paddedBlock`, `position`.
	   */
	  titleMenu: _propTypes2.default.element,
	
	  /**
	   * This prop is used for rendering an optional navigation button to the left of the `title`
	   * or the `titleMenu` component. This needs to be an icon `Button` because some additional props
	   * are cloned into it.
	   */
	  nav: _propTypes2.default.element,
	
	  /**
	   * Any additional actions to display to the right of the title. This should be a list or a single
	   * `Button` to display. The buttons get cloned with an additional className for toolbar styling.
	   */
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
	
	  /**
	   * Any children to display in the toolbar. This will be displayed between the optional title and
	   * actions.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the toolbar should be fixed to the top of the page. This will add some additional box shadow.
	   */
	  fixed: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the nav, actions, and title should share the same color. For a `colored` or dark `themed`
	   * toolbar, they will all be colored white. For a transparent or light `themed` toolbar, the colors will
	   * be the `rgba(0, 0, 0, .87)`. Setting this to false will only style the title to the specific color
	   * stated above.
	   */
	  singleColor: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the toolbar should be colored based off the current theme. This will either style the background
	   * to be fairly white, or fairly black. You can not specify both `themed` and `colored`.
	   */
	  themed: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the toolbar should be colored with the `$md-primary-color`.
	   */
	  colored: (0, _invalidIf2.default)(_propTypes2.default.bool, 'themed'),
	
	  /**
	   * The component to render the toolbar as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * Boolean if the toolbar is inset in the page. This will just add some margin around
	   * it.
	   */
	  inset: _propTypes2.default.bool,
	
	  /**
	   * An optional zDepth to enforce for the toolbar. This should be a number between 0 and 5.
	   * If this is omitted, the toolbar will gain a zDepth of 2 when `fixed`.
	   */
	  zDepth: (0, _between2.default)(_propTypes2.default.number, 0, 5),
	  containerStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'The `container` no longer exists in the `Toolbar`. Use the `style` prop instead'),
	  containerClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'The `container` no longer exists in the `Toolbar`. Use the `className` prop instead'),
	  primary: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `colored` prop instead'),
	  secondary: (0, _deprecated2.default)(_propTypes2.default.bool, 'Toolbars can no longer be themed to the secondary color. Use the `colored` prop instead'),
	  actionLeft: (0, _deprecated2.default)(_propTypes2.default.element, 'Use the `nav` prop instead'),
	  actionsRight: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `menu` prop and/or the `actions` prop instead')
	};
	Toolbar.defaultProps = {
	  singleColor: true,
	  component: 'header'
	};
	exports.default = Toolbar;

/***/ },
/* 114 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var MOBILE_MIN_WIDTH = exports.MOBILE_MIN_WIDTH = 320;
	var TABLET_MIN_WIDTH = exports.TABLET_MIN_WIDTH = 768;
	var DESKTOP_MIN_WIDTH = exports.DESKTOP_MIN_WIDTH = 1025;

/***/ },
/* 115 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var DateTimeFormat = function () {
	  if (typeof Intl !== 'undefined' && typeof Intl.DateTimeFormat !== 'undefined') {
	    return Intl.DateTimeFormat;
	  }
	
	  // Very bad 'mock' of Intl.DateTimeFormat
	  return function () {
	    return (/* locales, formatOptions */{ format: function format(date) {
	          return date.toLocaleString();
	        } }
	    );
	  };
	}();
	
	exports.default = DateTimeFormat;

/***/ },
/* 116 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = formatTime;
	/**
	 * Formats a date as a time string using the DateTimeFormat function and locales.
	 *
	 * @param {function} DateTimeFormat the DateTimeFormat function to use.
	 * @param {string|string[]} locales the locales to use.
	 * @param {Date} time the time to format into a string.
	 * @return a string of the formatted time.
	 */
	function formatTime(DateTimeFormat, locales, time) {
	  return new DateTimeFormat(locales, { hour: 'numeric', minute: '2-digit' }).format(time);
	}

/***/ },
/* 117 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getDayOfWeek;
	/**
	 * Gets a day in the week. 0 = Sunday 6 = Saturday
	 *
	 * @param {date} sourceDate the date to find a relative day of week from
	 * @param {number} dow the day of the week to find
	 * @return a new Date as the given day of week
	 */
	function getDayOfWeek(sourceDate) {
	  var dow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	  var date = new Date(sourceDate);
	  var day = date.getDay();
	
	  var diff = date.getDate() - day + dow;
	  return new Date(date.setDate(diff));
	}

/***/ },
/* 118 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = stripTime;
	/**
	 * Removes all time from a date. Only keeps year, month, and date.
	 * @param {Date} date the date to strip
	 * @return a new Date with the time stripped.
	 */
	function stripTime(date) {
	  if (!date || !(date instanceof Date)) {
	    return null;
	  }
	
	  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
	}

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isValidFocusKeypress;
	
	var _keyCodes = __webpack_require__(6);
	
	/**
	 * Checks if a keydown or keyup event's key was the TAB key or any additional valid
	 * keys that were passed in.
	 *
	 * @param {Object} event - The event to check.
	 * @param {Array.<number>=} additionalKeys - An optional array of additional key codes
	 *    that are considered valid for a focus event.
	 */
	function isValidFocusKeypress(event, additionalKeys) {
	  var key = event.which || event.keyCode;
	  return key === _keyCodes.TAB || additionalKeys && additionalKeys.indexOf(key) !== -1;
	}

/***/ },
/* 120 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isBetween;
	/**
	 * Checks if a number is between a min and maximum (inclusive)
	 *
	 * @param {Number} num the number to check
	 * @param {Number} min the minimum
	 * @param {Number} max the maximum
	 * @return {Boolean} true if the number is between the min and max (inclusive)
	 */
	function isBetween(num, min, max) {
	  return num >= min && num <= max;
	}

/***/ },
/* 121 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = oneRequired;
	function oneRequired(validator) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    otherPropNames[_key - 1] = arguments[_key];
	  }
	
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var allPropNames = [propFullNameSafe].concat(otherPropNames);
	
	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && !allPropNames.filter(function (pn) {
	      return typeof props[pn] !== 'undefined';
	    }).length) {
	      err = new Error('One of the following props are required for the ' + componentNameSafe + ' component. ' + ('`' + allPropNames.join('`, `') + '`.'));
	    }
	
	    return err;
	  };
	}

/***/ },
/* 122 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addSuffix;
	/**
	 * Optionally adds a suffix to a string if it does
	 * not already contain that string.
	 *
	 * @param {String} str - The string to modify
	 * @param {String} suffix - The suffix to add
	 *
	 * @return {String} the string with a suffix
	 */
	function addSuffix(str, suffix) {
	  if (!str || typeof str !== 'string') {
	    return str;
	  }
	
	  return str.indexOf(suffix) === -1 ? str.trim() + ' ' + suffix : str;
	}

/***/ },
/* 123 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getDisplayName;
	
	/**
	 * Gets the display name for a composed component.
	 *
	 * @param {function} ComposedComponent - The composed component to use
	 * @return {String} the name of the composed component or 'Component'.
	 */
	function getDisplayName(ComposedComponent, suffix) {
	  var name = '' + (ComposedComponent.displayName || ComposedComponent.name || 'Component');
	
	  return name.indexOf(suffix) === -1 ? '' + name + suffix : name;
	}

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calcPageOffset;
	
	var _getPagePosition = __webpack_require__(125);
	
	var _getPagePosition2 = _interopRequireDefault(_getPagePosition);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Calculates the page offset of an element. If the element
	 * is false-ish, an empty object will be returned.
	 *
	 * This is really only used for calculating an ink position.
	 *
	 * @param {Node} el - An html node to find a page offset for.
	 * @return {Object} an object with a left and top attribute for the page
	 *    offset.
	 */
	function calcPageOffset(el) {
	  if (!el) {
	    return { left: null, right: null };
	  }
	
	  var rect = el.getBoundingClientRect();
	  return {
	    left: rect.left + (0, _getPagePosition2.default)('x'),
	    top: rect.top + (0, _getPagePosition2.default)('y')
	  };
	}

/***/ },
/* 125 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getPagePosition;
	/**
	 * Gets the current page position.
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY
	 * @param {String} direction - The direction that should be retrieved. This
	 *    should be either 'x' or 'y'.
	 * @return {number} the position of the direction on the page.
	 */
	function getPagePosition(direction) {
	  var scroll = 'scroll' + (direction === 'x' ? 'Left' : 'Top');
	  if (typeof window.pageXOffset !== 'undefined') {
	    return window['page' + direction.toUpperCase() + 'Offset'];
	  } else if ((document.compatMode || '') === 'CSS1Compat') {
	    return document.documentElement[scroll];
	  } else {
	    return document.body[scroll];
	  }
	}

/***/ },
/* 126 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isFormPartRole;
	/**
	 * A simple utility function to determine if an element has a role that should
	 * be used as a form part. This is mostly used for changing the behavior of keyboard
	 * events.
	 *
	 * A form part role is one of the following:
	 * - checkbox
	 * - radio
	 * - listbox
	 * - input
	 *
	 * @param {HTMLElement} el - the element to check.
	 * @return {boolean} true if the element is considered an element part of a form.
	 */
	function isFormPartRole(el) {
	  if (!el) {
	    return false;
	  } else if (el.nodeName === 'INPUT') {
	    return true;
	  }
	
	  var role = el.getAttribute('role');
	  return role === 'checkbox' || role === 'radio' || role === 'listbox';
	}

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = mapToListParts;
	
	var _react = __webpack_require__(2);
	
	var _Divider = __webpack_require__(59);
	
	var _Divider2 = _interopRequireDefault(_Divider);
	
	var _Subheader = __webpack_require__(106);
	
	var _Subheader2 = _interopRequireDefault(_Subheader);
	
	var _ListItem = __webpack_require__(46);
	
	var _ListItem2 = _interopRequireDefault(_ListItem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function mapToListParts(item, index) {
	  if (typeof item === 'string') {
	    return (0, _react.createElement)(_ListItem2.default, { key: item, primaryText: item });
	  } else if ((0, _react.isValidElement)(item)) {
	    return item;
	  }
	
	  var divider = item.divider,
	      subheader = item.subheader,
	      nestedItems = item.nestedItems,
	      remainingProps = _objectWithoutProperties(item, ['divider', 'subheader', 'nestedItems']);
	
	  var component = void 0;
	  if (divider) {
	    component = _Divider2.default;
	  } else if (subheader) {
	    component = _Subheader2.default;
	  } else {
	    component = _ListItem2.default;
	  }
	
	  var props = Object.assign({}, remainingProps, { key: item.key || index });
	  if (nestedItems) {
	    props.nestedItems = nestedItems.map(mapToListParts);
	  }
	
	  return (0, _react.createElement)(component, props);
	}

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(296), __esModule: true };

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(288);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(287);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 130 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(303);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(41)
	  , document = __webpack_require__(16).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(20) && !__webpack_require__(31)(function(){
	  return Object.defineProperty(__webpack_require__(132)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(130);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(71)
	  , $export        = __webpack_require__(21)
	  , redefine       = __webpack_require__(140)
	  , hide           = __webpack_require__(32)
	  , has            = __webpack_require__(22)
	  , Iterators      = __webpack_require__(70)
	  , $iterCreate    = __webpack_require__(309)
	  , setToStringTag = __webpack_require__(74)
	  , getPrototypeOf = __webpack_require__(138)
	  , ITERATOR       = __webpack_require__(33)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(49)
	  , createDesc     = __webpack_require__(50)
	  , toIObject      = __webpack_require__(24)
	  , toPrimitive    = __webpack_require__(79)
	  , has            = __webpack_require__(22)
	  , IE8_DOM_DEFINE = __webpack_require__(133)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(20) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(139)
	  , hiddenKeys = __webpack_require__(69).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(22)
	  , toObject    = __webpack_require__(78)
	  , IE_PROTO    = __webpack_require__(75)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(22)
	  , toIObject    = __webpack_require__(24)
	  , arrayIndexOf = __webpack_require__(305)(false)
	  , IE_PROTO     = __webpack_require__(75)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(32);

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = undefined;
	
	var _inDOM = __webpack_require__(52);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var transform = 'transform';
	var prefix = void 0,
	    transitionEnd = void 0,
	    animationEnd = void 0;
	var transitionProperty = void 0,
	    transitionDuration = void 0,
	    transitionTiming = void 0,
	    transitionDelay = void 0;
	var animationName = void 0,
	    animationDuration = void 0,
	    animationTiming = void 0,
	    animationDelay = void 0;
	
	if (_inDOM2.default) {
	  var _getTransitionPropert = getTransitionProperties();
	
	  prefix = _getTransitionPropert.prefix;
	  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
	  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;
	
	
	  exports.transform = transform = prefix + '-' + transform;
	  exports.transitionProperty = transitionProperty = prefix + '-transition-property';
	  exports.transitionDuration = transitionDuration = prefix + '-transition-duration';
	  exports.transitionDelay = transitionDelay = prefix + '-transition-delay';
	  exports.transitionTiming = transitionTiming = prefix + '-transition-timing-function';
	
	  exports.animationName = animationName = prefix + '-animation-name';
	  exports.animationDuration = animationDuration = prefix + '-animation-duration';
	  exports.animationTiming = animationTiming = prefix + '-animation-delay';
	  exports.animationDelay = animationDelay = prefix + '-animation-timing-function';
	}
	
	exports.transform = transform;
	exports.transitionProperty = transitionProperty;
	exports.transitionTiming = transitionTiming;
	exports.transitionDelay = transitionDelay;
	exports.transitionDuration = transitionDuration;
	exports.transitionEnd = transitionEnd;
	exports.animationName = animationName;
	exports.animationDuration = animationDuration;
	exports.animationTiming = animationTiming;
	exports.animationDelay = animationDelay;
	exports.animationEnd = animationEnd;
	exports.default = {
	  transform: transform,
	  end: transitionEnd,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};
	
	
	function getTransitionProperties() {
	  var style = document.createElement('div').style;
	
	  var vendorMap = {
	    O: function O(e) {
	      return 'o' + e.toLowerCase();
	    },
	    Moz: function Moz(e) {
	      return e.toLowerCase();
	    },
	    Webkit: function Webkit(e) {
	      return 'webkit' + e;
	    },
	    ms: function ms(e) {
	      return 'MS' + e;
	    }
	  };
	
	  var vendors = Object.keys(vendorMap);
	
	  var transitionEnd = void 0,
	      animationEnd = void 0;
	  var prefix = '';
	
	  for (var i = 0; i < vendors.length; i++) {
	    var vendor = vendors[i];
	
	    if (vendor + 'TransitionProperty' in style) {
	      prefix = '-' + vendor.toLowerCase();
	      transitionEnd = vendorMap[vendor]('TransitionEnd');
	      animationEnd = vendorMap[vendor]('AnimationEnd');
	      break;
	    }
	  }
	
	  if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';
	
	  if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';
	
	  style = null;
	
	  return { animationEnd: animationEnd, transitionEnd: transitionEnd, prefix: prefix };
	}

/***/ },
/* 142 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (true) {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(142);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (true) {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;

/***/ },
/* 145 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;


/***/ },
/* 146 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = {
	  noWobble: { stiffness: 170, damping: 26 }, // the default, if nothing provided
	  gentle: { stiffness: 120, damping: 14 },
	  wobbly: { stiffness: 180, damping: 12 },
	  stiff: { stiffness: 210, damping: 20 }
	};
	module.exports = exports["default"];

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }
	
	var _Motion = __webpack_require__(343);
	
	exports.Motion = _interopRequire(_Motion);
	
	var _StaggeredMotion = __webpack_require__(344);
	
	exports.StaggeredMotion = _interopRequire(_StaggeredMotion);
	
	var _TransitionMotion = __webpack_require__(345);
	
	exports.TransitionMotion = _interopRequire(_TransitionMotion);
	
	var _spring = __webpack_require__(348);
	
	exports.spring = _interopRequire(_spring);
	
	var _presets = __webpack_require__(146);
	
	exports.presets = _interopRequire(_presets);
	
	var _stripStyle = __webpack_require__(54);
	
	exports.stripStyle = _interopRequire(_stripStyle);
	
	// deprecated, dummy warning function
	
	var _reorderKeys = __webpack_require__(347);
	
	exports.reorderKeys = _interopRequire(_reorderKeys);

/***/ },
/* 148 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	//  weak
	
	exports.default = {
	  RESISTANCE_COEF: 0.6,
	
	  // This value is closed to what browsers are using internally to
	  // trigger a native scroll.
	  UNCERTAINTY_THRESHOLD: 3 };

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.nameShape = undefined;
	exports.transitionTimeout = transitionTimeout;
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function transitionTimeout(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;
	
	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');
	
	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	      }
	    }
	
	    return null;
	  };
	}
	
	var nameShape = exports.nameShape = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  leave: _propTypes2.default.string,
	  active: _propTypes2.default.string
	}), _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  enterActive: _propTypes2.default.string,
	  leave: _propTypes2.default.string,
	  leaveActive: _propTypes2.default.string,
	  appear: _propTypes2.default.string,
	  appearActive: _propTypes2.default.string
	})]);

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _CSSTransitionGroup = __webpack_require__(25);
	
	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _keyCodes = __webpack_require__(6);
	
	var _ListItem = __webpack_require__(46);
	
	var _ListItem2 = _interopRequireDefault(_ListItem);
	
	var _Menu = __webpack_require__(35);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	var _TextField = __webpack_require__(30);
	
	var _TextField2 = _interopRequireDefault(_TextField);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Autocomplete` component is useful for presenting real-time suggestions, completions,
	 * or filtering.
	 */
	var Autocomplete = function (_PureComponent) {
	  _inherits(Autocomplete, _PureComponent);
	
	  _createClass(Autocomplete, null, [{
	    key: 'caseInsensitiveFilter',
	
	
	    /**
	     * This function does a simple ignore case search of some `filterText` for every
	     * item in a `haystack`. It will only include items that are:
	     *  - not null or undefined
	     *  - valid React Components
	     *  - a number or string that contains each letter/number in exact order ignoring case
	     *  - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.
	     *
	     * Example:
	     * ```js
	     * const haystack = ['Apple', 'Banana', 'Orange'];
	     * caseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];
	     * caseInsensitiveFilter(haystack, 'ae') // []
	     * ```
	     *
	     * @param {Array.<string|number|Object|function>} haystack - the haystack to search
	     * @param {string} filterText - the filter text to use.
	     * @param {string=} dataLabel - the data label to use if the element is an object.
	     *
	     * @return {Array.<string|number|Object|function>} a filtered list.
	     */
	    value: function caseInsensitiveFilter(haystack, filterText, dataLabel) {
	      var needle = filterText.toLowerCase();
	
	      return haystack.filter(function (hay) {
	        if (hay === null || typeof hay === 'undefined') {
	          return false;
	        } else if (_react2.default.isValidElement(hay)) {
	          return true;
	        }
	
	        var value = void 0;
	        switch (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) {
	          case 'string':
	          case 'number':
	            value = hay.toString();
	            break;
	          default:
	            value = hay[dataLabel];
	        }
	
	        return value && value.toLowerCase().indexOf(needle) !== -1;
	      });
	    }
	
	    /**
	     * This function does a simple fuzzy search of some `needle` for every
	     * item in a `haystack`. It will only include items that are:
	     *  - not null or undefined
	     *  - valid React Components
	     *  - a number or string that contains each letter/number in order ignoring case
	     *  - an object's `dataLabel` value that contains each letter/number in order ignoring case.
	     *
	     * Example:
	     * ```js
	     * const haystack = ['Apple', 'Banana', 'Orange'];
	     * fuzzyFilter(haystack, 'An') // ['Banana', 'Orange'];
	     * fuzzyFilter(haystack, 'ae') // ['Apple']
	     * ```
	     *
	     * @param {Array.<string|number|Object|function>} haystack - the haystack to search
	     * @param {string} needle - the filter text to use.
	     * @param {string=} dataLabel - the data label to use if the element is an object.
	     *
	     * @return {Array.<string|number|Object|function>} a filtered list.
	     */
	
	  }, {
	    key: 'fuzzyFilter',
	    value: function fuzzyFilter(haystack, needle, dataLabel) {
	      // Create an amazing regex that matches the letters in order
	      // and escapes any strings that could be part of a regex.
	      var reg = new RegExp(('' + needle).split('').join('\\w*').replace(/(\(|\||\)|\\(?!w\*)|\[|\|-|\.|\^|\+|\$|\?|^(?!w)\*)/g, '\\$1')
	      // Couldn't get the matching of two '*' working, so replace them here..
	      .replace(/\*\*/g, '*\\*'), 'i');
	
	      return haystack.filter(function (hay) {
	        if (hay === null || typeof hay === 'undefined') {
	          return false;
	        } else if (_react2.default.isValidElement(hay)) {
	          return true;
	        }
	
	        var value = void 0;
	        switch (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) {
	          case 'string':
	          case 'number':
	            value = hay.toString();
	            break;
	          default:
	            value = hay[dataLabel];
	        }
	
	        return value && value.match(reg);
	      });
	    }
	
	    /**
	     * This function finds the first item in a `haystack` that starts with every
	     * letter of the `value` in order. It will ignore:
	     *  - null or undefined
	     *  - valid React components
	     *
	     * @param {Array.<string|number|Object|function>} haystack - the haystack to search.
	     * @param {string} value - the current value to use.
	     * @param {string=} dataLabel - the object key to use to extract the comparing value.
	     *
	     * @return {string} the found element or the empty string.
	     */
	
	  }, {
	    key: 'findIgnoreCase',
	    value: function findIgnoreCase(haystack, value, dataLabel) {
	      var needle = value ? value.toLowerCase() : '';
	
	      if (!needle) {
	        return needle;
	      }
	
	      var suggestion = '';
	      haystack.some(function (hay) {
	        if (hay === null || typeof hay === 'undefined' || _react2.default.isValidElement(hay)) {
	          return false;
	        }
	
	        var hayStr = (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) === 'object' ? hay[dataLabel] : hay.toString();
	
	        if (hayStr.toLowerCase().indexOf(needle) === 0) {
	          suggestion = hayStr;
	        }
	
	        return suggestion;
	      });
	
	      return suggestion;
	    }
	  }]);
	
	  function Autocomplete(props) {
	    _classCallCheck(this, Autocomplete);
	
	    var _this = _possibleConstructorReturn(this, (Autocomplete.__proto__ || Object.getPrototypeOf(Autocomplete)).call(this, props));
	
	    var defaultValue = props.defaultValue,
	        data = props.data,
	        dataLabel = props.dataLabel,
	        filter = props.filter;
	
	
	    var matches = [];
	    if (defaultValue && filter) {
	      matches = filter(data, defaultValue, dataLabel);
	    } else if (!filter) {
	      matches = data;
	    }
	
	    _this.state = {
	      value: defaultValue,
	      matches: matches,
	      isOpen: false,
	      matchIndex: -1,
	      manualFocus: false,
	      suggestionIndex: -1
	    };
	
	    _this._setField = _this._setField.bind(_this);
	    _this._setMenu = _this._setMenu.bind(_this);
	    _this._setSuggestion = _this._setSuggestion.bind(_this);
	    _this._close = _this._close.bind(_this);
	    _this._updateFont = _this._updateFont.bind(_this);
	    _this._handleBlur = _this._handleBlur.bind(_this);
	    _this._handleFocus = _this._handleFocus.bind(_this);
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._handleChange = _this._handleChange.bind(_this);
	    _this._handleItemClick = _this._handleItemClick.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleMenuKeyDown = _this._handleMenuKeyDown.bind(_this);
	    _this._handleTextFieldKeyDown = _this._handleTextFieldKeyDown.bind(_this);
	    _this._focusSuggestion = _this._focusSuggestion.bind(_this);
	    _this._findInlineSuggestions = _this._findInlineSuggestions.bind(_this);
	    _this._mapToListItem = _this._mapToListItem.bind(_this);
	    _this._toggleMenu = _this._toggleMenu.bind(_this);
	    _this._updateSuggestionStyle = _this._updateSuggestionStyle.bind(_this);
	    return _this;
	  }
	
	  _createClass(Autocomplete, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.inline) {
	        window.addEventListener('resize', this._updateFont);
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (this.state.isOpen !== nextState.isOpen) {
	        var menuFn = nextProps['onMenu' + (nextState.isOpen ? 'Open' : 'Close')];
	        if (menuFn) {
	          menuFn();
	        }
	      }
	
	      if (this.props.inline !== nextProps.inline) {
	        if (nextProps.inline) {
	          this._updateFont();
	          window.addEventListener('resize', this._updateFont);
	        } else {
	          window.removeEventListener('resize', this._updateFont);
	        }
	      }
	
	      if (nextProps.data !== this.props.data || nextProps.value !== this.props.value) {
	        var data = nextProps.data,
	            filter = nextProps.filter,
	            dataLabel = nextProps.dataLabel;
	
	        var value = (0, _getField2.default)(nextProps, nextState, 'value');
	
	        var matches = nextState.matches;
	
	        if (nextProps.data !== this.props.data) {
	          matches = filter ? filter(data, value, dataLabel) : data;
	        }
	
	        var next = { matches: matches };
	        if (nextState.focus) {
	          next.isOpen = !!matches.length;
	        }
	
	        this.setState(next);
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var suggestion = this.state.suggestion;
	
	      this._updateSuggestionStyle(suggestion && !prevState.suggestion, !suggestion && prevState.suggestion);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.props.inline) {
	        window.removeEventListener('resize', this._updateFont);
	      }
	    }
	  }, {
	    key: '_updateSuggestionStyle',
	    value: function _updateSuggestionStyle(isNew, isDeleted) {
	      if (isNew) {
	        var msg = (0, _reactDom.findDOMNode)(this).querySelector('.md-text-field-message');
	
	        if (msg) {
	          var cs = window.getComputedStyle(this._suggestion);
	          var bottom = parseInt(cs.getPropertyValue('bottom'), 10) + msg.offsetHeight;
	
	          this.setState({
	            suggestionStyle: Object.assign({}, this.state.suggestionStyle, { bottom: bottom })
	          });
	        }
	      } else if (isDeleted) {
	        var suggestionStyle = Object.assign({}, this.state.suggestionStyle);
	        delete suggestionStyle.bottom;
	
	        this.setState({ suggestionStyle: suggestionStyle });
	      }
	    }
	  }, {
	    key: '_updateFont',
	    value: function _updateFont() {
	      if (this._field) {
	        var cs = window.getComputedStyle(this._field);
	        this.setState({
	          fontSize: parseInt(cs.getPropertyValue('font-size'), 10),
	          font: cs.getPropertyValue('font')
	        });
	      }
	    }
	  }, {
	    key: '_close',
	    value: function _close() {
	      if (this.props.onBlur) {
	        this.props.onBlur();
	      }
	
	      this.setState({ isOpen: false });
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(value, event) {
	      var _props = this.props,
	          onChange = _props.onChange,
	          filter = _props.filter,
	          findInlineSuggestion = _props.findInlineSuggestion,
	          data = _props.data,
	          dataLabel = _props.dataLabel,
	          inline = _props.inline;
	
	
	      if (onChange) {
	        onChange(value, event);
	      }
	
	      if (inline) {
	        // If findInlineSuggestion does not exist, assume that `onChange` will handle it.
	        return findInlineSuggestion ? this._findInlineSuggestions(value) : null;
	      }
	
	      var isOpen = this.state.isOpen;
	
	      var matches = value || !filter ? this.state.matches : [];
	      if (value && filter) {
	        matches = filter(data, value, dataLabel);
	      }
	
	      if (filter) {
	        isOpen = !!matches.length;
	      }
	
	      return this.setState({ matches: matches, isOpen: isOpen, value: value });
	    }
	  }, {
	    key: '_handleFocus',
	    value: function _handleFocus(e) {
	      if (this.props.onFocus) {
	        this.props.onFocus(e);
	      }
	
	      this.setState({
	        matchIndex: -1,
	        isOpen: !this.state.manualFocus && !!(0, _getField2.default)(this.props, this.state, 'value') && !!this.state.matches.length,
	        manualFocus: false,
	        focus: true
	      });
	    }
	  }, {
	    key: '_handleBlur',
	    value: function _handleBlur(e) {
	      if (this.props.inline) {
	        if (this.props.onBlur) {
	          this.props.onBlur(e);
	        }
	
	        this.setState({ focus: false });
	      }
	    }
	  }, {
	    key: '_handleTextFieldKeyDown',
	    value: function _handleTextFieldKeyDown(e) {
	      var _props2 = this.props,
	          inline = _props2.inline,
	          data = _props2.data,
	          dataLabel = _props2.dataLabel,
	          onKeyDown = _props2.onKeyDown,
	          onAutocomplete = _props2.onAutocomplete;
	      var suggestionIndex = this.state.suggestionIndex;
	
	
	      var key = e.which || e.keyCode;
	      if (onKeyDown) {
	        onKeyDown(e);
	      }
	
	      if (inline && key === _keyCodes.TAB && suggestionIndex !== -1) {
	        // Autocomplete the text field
	        e.preventDefault();
	
	        var value = data[suggestionIndex];
	        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	          value = value[dataLabel];
	        }
	
	        if (onAutocomplete) {
	          onAutocomplete(value, suggestionIndex, this.state.matches);
	        }
	
	        this.setState({
	          value: value,
	          suggestion: '',
	          suggestionIndex: -1,
	          tabbed: true
	        });
	      }
	    }
	  }, {
	    key: '_handleMenuKeyDown',
	    value: function _handleMenuKeyDown(e) {
	      var key = e.which || e.keyCode;
	      if (key === _keyCodes.TAB) {
	        if (this.props.onBlur) {
	          this.props.onBlur();
	        }
	
	        this.setState({ isOpen: false });
	      } else if (key === _keyCodes.UP || key === _keyCodes.DOWN) {
	        this._focusSuggestion(key === _keyCodes.UP, e);
	      } else if ((key === _keyCodes.ENTER || key === _keyCodes.SPACE) && e.target.classList.contains('md-list-tile')) {
	        // Prevent any form submissions
	        e.preventDefault();
	
	        // Need to emulate the click event since the default enter/space don't work for some reason
	        e.target.click();
	        this._handleItemClick(this.state.matchIndex);
	      }
	    }
	
	    /**
	     * Just check if the click target is in a list item.. if it is, autocomplete the text field
	     * with that item.
	     */
	
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      var target = e.target;
	      while (this._menu && this._menu.contains(target)) {
	        if (target.classList.contains('md-list-item')) {
	          var items = target.parentNode.querySelectorAll('.md-list-item');
	          items = Array.prototype.slice.call(items);
	
	          return this._handleItemClick(items.indexOf(target));
	        }
	
	        target = target.parentNode;
	      }
	
	      return null;
	    }
	  }, {
	    key: '_handleItemClick',
	    value: function _handleItemClick(index) {
	      var _this2 = this;
	
	      if (index === -1) {
	        return;
	      }
	
	      var matches = this.state.matches;
	      var _props3 = this.props,
	          data = _props3.data,
	          dataLabel = _props3.dataLabel,
	          filter = _props3.filter,
	          onAutocomplete = _props3.onAutocomplete,
	          clearOnAutocomplete = _props3.clearOnAutocomplete;
	
	      var value = matches.filter(function (m) {
	        return !_react2.default.isValidElement(m);
	      })[index];
	      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	        value = value[dataLabel];
	      }
	
	      if (onAutocomplete) {
	        onAutocomplete(value, index, matches);
	      }
	
	      value = clearOnAutocomplete ? '' : value;
	      this.setState({
	        isOpen: false,
	        manualFocus: true,
	        matches: filter ? filter(data, value, dataLabel) : matches,
	        value: value
	      }, function () {
	        _this2._field.focus();
	      });
	    }
	  }, {
	    key: '_focusSuggestion',
	    value: function _focusSuggestion(negative, e) {
	      e.preventDefault();
	      var _state = this.state,
	          matchIndex = _state.matchIndex,
	          matches = _state.matches;
	
	      var l = matches.length;
	
	      var index = void 0;
	      if (negative && matchIndex === -1 || !negative && matchIndex >= l) {
	        return;
	      } else if (negative) {
	        index = matchIndex - 1;
	        if (index === -1) {
	          this._field.focus();
	        }
	      } else {
	        index = Math.min(l, matchIndex + 1);
	      }
	
	      if (index !== -1 && index !== matchIndex) {
	        var item = this._menu.querySelectorAll('.md-list-tile')[index];
	        if (item) {
	          item.focus();
	        }
	      }
	
	      this.setState({ matchIndex: index });
	    }
	  }, {
	    key: '_findInlineSuggestions',
	    value: function _findInlineSuggestions(value) {
	      var _props4 = this.props,
	          data = _props4.data,
	          dataLabel = _props4.dataLabel,
	          findInlineSuggestion = _props4.findInlineSuggestion;
	      var _state2 = this.state,
	          font = _state2.font,
	          fontSize = _state2.fontSize;
	      var suggestionStyle = this.state.suggestionStyle;
	
	
	      var suggestion = findInlineSuggestion(data, value, dataLabel);
	      if ((typeof suggestion === 'undefined' ? 'undefined' : _typeof(suggestion)) === 'object') {
	        throw new Error('`findInlineSuggestion` should return a string or a number, but got an object.', suggestion);
	      }
	
	      var suggestionIndex = -1;
	
	      if (suggestion) {
	        // Find index of suggestion
	        data.some(function (datum, i) {
	          var d = (typeof dataum === 'undefined' ? 'undefined' : _typeof(dataum)) === 'object' ? datum[dataLabel] : datum;
	          if (d === suggestion) {
	            suggestionIndex = i;
	          }
	
	          return suggestionIndex !== -1;
	        });
	
	        // Strip already used letters
	        suggestion = suggestion.toString().substring(value.length, suggestion.length);
	
	        // Calculate distance to move the suggestion to already existing text
	        var canvas = document.createElement('canvas');
	        var context = canvas.getContext('2d');
	
	        if (context) {
	          // context doesn't exist in jsdom with jest
	          context.font = font;
	          var padding = this.props.block ? fontSize * 1.5 : 8;
	
	          // Update suggestion style to be offset and not expand past text field
	          var left = context.measureText(value).width + padding;
	          suggestionStyle = Object.assign({}, suggestionStyle, { left: left });
	        }
	      }
	
	      this.setState({ value: value, suggestion: suggestion, suggestionIndex: suggestionIndex, suggestionStyle: suggestionStyle, tabbed: false });
	    }
	  }, {
	    key: '_mapToListItem',
	    value: function _mapToListItem(match) {
	      if (_react2.default.isValidElement(match)) {
	        return match;
	      }
	
	      var _props5 = this.props,
	          dataLabel = _props5.dataLabel,
	          dataValue = _props5.dataValue,
	          deleteKeys = _props5.deleteKeys;
	
	      var props = void 0;
	      switch (typeof match === 'undefined' ? 'undefined' : _typeof(match)) {
	        case 'string':
	        case 'number':
	          props = {
	            key: match,
	            primaryText: match
	          };
	          break;
	        default:
	          props = _extends({}, match, {
	            key: match.key || dataValue && match[dataValue] || match[dataLabel],
	            primaryText: match[dataLabel]
	          });
	
	          if (typeof deleteKeys === 'string') {
	            delete props[deleteKeys];
	          } else if (Array.isArray(deleteKeys)) {
	            deleteKeys.forEach(function (key) {
	              delete props[key];
	            });
	          }
	
	      }
	
	      // Allows focus, but does not let tab focus. This is so up and down keys work.
	      return _react2.default.createElement(_ListItem2.default, _extends({ tabIndex: -1 }, props));
	    }
	
	    /**
	     * The `mousedown` event is used instead of `click` because of the order
	     * of the `mousedown`, `focus`, and `click` events.
	     */
	
	  }, {
	    key: '_toggleMenu',
	    value: function _toggleMenu(e) {
	      if (this.props.onMouseDown) {
	        this.props.onMouseDown(e);
	      }
	
	      if (!this.props.inline && this.state.matches.length && (0, _getField2.default)(this.props, this.state, 'value')) {
	        this.setState({ isOpen: !this.state.isOpen });
	      }
	    }
	
	    /**
	     * Allows touch devices to autocomplete the inline view by tapping:
	     * - the suggestion text
	     * - the text field IF there is a suggestion visible
	     */
	
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      var target = e.target;
	      var _props6 = this.props,
	          data = _props6.data,
	          dataLabel = _props6.dataLabel,
	          onAutocomplete = _props6.onAutocomplete;
	      var _state3 = this.state,
	          suggestionIndex = _state3.suggestionIndex,
	          suggestion = _state3.suggestion;
	
	      if (target.classList.contains('md-autocomplete-suggestion') && suggestion) {
	        var value = data[suggestionIndex];
	        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	          value = value[dataLabel];
	        }
	
	        if (onAutocomplete) {
	          onAutocomplete(value, suggestionIndex, data);
	        }
	
	        this.setState({
	          value: value,
	          suggestion: '',
	          suggestionIndex: -1,
	          tabbed: true
	        });
	      }
	    }
	  }, {
	    key: '_setField',
	    value: function _setField(field) {
	      if (field) {
	        this._field = field.getField();
	
	        if (this.props.inline) {
	          this._updateFont();
	        }
	      }
	    }
	  }, {
	    key: '_setMenu',
	    value: function _setMenu(menu) {
	      this._menu = (0, _reactDom.findDOMNode)(menu);
	    }
	  }, {
	    key: '_setSuggestion',
	    value: function _setSuggestion(suggestion) {
	      this._suggestion = suggestion;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state4 = this.state,
	          isOpen = _state4.isOpen,
	          matches = _state4.matches,
	          tabbed = _state4.tabbed,
	          focus = _state4.focus,
	          suggestionStyle = _state4.suggestionStyle;
	
	      var _props7 = this.props,
	          fullWidth = _props7.fullWidth,
	          block = _props7.block,
	          style = _props7.style,
	          className = _props7.className,
	          listStyle = _props7.listStyle,
	          listClassName = _props7.listClassName,
	          textFieldStyle = _props7.textFieldStyle,
	          textFieldClassName = _props7.textFieldClassName,
	          inline = _props7.inline,
	          props = _objectWithoutProperties(_props7, ['fullWidth', 'block', 'style', 'className', 'listStyle', 'listClassName', 'textFieldStyle', 'textFieldClassName', 'inline']);
	
	      delete props.value;
	      delete props.defaultValue;
	      delete props.dataLabel;
	      delete props.dataValue;
	      delete props.filter;
	      delete props.data;
	      delete props.onAutocomplete;
	      delete props.onMenuOpen;
	      delete props.onMenuClose;
	      delete props.onBlur;
	      delete props.onFocus;
	      delete props.onKeyDown;
	      delete props.onMouseDown;
	      delete props.onChange;
	      delete props.findInlineSuggestion;
	      delete props.clearOnAutocomplete;
	      delete props.deleteKeys;
	
	      var value = (0, _getField2.default)(this.props, this.state, 'value');
	
	      var autocomplete = _react2.default.createElement(_TextField2.default, _extends({}, props, {
	        style: textFieldStyle,
	        className: (0, _classnames2.default)('md-autocomplete', textFieldClassName),
	        key: 'autocomplete',
	        ref: this._setField,
	        value: value,
	        onKeyDown: this._handleTextFieldKeyDown,
	        onMouseDown: this._toggleMenu,
	        onChange: this._handleChange,
	        onFocus: this._handleFocus,
	        onBlur: this._handleBlur,
	        fullWidth: fullWidth,
	        block: block
	      }));
	
	      if (inline) {
	        var suggestion = void 0;
	        if (focus && this.state.suggestion) {
	          suggestion = _react2.default.createElement(
	            'span',
	            {
	              ref: this._setSuggestion,
	              key: 'suggestion',
	              style: suggestionStyle,
	              className: (0, _classnames2.default)('md-autocomplete-suggestion', {
	                'md-autocomplete-suggestion--floating': props.label,
	                'md-autocomplete-suggestion--block': block
	              })
	            },
	            this.state.suggestion
	          );
	        }
	
	        return _react2.default.createElement(
	          _CSSTransitionGroup2.default,
	          {
	            component: 'div',
	            style: style,
	            className: (0, _classnames2.default)('md-menu-container md-autocomplete-container', className, {
	              'md-full-width': fullWidth || block
	            }),
	            transitionName: 'opacity',
	            transitionEnterTimeout: 150,
	            transitionLeave: !tabbed,
	            transitionLeaveTimeout: 150,
	            onTouchStart: this._handleTouchStart
	          },
	          autocomplete,
	          suggestion
	        );
	      }
	
	      return _react2.default.createElement(
	        _Menu2.default,
	        {
	          ref: this._setMenu,
	          toggle: autocomplete,
	          isOpen: isOpen,
	          onClick: this._handleClick,
	          onClose: this._close,
	          onKeyDown: this._handleMenuKeyDown,
	          position: _Menu2.default.Positions.BELOW,
	          fullWidth: fullWidth || block,
	          style: style,
	          className: (0, _classnames2.default)('md-autocomplete-container', className),
	          listStyle: listStyle,
	          listClassName: (0, _classnames2.default)('md-autocomplete-list', listClassName)
	        },
	        matches.map(this._mapToListItem)
	      );
	    }
	  }]);
	
	  return Autocomplete;
	}(_react.PureComponent);
	
	Autocomplete.propTypes = {
	  /**
	   * An optional style to apply to the menu that contains the autocomplete.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the menu that contains the autocomplete.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the autocomplete's text field.
	   */
	  textFieldStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the autocomplete's text field.
	   */
	  textFieldClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the autocomplete's text field input itself.
	   */
	  inputStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the autocomplete's input field iteself.
	   */
	  inputClassName: _propTypes2.default.string,
	
	  /**
	   * The optional style to apply to the opened menu List if the
	   * `Autocomplete` is not using `inline` suggestions.
	   */
	  listStyle: _propTypes2.default.object,
	
	  /**
	   * The optional className to apply to the opened menu List if the
	   * `Autocomplete` is not using `inline` suggestions.
	   */
	  listClassName: _propTypes2.default.string,
	
	  /**
	   * Boolean if the autocomplete is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * A label to display with the autocomplete.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * An optional value to use for the text field. This will force this component
	   * to be controlled and require the `onChange` function.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]), 'onChange'),
	
	  /**
	   * The default value for the autocomplete's text field.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	
	  /**
	   * An object key to use to extract the text to be compared for filtering.
	   * This will only be applied if the the given `data` prop is an array of objects.
	   */
	  dataLabel: _propTypes2.default.string.isRequired,
	
	  /**
	   * An optional object key to use to extract the `value` of the given `data` prop.
	   * This is really only used with generating a unique react key. The unique react
	   * key with either be:
	   * - the datum if it is a string or number
	   * - the `key` attribute of the datum object
	   * - the `datum[dataValue]`
	   * - or the `datum[dataLabel]`
	   */
	  dataValue: _propTypes2.default.string,
	
	  /**
	   * A single key or an array of keys to delete from your data object before passing
	   * to the `ListItem` component.
	   */
	  deleteKeys: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
	
	  /**
	   * The data that will be used for autocomplete suggestions. This can either be
	   * an array of string, number, or object. If it is an array of objects, the key
	   * `dataLabel` is required.
	   *
	   * ```docgen
	   * PropTypes.arrayOf(PropTypes.oneOfType([
	   *   PropTypes.element,
	   *   PropTypes.string,
	   *   PropTypes.number,
	   *   PropTypes.shape({
	   *     [dataLabel]: PropTypes.oneOfType([
	   *       PropTypes.string,
	   *       PropTypes.number,
	   *     ]).isRequired,
	   *   }),
	   * ])).isRequired
	   * ```
	   */
	  data: function data(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    var _PropTypes$arrayOf;
	
	    var dataLabel = props.dataLabel;
	
	    return (_PropTypes$arrayOf = _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.shape(_defineProperty({}, dataLabel, _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired))]))).isRequired.apply(_PropTypes$arrayOf, [props, propName, component].concat(others));
	  },
	
	  /**
	   * An optional function to use to filter the `data`. If you have a sexy backend
	   * using solr or some other seach/indexer, it is recommended to set this prop to
	   * `null` or `false`-ish.
	   */
	  filter: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `Autocomplete`'s text field has a `keydown` event.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `Autocomplete`'s text field has a `mousedown` event.
	   */
	  onMouseDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `Autocomplete`'s text field value changes.
	   * The callback will be given the new value and the change event.
	   *
	   * `onChange(textFeldValue, event)`
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `Autocomplete`'s text field is focused.
	   */
	  onFocus: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the entire `Autocomplete` component is blurred.
	   * This will be triggered when the window is clicked or when a user tabs away from
	   * the autocomplete.
	   */
	  onBlur: _propTypes2.default.func,
	
	  /**
	   * Boolean if this text field should be styled as a full width text field.
	   * Floating labels and the text field indicator will be removed automatically.
	   */
	  block: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the autocomplete should span the entire width.
	   */
	  fullWidth: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `Autocomplete` should display suggestions inline instead
	   * of in a `Menu`.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * The function to call to find a suggestion for an inline autocomplete. This function
	   * expects to return a single result of a number or a string.
	   *
	   * ```js
	   * @param {Array<Object|String|Number>} data - The data prop to search.
	   * @param {String} value - The current value to use for searching.
	   * @param {String} dataLabel - The `dataLabel` prop to use if a datum is an object.
	   * @return {String|Number} the found suggestion or false-ish
	   * ```
	   */
	  findInlineSuggestion: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when an autocomplete suggestion is clicked either
	   * by using the mouse, the enter/space key, or touch. The match index and current
	   * `dataLabel` will be given back.
	   *
	   * `onAutocomplete(suggestion[dataLabel] || suggestion, suggestionIndex, matches);`
	   */
	  onAutocomplete: _propTypes2.default.func,
	
	  /**
	   * A boolean if the text field's value should be reset to the empty string when
	   * an item is auto-completed. This is usefull if you do not want a fully controlled
	   * component and the values are stored outside of the `TextField`. (like `Chips`).
	   */
	  clearOnAutocomplete: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when the `Autocomplete` suggestion menu opens.
	   */
	  onMenuOpen: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `Autocomplete` suggestion menu closes.
	   */
	  onMenuClose: _propTypes2.default.func,
	
	  /**
	   * This prop is used for disabling the browser's default autocomplete suggestions
	   * of previously typed values in the text field. By default, this is disabled.
	   */
	  autoComplete: _propTypes2.default.oneOf(['on', 'off'])
	};
	Autocomplete.defaultProps = {
	  fullWidth: true,
	  defaultValue: '',
	  dataLabel: 'primaryText',
	  filter: Autocomplete.fuzzyFilter,
	  findInlineSuggestion: Autocomplete.findIgnoreCase,
	  autoComplete: 'off'
	};
	exports.default = Autocomplete;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Autocomplete = __webpack_require__(150);
	
	var _Autocomplete2 = _interopRequireDefault(_Autocomplete);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Autocomplete2.default;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _oneRequiredForA11yIf = __webpack_require__(278);
	
	var _oneRequiredForA11yIf2 = _interopRequireDefault(_oneRequiredForA11yIf);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The avatar component is used to convert a `FontIcon`, an image, or
	 * a letter into an avatar.
	 *
	 * Any other props given to the Avatar component such as event listeners
	 * or styles will also be applied.
	 */
	var Avatar = function (_PureComponent) {
	  _inherits(Avatar, _PureComponent);
	
	  function Avatar(props) {
	    _classCallCheck(this, Avatar);
	
	    var _this = _possibleConstructorReturn(this, (Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call(this, props));
	
	    _this.state = { color: null };
	
	    _this._setRandomColor = _this._setRandomColor.bind(_this);
	    return _this;
	  }
	
	  _createClass(Avatar, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      if (this.props.random) {
	        this._setRandomColor();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.random && (this.props.src !== nextProps.src || this.props.icon !== nextProps.icon)) {
	        this._setRandomColor();
	      } else if (this.props.random && !nextProps.random) {
	        this.setState({ color: null });
	      }
	    }
	  }, {
	    key: '_setRandomColor',
	    value: function _setRandomColor() {
	      var suffixes = this.props.suffixes;
	
	
	      var i = Math.floor(Math.random() * (suffixes.length - 1)) + 1;
	      this.setState({ color: suffixes[i] });
	    }
	  }, {
	    key: '_getColor',
	    value: function _getColor(suffix, suffixes, color) {
	      if (suffix) {
	        return 'md-avatar--' + suffix;
	      } else if (!!suffixes && !color) {
	        return 'md-avatar--default';
	      }
	
	      return 'md-avatar--' + color;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          src = _props.src,
	          alt = _props.alt,
	          icon = _props.icon,
	          children = _props.children,
	          suffix = _props.suffix,
	          suffixes = _props.suffixes,
	          iconSized = _props.iconSized,
	          role = _props.role,
	          props = _objectWithoutProperties(_props, ['className', 'src', 'alt', 'icon', 'children', 'suffix', 'suffixes', 'iconSized', 'role']);
	
	      delete props.random;
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-inline-block md-avatar', this._getColor(suffix, suffixes, this.state.color), {
	            'md-avatar--icon-sized': iconSized
	          }, className)
	        }),
	        src && _react2.default.createElement('img', { src: src, alt: alt, role: role, className: 'md-avatar-img' }),
	        !src && _react2.default.createElement(
	          'div',
	          { className: 'md-avatar-content' },
	          icon || children
	        )
	      );
	    }
	  }]);
	
	  return Avatar;
	}(_react.PureComponent);
	
	Avatar.propTypes = {
	  /**
	   * An optional className to apply to the avatar.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional image source to use for the avatar.
	   */
	  src: _propTypes2.default.string,
	
	  /**
	   * An optional image alt to use for the avatar if it is
	   * an image.
	   */
	  alt: _propTypes2.default.string,
	
	  /**
	   * An optional `FontIcon` to convert into an avatar.
	   */
	  icon: _propTypes2.default.node,
	
	  /**
	   * An optional letter to display in the avatar.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * A boolean if a random color should be applied to the avatar.
	   * This will be one of the `suffixes`.
	   */
	  random: _propTypes2.default.bool,
	
	  /**
	   * A list of available suffixes to use when generating a random
	   * color for the avatar.
	   */
	  suffixes: _propTypes2.default.arrayOf(_propTypes2.default.string),
	
	  /**
	   * The suffix to use for a color. This can be any value but
	   * *should* be one of the available `suffixes`.
	   */
	  suffix: _propTypes2.default.string,
	
	  /**
	   * Boolean if the `Avatar` should be sized to a `FontIcon` size. This
	   * will just set the width and height to the `$md-font-icon-size`.
	   */
	  iconSized: _propTypes2.default.bool,
	
	  /**
	   * A role for the avatar's image. When the `src` prop is set, either a `role` of `presentation`
	   * or the `alt` prop must be defined for a11y.
	   */
	  role: (0, _oneRequiredForA11yIf2.default)(_propTypes2.default.oneOf(['presentation']), 'src', 'alt')
	};
	Avatar.defaultProps = {
	  suffixes: ['red', 'pink', 'purple', 'deep-purple', 'indigo', 'blue', 'light-blue', 'cyan', 'teal', 'green', 'light-green', 'lime', 'yellow', 'amber', 'orange', 'deep-orange', 'brown', 'grey', 'blue-grey']
	};
	exports.default = Avatar;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Avatar = __webpack_require__(152);
	
	var _Avatar2 = _interopRequireDefault(_Avatar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Avatar2.default;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	var _Collapse = __webpack_require__(17);
	
	var _Collapse2 = _interopRequireDefault(_Collapse);
	
	var _FontIcons = __webpack_require__(96);
	
	var _FontIcons2 = _interopRequireDefault(_FontIcons);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `BottomNav` component is used for rendering the navigation tab/link in the `BottomNavigation`
	 * component.
	 */
	var BottomNav = function (_PureComponent) {
	  _inherits(BottomNav, _PureComponent);
	
	  function BottomNav(props) {
	    _classCallCheck(this, BottomNav);
	
	    var _this = _possibleConstructorReturn(this, (BottomNav.__proto__ || Object.getPrototypeOf(BottomNav)).call(this, props));
	
	    _this.state = {};
	    _this._handleClick = _this._handleClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(BottomNav, [{
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      var _props = this.props,
	          onClick = _props.onClick,
	          onNavChange = _props.onNavChange,
	          index = _props.index;
	
	      if (onClick) {
	        onClick(index, e);
	      }
	
	      if (onNavChange) {
	        onNavChange(index, e);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          active = _props2.active,
	          fixed = _props2.fixed,
	          className = _props2.className,
	          iconClassName = _props2.iconClassName,
	          iconChildren = _props2.iconChildren,
	          colored = _props2.colored,
	          props = _objectWithoutProperties(_props2, ['active', 'fixed', 'className', 'iconClassName', 'iconChildren', 'colored']);
	
	      delete props.index;
	      delete props.label;
	      delete props.onClick;
	      delete props.onNavChange;
	
	      var label = this.props.label;
	
	      var labelClassName = (0, _classnames2.default)('md-bottom-nav-label', { 'md-bottom-nav-label--shifting-inactive': !active && !fixed });
	      if (_react.Children.count(label) === 1 && (0, _react.isValidElement)(label)) {
	        var labelEl = _react.Children.only(label);
	        label = (0, _react.cloneElement)(label, {
	          className: (0, _classnames2.default)(labelClassName, labelEl.props.className)
	        });
	      } else {
	        label = _react2.default.createElement(
	          'div',
	          { className: labelClassName },
	          label
	        );
	      }
	
	      return _react2.default.createElement(
	        _AccessibleFakeInkedButton2.default,
	        _extends({}, props, {
	          onClick: this._handleClick,
	          className: (0, _classnames2.default)('md-bottom-nav', {
	            'md-bottom-nav--active': active,
	            'md-bottom-nav--fixed': fixed,
	            'md-bottom-nav--shifting': !fixed,
	            'md-bottom-nav--shifting-active': !fixed && active,
	            'md-bottom-nav--shifting-inactive': !fixed && !active,
	            'md-text': !active && !colored,
	            'md-text--theme-primary': active && !colored
	          }, className)
	        }),
	        _react2.default.createElement(
	          _FontIcons2.default,
	          { iconClassName: iconClassName, className: 'md-icon--inherit' },
	          iconChildren
	        ),
	        _react2.default.createElement(
	          _Collapse2.default,
	          { collapsed: !fixed && !active },
	          label
	        )
	      );
	    }
	  }]);
	
	  return BottomNav;
	}(_react.PureComponent);
	
	BottomNav.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	  active: _propTypes2.default.bool,
	  fixed: _propTypes2.default.bool,
	  children: _propTypes2.default.node,
	  index: _propTypes2.default.number.isRequired,
	  label: _propTypes2.default.node.isRequired,
	  colored: _propTypes2.default.bool,
	  iconChildren: _propTypes2.default.node,
	  iconClassName: _propTypes2.default.string,
	  onClick: _propTypes2.default.func,
	  onNavChange: _propTypes2.default.func,
	  role: _propTypes2.default.string
	};
	BottomNav.defaultProps = {
	  component: 'a',
	  role: null
	};
	exports.default = BottomNav;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _Portal = __webpack_require__(27);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _BottomNav = __webpack_require__(154);
	
	var _BottomNav2 = _interopRequireDefault(_BottomNav);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `BottomNavigation` component is an alternative to the `NavigationDrawer` for handling navigation
	 * only on mobile devices.
	 */
	var BottomNavigation = function (_PureComponent) {
	  _inherits(BottomNavigation, _PureComponent);
	
	  function BottomNavigation(props) {
	    _classCallCheck(this, BottomNavigation);
	
	    var _this = _possibleConstructorReturn(this, (BottomNavigation.__proto__ || Object.getPrototypeOf(BottomNavigation)).call(this, props));
	
	    var visible = typeof props.initiallyVisible === 'boolean' ? props.initiallyVisible : props.defaultVisible;
	    _this.state = {
	      visible: visible,
	      portalVisible: visible
	    };
	    if (typeof props.activeIndex === 'undefined') {
	      _this.state.activeIndex = props.defaultActiveIndex;
	    }
	
	    _this._handleNavChange = _this._handleNavChange.bind(_this);
	    _this._addTouchEvents = _this._addTouchEvents.bind(_this);
	    _this._removeTouchEvents = _this._removeTouchEvents.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleTouchMove = _this._handleTouchMove.bind(_this);
	    _this._handleTouchEnd = _this._handleTouchEnd.bind(_this);
	    return _this;
	  }
	
	  _createClass(BottomNavigation, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.dynamic) {
	        this._addTouchEvents();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var dynamic = nextProps.dynamic;
	
	      if (this.props.dynamic === dynamic) {
	        return;
	      }
	
	      if (dynamic) {
	        this._addTouchEvents();
	      } else {
	        this._removeTouchEvents();
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (this.state.visible !== nextState.visible && nextProps.onVisibilityChange) {
	        nextProps.onVisibilityChange(nextState.visible);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.props.dynamic) {
	        this._removeTouchEvents();
	      }
	
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	    }
	  }, {
	    key: '_addTouchEvents',
	    value: function _addTouchEvents() {
	      window.addEventListener('touchstart', this._handleTouchStart);
	      window.addEventListener('touchmove', this._handleTouchMove);
	      window.addEventListener('touchend', this._handleTouchEnd);
	    }
	  }, {
	    key: '_removeTouchEvents',
	    value: function _removeTouchEvents() {
	      window.removeEventListener('touchstart', this._handleTouchStart);
	      window.removeEventListener('touchmove', this._handleTouchMove);
	      window.removeEventListener('touchend', this._handleTouchEnd);
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      var pageY = e.changedTouches[0].pageY;
	
	
	      this._pageY = pageY;
	      this._scrolling = true;
	    }
	  }, {
	    key: '_handleTouchMove',
	    value: function _handleTouchMove(e) {
	      var _this2 = this;
	
	      var visible = this.state.visible;
	
	      if (!this._scrolling) {
	        return;
	      }
	
	      var touchY = e.changedTouches[0].pageY;
	      var _props = this.props,
	          transitionDuration = _props.transitionDuration,
	          dynamicThreshold = _props.dynamicThreshold;
	
	      var passedThreshold = Math.abs(this._pageY - touchY) >= dynamicThreshold;
	      if (this._pageY > touchY && visible && passedThreshold) {
	        if (this._timeout) {
	          clearTimeout(this._timeout);
	        }
	
	        this._timeout = setTimeout(function () {
	          _this2._timeout = null;
	          _this2.setState({ portalVisible: false });
	        }, transitionDuration);
	
	        this._pageY = touchY;
	        this.setState({ visible: false });
	      } else if (this._pageY < touchY && !visible && passedThreshold) {
	        if (this._timeout) {
	          clearTimeout(this._timeout);
	        }
	
	        this._timeout = setTimeout(function () {
	          _this2._timeout = null;
	          _this2.setState({ visible: true });
	        }, 17);
	
	        this._pageY = touchY;
	        this.setState({ portalVisible: true });
	      }
	    }
	  }, {
	    key: '_handleTouchEnd',
	    value: function _handleTouchEnd() {
	      this._scrolling = false;
	    }
	  }, {
	    key: '_handleNavChange',
	    value: function _handleNavChange(index, e) {
	      if (this.props.onNavChange || this.props.onChange) {
	        (this.props.onNavChange || this.props.onChange)(index, e);
	      }
	
	      if (typeof this.props.activeIndex === 'undefined') {
	        this.setState({ activeIndex: index });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;
	
	      var _state = this.state,
	          visible = _state.visible,
	          portalVisible = _state.portalVisible;
	
	      var _props2 = this.props,
	          className = _props2.className,
	          actions = _props2.actions,
	          colored = _props2.colored,
	          dynamic = _props2.dynamic,
	          lastChild = _props2.lastChild,
	          props = _objectWithoutProperties(_props2, ['className', 'actions', 'colored', 'dynamic', 'lastChild']);
	
	      delete props.links;
	      delete props.activeIndex;
	      delete props.onNavChange;
	      delete props.onVisibilityChange;
	      delete props.defaultVisible;
	      delete props.defaultActiveIndex;
	      delete props.dynamicThreshold;
	      delete props.transitionDuration;
	      delete props.renderNode;
	
	      // Delete deprecated
	      delete props.onChange;
	      delete props.initiallyVisible;
	      delete props.containerStyle;
	      delete props.containerClassName;
	      delete props.transitionName;
	      delete props.transitionEnterTimeout;
	      delete props.transitionLeaveTimeout;
	
	      var links = this.props.links;
	
	      if (actions) {
	        links = actions;
	      }
	
	      var fixed = links.length === 3;
	      var activeIndex = (0, _getField2.default)(this.props, this.state, 'activeIndex');
	      var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	
	      return _react2.default.createElement(
	        _Portal2.default,
	        { renderNode: renderNode, visible: portalVisible, lastChild: lastChild },
	        _react2.default.createElement(
	          _Paper2.default,
	          _extends({}, props, {
	            className: (0, _classnames2.default)('md-bottom-navigation', {
	              'md-background--card': !colored,
	              'md-background--primary': colored,
	              'md-bottom-navigation--dynamic': dynamic,
	              'md-bottom-navigation--dynamic-inactive': dynamic && !visible
	            }, className),
	            role: 'navigation'
	          }),
	          links.map(function (action, index) {
	            return _react2.default.createElement(_BottomNav2.default, _extends({}, action, {
	              key: action.key || index,
	              index: index,
	              onNavChange: _this3._handleNavChange,
	              active: activeIndex === index,
	              colored: colored,
	              fixed: fixed
	            }));
	          })
	        )
	      );
	    }
	  }]);
	
	  return BottomNavigation;
	}(_react.PureComponent);
	
	BottomNavigation.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A list of objects to generate a bottom navigation link. There must be at least 3 and no more
	   * than 5 links. A link gets rendered as the `AccessibleFakeButton` component, so any additional
	   * props in the link's shape will be passed along.
	   *
	   * ```docgen
	   * PropTypes.arrayOf(PropTypes.shape({
	   *   label: PropTypes.node.isRequired,
	   *   iconChildren: PropTypes.node,
	   *   iconClassName: PropTypes.string,
	   *   component: PropTypes.oneOfType([
	   *      PropTypes.func,
	   *      PropTypes.string,
	   *   ]),
	   * }).isRequired
	   * ```
	   */
	  links: function links(props, propName, component) {
	    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      args[_key - 3] = arguments[_key];
	    }
	
	    var _PropTypes$arrayOf;
	
	    var links = props[propName] || props.actions;
	    var len = links.length;
	
	    if (len < 3) {
	      return new Error('Only ' + len + ' `' + propName + '` were given to the ' + component + '. At least 3 are required.');
	    } else if (len > 5) {
	      return new Error(len + ' `' + propName + '` were given to the ' + component + '. No more than 5 may be given.');
	    }
	
	    return (_PropTypes$arrayOf = _propTypes2.default.arrayOf(_propTypes2.default.shape({
	      label: _propTypes2.default.node.isRequired,
	      iconChildren: _propTypes2.default.node,
	      iconClassName: _propTypes2.default.string,
	      component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
	    }))).isRequired.apply(_PropTypes$arrayOf, [props, propName, component].concat(args));
	  },
	
	  /**
	   * Boolean if the bottom navigation should be colored with the primary color or whatever color
	   * was a result of the `react-md-theme-bottom-navigations-colored` mixin.
	   */
	  colored: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the bottom navigation should dynamically appear based on scrolling. When the user
	   * scrolls the `dynamicThreshold` amount, this component will either disappear (scrolling down)
	   * or appera (scrolling up).
	   */
	  dynamic: _propTypes2.default.bool,
	
	  /**
	   * The distance a user must scroll before the bottom navigation appears or disappears when it is `dyanamic`.
	   */
	  dynamicThreshold: _propTypes2.default.number.isRequired,
	
	  /**
	   * An optional function to call when a link has been clicked. The callback will
	   * include the new active index and the click event.
	   *
	   * ```js
	   * onNavChange(newActiveIndex, event);
	   * ```
	   */
	  onNavChange: _propTypes2.default.func,
	
	  /**
	   * An optional active index to use. This will make the component controlled and require the
	   * `onNavChange` prop to be defined.
	   */
	  activeIndex: (0, _controlled2.default)(_propTypes2.default.number, 'onNavChange', 'defaultActiveIndex'),
	
	  /**
	   * The index for the link that is active by default.
	   */
	  defaultActiveIndex: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the bottom navigation is visible by default. This *should* probably always
	   * be true.
	   */
	  defaultVisible: _propTypes2.default.bool.isRequired,
	
	  /**
	   * The component to render the bottom navigation as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * Since the `BottomNavigation` component uses the `Portal` component, you can pass an optional
	   * HTML Node to render in.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the bottom navigation should render as the last child in the `renderNode` or `body`
	   * instead of as the first.
	   */
	  lastChild: _propTypes2.default.bool,
	
	  /**
	   * The transition duration for the dynamic bottom navigation to appear or disappear. This should
	   * match the `$md-bottom-navigation-transition-time` variable.
	   */
	  transitionDuration: _propTypes2.default.number.isRequired,
	
	  /**
	   * An optional function to call when the visibility of the bottom navigation changes. The callback
	   * will include the new visibility.
	   *
	   * ```js
	   * onVisibilityChange(!visible);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,
	
	  onChange: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onNavChange` instead'),
	  initiallyVisible: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  initialActiveIndex: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `defaultActiveIndex` instead'),
	  containerStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'Use `style` instead'),
	  containerClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `className` instead'),
	  transitionName: (0, _deprecated2.default)(_propTypes2.default.string, 'There is no CSSTransitionGroup used anymore'),
	  transitionEnterTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transitionDuration` instead'),
	  transitionLeaveTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transitionDuration` instead'),
	  actions: (0, _deprecated2.default)(_propTypes2.default.array, 'Use `links` instead')
	};
	BottomNavigation.defaultProps = {
	  defaultActiveIndex: 0,
	  component: 'footer',
	  defaultVisible: true,
	  transitionDuration: 300,
	  dynamicThreshold: 20
	};
	BottomNavigation.contextTypes = {
	  renderNode: _propTypes2.default.object
	};
	exports.default = BottomNavigation;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _BottomNavigation = __webpack_require__(155);
	
	var _BottomNavigation2 = _interopRequireDefault(_BottomNavigation);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _BottomNavigation2.default;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _componentDeprecated = __webpack_require__(18);
	
	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var FlatButton = function (_PureComponent) {
	  _inherits(FlatButton, _PureComponent);
	
	  function FlatButton() {
	    _classCallCheck(this, FlatButton);
	
	    return _possibleConstructorReturn(this, (FlatButton.__proto__ || Object.getPrototypeOf(FlatButton)).apply(this, arguments));
	  }
	
	  _createClass(FlatButton, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(_Button2.default, _extends({}, this.props, { flat: true }));
	    }
	  }]);
	
	  return FlatButton;
	}(_react.PureComponent);
	
	FlatButton.propTypes = {
	  /**
	   * The label to display in the button.
	   */
	  label: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if the icon should be displayed before the label.
	   */
	  iconBefore: _propTypes2.default.bool,
	
	  /**
	   * A `FontIcon` to display in the button. It can be placed before
	   * or after the label.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,
	
	  /**
	   * Boolean if the button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,
	
	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `FlatButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` compnent and add a ' + 'prop `flat`.')
	};
	FlatButton.defaultProps = {
	  type: 'button',
	  iconBefore: true
	};
	exports.default = FlatButton;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _componentDeprecated = __webpack_require__(18);
	
	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);
	
	var _IconButton = __webpack_require__(87);
	
	var _IconButton2 = _interopRequireDefault(_IconButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A `FloatingButton` is an extension of the `IconButton`.
	 * A tooltip can be displayed on hover or touch hold if the
	 * `tooltipLabel` prop is given.
	 *
	 * Another name for this button is a `FloatingActionButton` (FAB).
	 *
	 * Any other props (such as style or event listeners) will also be
	 * applied.
	 */
	var FloatingButton = function (_PureComponent) {
	  _inherits(FloatingButton, _PureComponent);
	
	  function FloatingButton() {
	    _classCallCheck(this, FloatingButton);
	
	    return _possibleConstructorReturn(this, (FloatingButton.__proto__ || Object.getPrototypeOf(FloatingButton)).apply(this, arguments));
	  }
	
	  _createClass(FloatingButton, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          fixed = _props.fixed,
	          mini = _props.mini,
	          children = _props.children,
	          iconClassName = _props.iconClassName,
	          props = _objectWithoutProperties(_props, ['className', 'fixed', 'mini', 'children', 'iconClassName']);
	
	      return _react2.default.createElement(
	        _IconButton2.default,
	        _extends({}, props, {
	          className: (0, _classnames2.default)({
	            'md-btn--floating-fixed': fixed,
	            'md-btn--floating-mini': mini
	          }, className),
	          iconClassName: iconClassName,
	          floating: true
	        }),
	        children
	      );
	    }
	  }]);
	
	  return FloatingButton;
	}(_react.PureComponent);
	
	FloatingButton.propTypes = {
	  /**
	   * The className to use for rendering the `FontIcon`.
	   */
	  iconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children to use to render the `FontIcon`.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,
	
	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,
	
	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional label to use if you would like a tooltip to display
	   * on hover or touch hold.
	   */
	  tooltipLabel: _propTypes2.default.node,
	
	  /**
	   * The position that the tooltip should be displayed relative to
	   * the button.
	   */
	  tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	
	  /**
	   * An optional amount of delay before the tooltip appears.
	   */
	  tooltipDelay: _propTypes2.default.number,
	
	  /**
	   * Boolean if the floating button is fixed.
	   */
	  fixed: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the floating button should be displayed as the mini
	   * version.
	   */
	  mini: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the floating button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the floating button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,
	
	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `FloatingButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` compnent and add a ' + 'prop `floating`.')
	};
	exports.default = FloatingButton;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _componentDeprecated = __webpack_require__(18);
	
	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RaisedButton = function (_PureComponent) {
	  _inherits(RaisedButton, _PureComponent);
	
	  function RaisedButton() {
	    _classCallCheck(this, RaisedButton);
	
	    return _possibleConstructorReturn(this, (RaisedButton.__proto__ || Object.getPrototypeOf(RaisedButton)).apply(this, arguments));
	  }
	
	  _createClass(RaisedButton, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(_Button2.default, _extends({}, this.props, { raised: true }));
	    }
	  }]);
	
	  return RaisedButton;
	}(_react.PureComponent);
	
	RaisedButton.propTypes = {
	  /**
	   * The label to display in the button.
	   */
	  label: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if the icon should be displayed before the label.
	   */
	  iconBefore: _propTypes2.default.bool,
	
	  /**
	   * A `FontIcon` to display in the button. It can be placed before
	   * or after the label.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The button type.
	   */
	  type: _propTypes2.default.string,
	
	  /**
	   * Boolean if the button should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the button should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the button is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional href to convert the button into a link button.
	   */
	  href: _propTypes2.default.string,
	
	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  deprecated: (0, _componentDeprecated2.default)('The behavior of the `RaisedButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` compnent and add a ' + 'prop `raised`.')
	};
	RaisedButton.defaultProps = {
	  type: 'button',
	  iconBefore: true
	};
	exports.default = RaisedButton;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.IconButton = exports.FloatingButton = exports.RaisedButton = exports.FlatButton = exports.Button = undefined;
	
	var _Button2 = __webpack_require__(10);
	
	var _Button3 = _interopRequireDefault(_Button2);
	
	var _FlatButton2 = __webpack_require__(157);
	
	var _FlatButton3 = _interopRequireDefault(_FlatButton2);
	
	var _RaisedButton2 = __webpack_require__(159);
	
	var _RaisedButton3 = _interopRequireDefault(_RaisedButton2);
	
	var _FloatingButton2 = __webpack_require__(158);
	
	var _FloatingButton3 = _interopRequireDefault(_FloatingButton2);
	
	var _IconButton2 = __webpack_require__(87);
	
	var _IconButton3 = _interopRequireDefault(_IconButton2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Button3.default;
	exports.Button = _Button3.default;
	exports.FlatButton = _FlatButton3.default;
	exports.RaisedButton = _RaisedButton3.default;
	exports.FloatingButton = _FloatingButton3.default;
	exports.IconButton = _IconButton3.default;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _contextTypes = __webpack_require__(92);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _Collapse = __webpack_require__(17);
	
	var _Collapse2 = _interopRequireDefault(_Collapse);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Card = function (_PureComponent) {
	  _inherits(Card, _PureComponent);
	
	  function Card(props) {
	    _classCallCheck(this, Card);
	
	    var _this = _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).call(this, props));
	
	    _this.state = {
	      zDepth: 1,
	      expanded: typeof props.initiallyExpanded !== 'undefined' ? props.initiallyExpanded : !!props.defaultExpanded
	    };
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    _this._handleExpandClick = _this._handleExpandClick.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    return _this;
	  }
	
	  _createClass(Card, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _props = this.props,
	          iconClassName = _props.iconClassName,
	          iconChildren = _props.iconChildren,
	          expanderTooltipLabel = _props.expanderTooltipLabel,
	          expanderTooltipDelay = _props.expanderTooltipDelay,
	          expanderTooltipPosition = _props.expanderTooltipPosition,
	          expanderIconClassName = _props.expanderIconClassName,
	          expanderIconChildren = _props.expanderIconChildren;
	
	
	      var expanded = typeof this.props.isExpanded !== 'undefined' ? this.props.isExpanded : (0, _getField2.default)(this.props, this.state, 'expanded');
	
	      return {
	        expanded: expanded,
	        onExpandClick: this._handleExpandClick,
	        iconClassName: typeof iconClassName !== 'undefined' ? iconClassName : expanderIconClassName,
	        iconChildren: typeof iconChildren !== 'undefined' ? iconChildren : expanderIconChildren,
	        tooltipLabel: expanderTooltipLabel,
	        tooltipDelay: expanderTooltipDelay,
	        tooltipPosition: expanderTooltipPosition
	      };
	    }
	  }, {
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      if (this.props.raise && !this._touched) {
	        this.setState({ zDepth: 4 });
	      }
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      this._touched = false;
	      if (this.props.raise && this.state.zDepth !== 1) {
	        this.setState({ zDepth: 1 });
	      }
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      if (this.props.onTouchStart) {
	        this.props.onTouchStart(e);
	      }
	
	      this._touched = true;
	    }
	  }, {
	    key: '_handleExpandClick',
	    value: function _handleExpandClick(e) {
	      var onExpanderClick = this.props.onExpanderClick;
	
	      var expanded = !(0, _getField2.default)(this.props, this.state, 'expanded');
	      if (onExpanderClick) {
	        onExpanderClick(expanded, e);
	      }
	
	      if (typeof this.props.expanded === 'undefined') {
	        this.setState({ expanded: expanded });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var zDepth = this.state.zDepth;
	
	      var _props2 = this.props,
	          className = _props2.className,
	          raise = _props2.raise,
	          tableCard = _props2.tableCard,
	          children = _props2.children,
	          props = _objectWithoutProperties(_props2, ['className', 'raise', 'tableCard', 'children']);
	
	      delete props.expanded;
	      delete props.isExpanded;
	      delete props.onExpanderClick;
	      delete props.initiallyExpanded;
	      delete props.defaultExpanded;
	      delete props.iconChildren;
	      delete props.iconClassName;
	      delete props.expanderIconChildren;
	      delete props.expanderIconClassName;
	      delete props.expanderTooltipLabel;
	      delete props.expanderTooltipDelay;
	      delete props.expanderTooltipPosition;
	
	      var expanded = typeof this.props.isExpanded !== 'undefined' ? this.props.isExpanded : (0, _getField2.default)(this.props, this.state, 'expanded');
	      var expanderIndex = -1;
	      var parts = _react.Children.map(_react.Children.toArray(children), function (child, i) {
	        if (!child || !child.props) {
	          return child;
	        } else if (expanderIndex < 0 && (child.props.isExpander || child.props.expander)) {
	          expanderIndex = i;
	        }
	
	        if (!child.props.expandable) {
	          return child;
	        }
	
	        var collapsed = expanderIndex === -1 || expanderIndex === i || !expanded;
	        return _react2.default.createElement(
	          _Collapse2.default,
	          { collapsed: collapsed },
	          child
	        );
	      });
	
	      return _react2.default.createElement(
	        _Paper2.default,
	        _extends({}, props, {
	          zDepth: zDepth,
	          className: (0, _classnames2.default)('md-card', {
	            'md-card--raise': raise,
	            'md-card--table': tableCard
	          }, 'md-background--card', className),
	          onMouseOver: this._handleMouseOver,
	          onMouseLeave: this._handleMouseLeave,
	          onTouchStart: this._handleTouchStart
	        }),
	        parts
	      );
	    }
	  }]);
	
	  return Card;
	}(_react.PureComponent);
	
	Card.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the card.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Any Card parts that should be rendered.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the card is expanded by default when there is an expander
	   * component.
	   */
	  defaultExpanded: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the card should raise on hover when on a desktop display.
	   */
	  raise: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the card is currently expanded. This will require the `onExpanderClick` function
	   * to toggle the state. The card will become controlled if this is not `undefined`.
	   */
	  expanded: (0, _controlled2.default)(_propTypes2.default.bool, 'onExpanderClick', 'defaultExpanded'),
	
	  /**
	   * An optional function to call when the expander is clicked.
	   */
	  onExpanderClick: _propTypes2.default.func,
	
	  /**
	   * The icon className to use for the expander icon.
	   */
	  expanderIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any icon children required for the expander icon.
	   */
	  expanderIconChildren: _propTypes2.default.node,
	
	  /**
	   * The tooltip position for the expander icon.
	   */
	  expanderTooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),
	
	  /**
	   * The optional tooltip to display for the expander icon.
	   */
	  expanderTooltipLabel: _propTypes2.default.node,
	
	  /**
	   * An optional delay before the tooltip appears for the expander icon on hover.
	   */
	  expanderTooltipDelay: _propTypes2.default.number,
	
	  /**
	   * Boolean if the card contains a table. It will update the styling accordingly.
	   * When using the `DataTable` component, do not wrap it in a `CardText` component.
	   *
	   * ```js
	   * <Card tableCard={true}>
	   *   <CardTitle title="Example />
	   *   <DataTable>
	   *     ...
	   *   </DataTable>
	   * </Card>
	   * ```
	   */
	  tableCard: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when the mouseover event is triggered.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the mouseleave event is triggered.
	   */
	  onMouseLeave: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the touchstart event is triggered.
	   */
	  onTouchStart: _propTypes2.default.func,
	  initiallyExpanded: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultExpanded` instead'),
	  isExpanded: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `expanded` instead'),
	  iconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `expanderIconChildren` prop instead'),
	  iconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use the `expanderIconClassName` prop instead')
	};
	Card.defaultProps = {
	  expanderIconChildren: 'keyboard_arrow_down',
	  expanderIconClassName: 'material-icons',
	  expanderTooltipPosition: 'left'
	};
	Card.childContextTypes = _contextTypes2.default;
	exports.default = Card;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _CardTitle = __webpack_require__(90);
	
	var _CardTitle2 = _interopRequireDefault(_CardTitle);
	
	var _CardActions = __webpack_require__(88);
	
	var _CardActions2 = _interopRequireDefault(_CardActions);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	var _componentDeprecated = __webpack_require__(18);
	
	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `CardActionOverlay` component is a simple wrapper for generating an overlay
	 * for the `CardMedia` component by having a `CardTitle` and an array of props
	 * for generating `FlatButton` for the `CardActions` component.
	 */
	var CardActionOverlay = function (_PureComponent) {
	  _inherits(CardActionOverlay, _PureComponent);
	
	  function CardActionOverlay() {
	    _classCallCheck(this, CardActionOverlay);
	
	    return _possibleConstructorReturn(this, (CardActionOverlay.__proto__ || Object.getPrototypeOf(CardActionOverlay)).apply(this, arguments));
	  }
	
	  _createClass(CardActionOverlay, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          actions = _props.actions,
	          titleProps = _objectWithoutProperties(_props, ['actions']);
	
	      return _react2.default.createElement(
	        'span',
	        null,
	        _react2.default.createElement(_CardTitle2.default, titleProps),
	        _react2.default.createElement(
	          _CardActions2.default,
	          null,
	          actions.map(function (actionProps, i) {
	            return _react2.default.createElement(_Button2.default, _extends({ flat: true, key: i }, actionProps));
	          })
	        )
	      );
	    }
	  }]);
	
	  return CardActionOverlay;
	}(_react.PureComponent);
	
	CardActionOverlay.propTypes = {
	  /**
	   * The title to use.
	   */
	  title: _propTypes2.default.node,
	
	  /**
	   * The optional subtitle to use.
	   */
	  subtitle: _propTypes2.default.node,
	
	  /**
	   * An array of flat button props.
	   */
	  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	    label: _propTypes2.default.node.isRequired
	  })),
	
	  /**
	   * Any children to display in the `CardTitle` component.
	   */
	  children: _propTypes2.default.node,
	  deprecated: (0, _componentDeprecated2.default)('It is not a worthwhile component since the same thing can be accomplished with the `MediaOverlay` component.')
	};
	exports.default = CardActionOverlay;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _componentDeprecated = __webpack_require__(18);
	
	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);
	
	var _Media = __webpack_require__(99);
	
	var _Media2 = _interopRequireDefault(_Media);
	
	var _MediaOverlay = __webpack_require__(100);
	
	var _MediaOverlay2 = _interopRequireDefault(_MediaOverlay);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `CardMedia` component is used to display images or some sort
	 * media.
	 */
	var CardMedia = function (_PureComponent) {
	  _inherits(CardMedia, _PureComponent);
	
	  function CardMedia() {
	    _classCallCheck(this, CardMedia);
	
	    return _possibleConstructorReturn(this, (CardMedia.__proto__ || Object.getPrototypeOf(CardMedia)).apply(this, arguments));
	  }
	
	  _createClass(CardMedia, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          children = _props.children,
	          props = _objectWithoutProperties(_props, ['className', 'children']);
	
	      delete props.overlay;
	
	      var overlay = this.props.overlay;
	
	      if (overlay) {
	        overlay = _react2.default.createElement(
	          _MediaOverlay2.default,
	          null,
	          overlay
	        );
	      }
	
	      return _react2.default.createElement(
	        _Media2.default,
	        _extends({ className: (0, _classnames2.default)('md-card-media', className) }, props),
	        children,
	        overlay
	      );
	    }
	  }]);
	
	  return CardMedia;
	}(_react.PureComponent);
	
	CardMedia.aspect = {
	  equal: '1-1',
	  wide: '16-9'
	};
	CardMedia.propTypes = {
	  /**
	   * An optional className to apply to the card media component.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional overlay component to be rendered over the media. This *should*
	   * be A `CardTitle`, `CardActions` or both.
	   */
	  overlay: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `MediaOverlay` component as a child instead'),
	
	  /**
	   * Any media to display.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the aspect ratio should be forced.
	   */
	  forceAspect: _propTypes2.default.bool,
	
	  /**
	   * The aspect ratio to use.
	   */
	  aspectRatio: _propTypes2.default.oneOf([CardMedia.aspect.equal, CardMedia.aspect.wide]).isRequired,
	
	  /**
	   * Boolean if this component should be expandable when there is a `CardExpander`
	   * above it in the `Card`.
	   */
	  expandable: _propTypes2.default.bool,
	
	  /**
	   * The component to render the card media as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  deprecated: (0, _componentDeprecated2.default)('There were no unique styles for media in cards so it is simpler to just use the ' + '`Media` component.')
	};
	CardMedia.defaultProps = {
	  forceAspect: true,
	  aspectRatio: CardMedia.aspect.wide,
	  component: 'section'
	};
	exports.default = CardMedia;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `CardText` component is a simple wrapper for text or any content in a `Card`.
	 * It really just adds correct padding and font color.
	 */
	var CardText = function (_PureComponent) {
	  _inherits(CardText, _PureComponent);
	
	  function CardText() {
	    _classCallCheck(this, CardText);
	
	    return _possibleConstructorReturn(this, (CardText.__proto__ || Object.getPrototypeOf(CardText)).apply(this, arguments));
	  }
	
	  _createClass(CardText, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Component = _props.component,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['component', 'className']);
	
	      delete props.expandable;
	
	      return _react2.default.createElement(Component, _extends({}, props, { className: (0, _classnames2.default)('md-card-text', className) }));
	    }
	  }]);
	
	  return CardText;
	}(_react.PureComponent);
	
	CardText.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The children to display.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The component to render as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,
	
	  /**
	   * Boolean if this component should be expandable when there is a `CardExpander`
	   * above it in the `Card`.
	   */
	  expandable: _propTypes2.default.bool
	};
	CardText.defaultProps = {
	  component: 'section'
	};
	exports.default = CardText;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CardActionOverlay = exports.CardText = exports.CardActions = exports.CardMedia = exports.CardTitle = exports.Card = undefined;
	
	var _Card2 = __webpack_require__(161);
	
	var _Card3 = _interopRequireDefault(_Card2);
	
	var _CardTitle2 = __webpack_require__(90);
	
	var _CardTitle3 = _interopRequireDefault(_CardTitle2);
	
	var _CardMedia2 = __webpack_require__(163);
	
	var _CardMedia3 = _interopRequireDefault(_CardMedia2);
	
	var _CardActions2 = __webpack_require__(88);
	
	var _CardActions3 = _interopRequireDefault(_CardActions2);
	
	var _CardText2 = __webpack_require__(164);
	
	var _CardText3 = _interopRequireDefault(_CardText2);
	
	var _CardActionOverlay2 = __webpack_require__(162);
	
	var _CardActionOverlay3 = _interopRequireDefault(_CardActionOverlay2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Card3.default;
	exports.Card = _Card3.default;
	exports.CardTitle = _CardTitle3.default;
	exports.CardMedia = _CardMedia3.default;
	exports.CardActions = _CardActions3.default;
	exports.CardText = _CardText3.default;
	exports.CardActionOverlay = _CardActionOverlay3.default;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Chip = function (_PureComponent) {
	  _inherits(Chip, _PureComponent);
	
	  function Chip(props) {
	    _classCallCheck(this, Chip);
	
	    var _this = _possibleConstructorReturn(this, (Chip.__proto__ || Object.getPrototypeOf(Chip)).call(this, props));
	
	    _this.state = { hover: false };
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    return _this;
	  }
	
	  _createClass(Chip, [{
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      this.setState({ hover: true });
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      this.setState({ hover: false });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var hover = this.state.hover;
	
	      var _props = this.props,
	          label = _props.label,
	          className = _props.className,
	          iconClassName = _props.iconClassName,
	          avatar = _props.avatar,
	          children = _props.children,
	          removable = _props.removable,
	          remove = _props.remove,
	          onClick = _props.onClick,
	          rotateIcon = _props.rotateIcon,
	          props = _objectWithoutProperties(_props, ['label', 'className', 'iconClassName', 'avatar', 'children', 'removable', 'remove', 'onClick', 'rotateIcon']);
	
	      delete props.removeIconChildren;
	      delete props.removeIconClassName;
	
	      var icon = void 0;
	      if (removable || remove) {
	        icon = _react2.default.createElement(
	          _FontIcon2.default,
	          {
	            className: (0, _classnames2.default)('md-chip-icon', {
	              'md-chip-icon--rotate': rotateIcon,
	              'md-chip-text--hover': hover
	            }),
	            iconClassName: iconClassName
	          },
	          children
	        );
	      }
	
	      return _react2.default.createElement(
	        'button',
	        _extends({
	          type: 'button'
	        }, props, {
	          className: (0, _classnames2.default)('md-chip', {
	            'md-chip--avatar': avatar,
	            'md-chip--remove': removable,
	            'md-chip--hover': hover
	          }, className),
	          onClick: remove || onClick,
	          onMouseOver: this._handleMouseOver,
	          onMouseLeave: this._handleMouseLeave
	        }),
	        avatar,
	        _react2.default.createElement(
	          'span',
	          {
	            className: (0, _classnames2.default)('md-chip-text', {
	              'md-chip-text--hover': hover
	            })
	          },
	          label
	        ),
	        icon
	      );
	    }
	  }]);
	
	  return Chip;
	}(_react.PureComponent);
	
	Chip.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional icon className to use for the remove icon when `removable`.
	   */
	  iconClassName: _propTypes2.default.string,
	
	  /**
	   * Boolean if the `.md-chip-icon--rotate` style should be applied to the remove icon.
	   * The `.md-chip-icon--rotate` just rotates the icon 45 degrees.
	   */
	  rotateIcon: _propTypes2.default.bool,
	
	  /**
	   * Any children used to display the remove icon when `removable`.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The label to display on the chip.
	   */
	  label: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the chip is removable.
	   */
	  removable: _propTypes2.default.bool,
	
	  /**
	   * An optional avatar to display on the chip.
	   */
	  avatar: _propTypes2.default.element,
	
	  /**
	   * An optional function to call when the `click` event is triggered.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `mouseover` event is triggered.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `mouseleave` event is triggered.
	   */
	  onMouseLeave: _propTypes2.default.func,
	  remove: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `removable` and `onClick` instead'),
	  removeIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `iconChildren` instead'),
	  removeIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `iconClassName` instead')
	};
	Chip.defaultProps = {
	  rotateIcon: true,
	  children: 'add_circle'
	};
	exports.default = Chip;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Chip = __webpack_require__(166);
	
	var _Chip2 = _interopRequireDefault(_Chip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Chip2.default;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _requiredForA11yIfNot = __webpack_require__(279);
	
	var _requiredForA11yIfNot2 = _interopRequireDefault(_requiredForA11yIfNot);
	
	var _invalidIf = __webpack_require__(19);
	
	var _invalidIf2 = _interopRequireDefault(_invalidIf);
	
	var _contextTypes = __webpack_require__(43);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `DataTable` component is used to manage the state of all rows.
	 * This can either be a __plain__ table or a __data__ table.
	 *
	 * A __data__ table will include checkboxes on each row while a __plain__ table
	 * will not.
	 */
	var DataTable = function (_PureComponent) {
	  _inherits(DataTable, _PureComponent);
	
	  function DataTable(props) {
	    _classCallCheck(this, DataTable);
	
	    var _this = _possibleConstructorReturn(this, (DataTable.__proto__ || Object.getPrototypeOf(DataTable)).call(this, props));
	
	    var rows = props.defaultSelectedRows;
	    _this.state = {
	      allSelected: _this._allSelected(rows),
	      selectedRows: rows
	    };
	
	    _this._removed = 0;
	    _this._initial = true;
	    _this._toggleAllRows = _this._toggleAllRows.bind(_this);
	    _this._toggleSelectedRow = _this._toggleSelectedRow.bind(_this);
	    _this._createCheckbox = _this._createCheckbox.bind(_this);
	    _this._removeCheckbox = _this._removeCheckbox.bind(_this);
	    return _this;
	  }
	
	  _createClass(DataTable, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _props = this.props,
	          uncheckedIconChildren = _props.uncheckedIconChildren,
	          uncheckedIconClassName = _props.uncheckedIconClassName,
	          checkedIconChildren = _props.checkedIconChildren,
	          checkedIconClassName = _props.checkedIconClassName,
	          plain = _props.plain,
	          baseId = _props.baseId;
	
	
	      return {
	        uncheckedIconChildren: uncheckedIconChildren,
	        uncheckedIconClassName: uncheckedIconClassName,
	        checkedIconChildren: checkedIconChildren,
	        checkedIconClassName: checkedIconClassName,
	        plain: plain,
	        allSelected: this.state.allSelected,
	        selectedRows: this.state.selectedRows,
	        toggleAllRows: this._toggleAllRows,
	        toggleSelectedRow: this._toggleSelectedRow,
	        createCheckbox: this._createCheckbox,
	        removeCheckbox: this._removeCheckbox,
	        baseId: baseId,
	        baseName: baseId + '-control'
	      };
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._removed = 0;
	      this._initial = false;
	    }
	  }, {
	    key: '_allSelected',
	    value: function _allSelected(rows) {
	      var all = rows.length !== 0;
	      rows.some(function (checked) {
	        if (!checked) {
	          all = false;
	        }
	
	        return !all;
	      });
	
	      return all;
	    }
	  }, {
	    key: '_createCheckbox',
	    value: function _createCheckbox(index) {
	      var _this2 = this;
	
	      this.setState(function (state, props) {
	        var selectedRows = state.selectedRows.slice();
	        // Only use the default selected rows prop on first mount. If other changes occur after,
	        // default to false.
	        var selected = _this2._initial && props.defaultSelectedRows[index] || false;
	        selectedRows.splice(index, 0, selected);
	        return { selectedRows: selectedRows, allSelected: _this2._allSelected(selectedRows) };
	      });
	    }
	  }, {
	    key: '_removeCheckbox',
	    value: function _removeCheckbox(index) {
	      var _this3 = this;
	
	      this.setState(function (state) {
	        // When multiple checkboxes are removed in a render cycle, they are removed in list order.
	        // So to keep the index correct while removing, need to keep subract the provided index by
	        // the current number of removed elements. This value gets reset to 0 after a finished cycle.
	        var selectedRows = state.selectedRows.slice();
	        selectedRows.splice(index - _this3._removed, 1);
	        _this3._removed += 1;
	        return { selectedRows: selectedRows, allSelected: _this3._allSelected(selectedRows) };
	      });
	    }
	  }, {
	    key: '_toggleAllRows',
	    value: function _toggleAllRows() {
	      var allSelected = !this.state.allSelected;
	      if (this.props.onRowToggle) {
	        this.props.onRowToggle(-1, allSelected, allSelected ? this.state.selectedRows.length : 0);
	      }
	
	      this.setState({
	        allSelected: allSelected,
	        selectedRows: this.state.selectedRows.map(function () {
	          return allSelected;
	        })
	      });
	    }
	  }, {
	    key: '_toggleSelectedRow',
	    value: function _toggleSelectedRow(row) {
	      var selectedRows = this.state.selectedRows.slice();
	      selectedRows[row] = !selectedRows[row];
	      var selectedCount = selectedRows.filter(function (selected) {
	        return selected;
	      }).length;
	
	      if (this.props.onRowToggle) {
	        this.props.onRowToggle(row, selectedRows[row], selectedCount);
	      }
	
	      this.setState({ selectedRows: selectedRows, allSelected: this._allSelected(selectedRows) });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          className = _props2.className,
	          children = _props2.children,
	          plain = _props2.plain,
	          responsive = _props2.responsive,
	          props = _objectWithoutProperties(_props2, ['className', 'children', 'plain', 'responsive']);
	
	      delete props.checkedIconChildren;
	      delete props.checkedIconClassName;
	      delete props.uncheckedIconChildren;
	      delete props.uncheckedIconClassName;
	      delete props.defaultSelectedRows;
	      delete props.baseId;
	      delete props.onRowToggle;
	
	      var table = _react2.default.createElement(
	        'table',
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-data-table', {
	            'md-data-table--plain': plain
	          }, className)
	        }),
	        children
	      );
	
	      return responsive ? _react2.default.createElement(
	        'div',
	        { className: 'md-data-table--responsive' },
	        table
	      ) : table;
	    }
	  }]);
	
	  return DataTable;
	}(_react.PureComponent);
	
	DataTable.propTypes = {
	  /**
	   * A base id to use for every checkbox or `EditDialogColumn` in the data table. This is
	   * required for a11y if the data table is not plain.
	   */
	  baseId: (0, _requiredForA11yIfNot2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]), 'plain'),
	
	  /**
	   * Optional style to apply to the table.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the table.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The table contents to display. This *should* be a list of `TableHeader` and `TableBody`
	   * components.
	   */
	  children: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional array of booleans denoting if a row is selected.
	   * This is an associative array so the index must match the row
	   * number in the `TableBody` component.
	   */
	  defaultSelectedRows: _propTypes2.default.arrayOf(_propTypes2.default.bool).isRequired,
	
	  /**
	   * Boolean if the table is responsive. This will wrap the table in a container
	   * that allows scrolling to the right if overflow exists.
	   */
	  responsive: _propTypes2.default.bool.isRequired,
	
	  /**
	   * Boolean if this table should not include the checkboxes on each row.
	   * This really means that the entire table is unselectable and you wish
	   * to display as a normal table.
	   */
	  plain: _propTypes2.default.bool,
	
	  /**
	   * The icon className to use for the unchecked row icon. This value
	   * will be passed down as `context`.
	   */
	  uncheckedIconClassName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The icon children to use for the unchecked row icon. This value
	   * will be passed down as `context`.
	   */
	  uncheckedIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className to use for the checked row icon. This value
	   * will be passed down as `context`.
	   */
	  checkedIconClassName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The icon children to use for the checked row icon. This value
	   * will be passed down as `context`.
	   */
	  checkedIconChildren: _propTypes2.default.node,
	
	  /**
	   * An optional function to call when a non-plain data table has a row toggled.
	   * The callback will include the selected row id, the boolean if it is now selected,
	   * and the count of rows that are selected. If the checkbox in the `TableHeader` was
	   * clicked, the selected row id will be `-1`.
	   *
	   * ```js
	   * onRowToggle(3, true, 8); // 4th row was toggled
	   * onRowToggle(-1, true, 15); // select all checkbox was toggled on.
	   * ```
	   */
	  onRowToggle: (0, _invalidIf2.default)(_propTypes2.default.func, 'plain')
	};
	DataTable.defaultProps = {
	  uncheckedIconChildren: 'check_box_outline_blank',
	  uncheckedIconClassName: 'material-icons',
	  checkedIconChildren: 'check_box',
	  checkedIconClassName: 'material-icons',
	  defaultSelectedRows: [],
	  responsive: true
	};
	DataTable.childContextTypes = _contextTypes2.default;
	exports.default = DataTable;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _handleWindowClickListeners = __webpack_require__(38);
	
	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);
	
	var _invalidIf = __webpack_require__(19);
	
	var _invalidIf2 = _interopRequireDefault(_invalidIf);
	
	var _DialogFooter = __webpack_require__(34);
	
	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);
	
	var _TableColumn = __webpack_require__(56);
	
	var _TableColumn2 = _interopRequireDefault(_TableColumn);
	
	var _TextField = __webpack_require__(30);
	
	var _TextField2 = _interopRequireDefault(_TextField);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _findTable = __webpack_require__(44);
	
	var _findTable2 = _interopRequireDefault(_findTable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A Text Edit dialog for tables. This can either be a small
	 * version which only has the text field or a large version
	 * that includes a title with a save and cancel action buttons.
	 */
	var EditDialogColumn = function (_PureComponent) {
	  _inherits(EditDialogColumn, _PureComponent);
	
	  function EditDialogColumn(props, context) {
	    _classCallCheck(this, EditDialogColumn);
	
	    var _this = _possibleConstructorReturn(this, (EditDialogColumn.__proto__ || Object.getPrototypeOf(EditDialogColumn)).call(this, props, context));
	
	    _this.state = {
	      value: props.defaultValue,
	      active: false,
	      absolute: false,
	      animating: false
	    };
	
	    _this._table = null;
	    _this._column = null;
	    _this._field = null;
	
	    _this._setColumn = _this._setColumn.bind(_this);
	    _this._setDialog = _this._setDialog.bind(_this);
	    _this._setField = _this._setField.bind(_this);
	    _this._setOkButton = _this._setOkButton.bind(_this);
	    _this._save = _this._save.bind(_this);
	    _this._overrideTab = _this._overrideTab.bind(_this);
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleChange = _this._handleChange.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleCancelClick = _this._handleCancelClick.bind(_this);
	    _this._handleClickOutside = _this._handleClickOutside.bind(_this);
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    _this._positionCell = _this._positionCell.bind(_this);
	    _this._repositionCell = _this._repositionCell.bind(_this);
	    _this._activateDialog = _this._activateDialog.bind(_this);
	    return _this;
	  }
	
	  _createClass(EditDialogColumn, [{
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var active = this.state.active;
	
	      if (active === prevState.active) {
	        return;
	      } else if (this._table) {
	        this._table[(active ? 'add' : 'remove') + 'EventListener']('scroll', this._repositionCell);
	        this._left = active ? this.state.left : null;
	        this._scrollLeft = active ? this._table.scrollLeft : null;
	      }
	
	      (0, _handleWindowClickListeners2.default)(this._handleClickOutside, active);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      (0, _handleWindowClickListeners2.default)(this._handleClickOutside, false);
	
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	    }
	  }, {
	    key: '_getDialogPosition',
	    value: function _getDialogPosition(dialog) {
	      var left = null;
	      var width = null;
	      if (dialog) {
	        left = dialog.getBoundingClientRect().left - 1;
	        width = dialog.offsetWidth;
	      }
	
	      return { width: width, left: left };
	    }
	  }, {
	    key: '_setColumn',
	    value: function _setColumn(column) {
	      this._column = (0, _reactDom.findDOMNode)(column);
	      this._table = (0, _findTable2.default)(this._column);
	    }
	  }, {
	    key: '_setDialog',
	    value: function _setDialog(dialog) {
	      this._dialog = dialog;
	    }
	  }, {
	    key: '_setField',
	    value: function _setField(field) {
	      if (field) {
	        this._field = field.getField();
	      }
	    }
	  }, {
	    key: '_setOkButton',
	    value: function _setOkButton(okButton) {
	      this._okButton = (0, _reactDom.findDOMNode)(okButton);
	    }
	
	    /**
	     * This function will absolutely position a cell either on mouse over, keyboard tab focus,
	     * or touch start. This allows the table cell to expand outside of the table's scroll view.
	     */
	
	  }, {
	    key: '_positionCell',
	    value: function _positionCell() {
	      if (this.props.inline) {
	        return;
	      }
	
	      var position = void 0;
	      if (!this.state.absolute) {
	        position = this._getDialogPosition(this._dialog, this._table);
	      }
	
	      this.setState(_extends({ absolute: true }, position));
	    }
	
	    /**
	     * When the dialog is open and the user scrolls the data table (for some reason), this will
	     * keep the cell positioned correctly.
	     */
	
	  }, {
	    key: '_repositionCell',
	    value: function _repositionCell() {
	      var _this2 = this;
	
	      if (!this._ticking) {
	        requestAnimationFrame(function () {
	          _this2._ticking = false;
	
	          var left = _this2._left;
	          var scrolledOut = false;
	          if (_this2._table) {
	            var _table = _this2._table,
	                scrollLeft = _table.scrollLeft,
	                offsetWidth = _table.offsetWidth;
	
	            left -= scrollLeft - _this2._scrollLeft;
	            scrolledOut = left < 16 || offsetWidth - left < _this2.state.width * _this2.props.scrollThreshold;
	          }
	
	          var _state = _this2.state,
	              absolute = _state.absolute,
	              active = _state.active;
	
	          if (!_this2._timeout && scrolledOut) {
	            _this2._timeout = setTimeout(function () {
	              _this2._timeout = null;
	              _this2.setState({ absolute: false, left: null, width: null });
	            }, _this2.props.transitionDuration);
	            active = false;
	            absolute = true;
	          }
	
	          _this2.setState({ left: left, absolute: absolute, active: active });
	        });
	      }
	
	      this._ticking = true;
	    }
	
	    /**
	     * Activates the dialog after it has already been positioned absolutely. This
	     * is triggered froma  click event, a touchend event, or the callback of the `this.setState`
	     * when coming from a keyboard focus event.
	     *
	     * @param {Object=} e - The click or touchend event.
	     */
	
	  }, {
	    key: '_activateDialog',
	    value: function _activateDialog(e) {
	      if (e) {
	        var callback = void 0;
	        if (e.type === 'click') {
	          callback = 'onClick';
	        } else if (e.type === 'touchend') {
	          callback = 'onTouchEnd';
	        }
	
	        if (callback && this.props[callback]) {
	          this.props[callback](e);
	        }
	      }
	
	      if (this.props.inline || this.state.active) {
	        return;
	      }
	
	      this.setState({ active: true, cancelValue: (0, _getField2.default)(this.props, this.state, 'value') });
	    }
	  }, {
	    key: '_handleClickOutside',
	    value: function _handleClickOutside(e) {
	      if (this._column && !this._column.contains(e.target)) {
	        if (this.props.onOutsideClick) {
	          this.props.onOutsideClick(e);
	        }
	
	        if (this.props.okOnOutsideClick) {
	          this._save(e);
	        } else {
	          this._handleCancelClick(e);
	        }
	      }
	    }
	  }, {
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      this._positionCell();
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      if (this.props.inline) {
	        return;
	      }
	
	      var position = void 0;
	      if (!this.state.active) {
	        position = { width: null, left: null };
	      }
	
	      this.setState(_extends({ absolute: false }, position));
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      var _this3 = this;
	
	      if (this.props.onKeyUp) {
	        this.props.onKeyUp(e);
	      }
	
	      // Make sure this is really a _focus_ event from keyboard
	      if ((e.which || e.keyCode) !== _keyCodes.TAB || this.state.active || this.props.inline) {
	        return;
	      }
	
	      // To get a smooth transition with keybaord, need to _emulate_ how the mouse interaction works.
	      // Basically position the edit field absolutely, wait for a re-render, then activate the dialog.
	      this._timeout = setTimeout(function () {
	        _this3._timeout = null;
	        _this3._activateDialog();
	      }, _CSSTransitionGroupTick2.default);
	      this._positionCell();
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      if (this.props.onTouchStart) {
	        this.props.onTouchStart(e);
	      }
	
	      this._positionCell();
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      var onKeyDown = this.props.onKeyDown;
	
	      if (onKeyDown) {
	        onKeyDown(e);
	      }
	
	      var key = e.which || e.keyCode;
	      if (key === _keyCodes.ENTER) {
	        this._save(e);
	      } else if (key === _keyCodes.TAB) {
	        this._overrideTab(e);
	      } else if (key === _keyCodes.ESC) {
	        this._handleCancelClick(e);
	      }
	    }
	  }, {
	    key: '_overrideTab',
	    value: function _overrideTab(e) {
	      var _props = this.props,
	          large = _props.large,
	          inline = _props.inline,
	          okOnOutsideClick = _props.okOnOutsideClick;
	
	      var key = e.which || e.keyCode;
	      if (key !== _keyCodes.TAB) {
	        return;
	      } else if (inline) {
	        this._save(e);
	        return;
	      } else if (!large) {
	        if (okOnOutsideClick) {
	          this._save(e);
	        } else {
	          this._handleCancelClick(e);
	        }
	        return;
	      }
	
	      var shiftKey = e.shiftKey;
	      var classList = e.target.classList;
	
	
	      var nextFocus = void 0;
	      if (classList.contains('md-text-field') && shiftKey) {
	        nextFocus = this._okButton;
	      } else if (classList.contains('md-btn') && !shiftKey) {
	        nextFocus = this._field;
	      }
	
	      if (nextFocus) {
	        e.preventDefault();
	        nextFocus.focus();
	      }
	    }
	  }, {
	    key: '_save',
	    value: function _save(e) {
	      var _this4 = this;
	
	      if (this.props.onOkClick) {
	        this.props.onOkClick((0, _getField2.default)(this.props, this.state, 'value'), e);
	      }
	
	      this._timeout = setTimeout(function () {
	        _this4._timeout = null;
	        _this4.setState({ absolute: false, left: null, width: null });
	      }, this.props.transitionDuration);
	      this.setState({ active: false, absolute: true });
	    }
	  }, {
	    key: '_handleCancelClick',
	    value: function _handleCancelClick(e) {
	      var _this5 = this;
	
	      if (this.props.onCancelClick) {
	        this.props.onCancelClick(this.state.cancelValue, e);
	      }
	
	      var state = { absolute: true, active: false };
	      if (typeof this.props.value === 'undefined') {
	        state.value = this.state.cancelValue;
	      }
	
	      this._timeout = setTimeout(function () {
	        _this5._timeout = null;
	        _this5.setState({ absolute: false, left: null, width: null });
	      }, this.props.transitionDuration);
	
	      this.setState(state);
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(value, e) {
	      if (this.props.onChange) {
	        this.props.onChange(value, e);
	      }
	
	      if (typeof this.props.value === 'undefined') {
	        this.setState({ value: value });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var rowId = this.context.rowId;
	      var _state2 = this.state,
	          active = _state2.active,
	          absolute = _state2.absolute,
	          animating = _state2.animating,
	          left = _state2.left,
	          width = _state2.width;
	
	      var _props2 = this.props,
	          style = _props2.style,
	          className = _props2.className,
	          dialogStyle = _props2.dialogStyle,
	          dialogClassName = _props2.dialogClassName,
	          textFieldStyle = _props2.textFieldStyle,
	          textFieldClassName = _props2.textFieldClassName,
	          inputStyle = _props2.inputStyle,
	          inputClassName = _props2.inputClassName,
	          maxLength = _props2.maxLength,
	          title = _props2.title,
	          okLabel = _props2.okLabel,
	          cancelLabel = _props2.cancelLabel,
	          large = _props2.large,
	          label = _props2.label,
	          placeholder = _props2.placeholder,
	          inline = _props2.inline,
	          inlineIconChildren = _props2.inlineIconChildren,
	          inlineIconClassName = _props2.inlineIconClassName,
	          noIcon = _props2.noIcon,
	          header = _props2.header,
	          enforceMinWidth = _props2.enforceMinWidth,
	          props = _objectWithoutProperties(_props2, ['style', 'className', 'dialogStyle', 'dialogClassName', 'textFieldStyle', 'textFieldClassName', 'inputStyle', 'inputClassName', 'maxLength', 'title', 'okLabel', 'cancelLabel', 'large', 'label', 'placeholder', 'inline', 'inlineIconChildren', 'inlineIconClassName', 'noIcon', 'header', 'enforceMinWidth']);
	
	      delete props.id;
	      delete props.onMouseOver;
	      delete props.onMouseLeave;
	      delete props.onTouchStart;
	      delete props.onTouchEnd;
	      delete props.value;
	      delete props.defaultValue;
	      delete props.onOkClick;
	      delete props.onCancelClick;
	      delete props.header;
	      delete props.okOnOutsideClick;
	      delete props.transitionDuration;
	      delete props.scrollThreshold;
	
	      var value = (0, _getField2.default)(this.props, this.state, 'value');
	      var id = this.props.id;
	
	      if (!id) {
	        id = rowId + '-edit-dialog';
	      }
	
	      var actions = void 0;
	      var largeTitle = void 0;
	      if (!inline && large && active) {
	        actions = [{
	          label: cancelLabel,
	          onClick: this._handleCancelClick,
	          primary: true
	        }, {
	          label: okLabel,
	          onClick: this._save,
	          primary: true,
	          ref: this._setOkButton,
	          onKeyDown: this._overrideTab
	        }];
	
	        actions = _react2.default.createElement(_DialogFooter2.default, { actions: actions });
	
	        largeTitle = _react2.default.createElement(
	          'h3',
	          { className: 'md-title' },
	          title
	        );
	      }
	
	      var pointer = (0, _classnames2.default)({ 'md-pointer--hover': !active });
	      var inlineEditIcon = void 0;
	      if (inline && !noIcon) {
	        inlineEditIcon = _react2.default.createElement(
	          _FontIcon2.default,
	          { key: 'edit-icon', iconClassName: inlineIconClassName },
	          inlineIconChildren
	        );
	      }
	
	      var ariaProps = {};
	      if (!inline) {
	        ariaProps.id = id + '-container';
	        ariaProps['aria-haspopup'] = true;
	        ariaProps['aria-expanded'] = active;
	        ariaProps['aria-owns'] = id;
	      }
	
	      return _react2.default.createElement(
	        _TableColumn2.default,
	        {
	          style: _extends({ left: left }, style),
	          className: (0, _classnames2.default)('prevent-grow md-edit-dialog-column', {
	            'md-table-column--fixed': !inline && (absolute || active || animating),
	            'md-table-column--fixed-active': active
	          }, className),
	          header: header,
	          ref: this._setColumn,
	          onMouseOver: this._handleMouseOver,
	          onMouseLeave: this._handleMouseLeave,
	          onClick: this._activateDialog,
	          onTouchStart: this._handleTouchStart,
	          onTouchEnd: this._activateDialog,
	          __fixedColumn: true
	        },
	        _react2.default.createElement(
	          'div',
	          _extends({}, ariaProps, {
	            ref: this._setDialog,
	            style: _extends({ width: width }, dialogStyle),
	            className: (0, _classnames2.default)('md-edit-dialog', {
	              'md-edit-dialog--active': active,
	              'md-edit-dialog--inline': inline,
	              'md-edit-dialog--min-width': typeof enforceMinWidth === 'undefined' ? props.type === 'text' : enforceMinWidth,
	              'md-background': active
	            }, dialogClassName)
	          }),
	          largeTitle,
	          _react2.default.createElement(_TextField2.default, _extends({}, props, {
	            id: id,
	            ref: this._setField,
	            label: active ? label : null,
	            active: active,
	            floating: active,
	            placeholder: active ? placeholder : placeholder || label,
	            block: !active,
	            paddedBlock: false,
	            style: textFieldStyle,
	            className: (0, _classnames2.default)(pointer, textFieldClassName),
	            inputStyle: inputStyle,
	            inputClassName: (0, _classnames2.default)(pointer, {
	              'md-text-right': props.type === 'number'
	            }, inputClassName),
	            onKeyUp: this._handleKeyUp,
	            onKeyDown: this._handleKeyDown,
	            value: value,
	            onChange: this._handleChange,
	            maxLength: active ? maxLength : null,
	            rightIcon: inlineEditIcon
	          })),
	          actions
	        )
	      );
	    }
	  }]);
	
	  return EditDialogColumn;
	}(_react.PureComponent);
	
	EditDialogColumn.propTypes = {
	  /**
	   * An optional id to provide to the text field in the column. If this is omitted,
	   * the id will be the current row id and `-edit-dialog`.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * The optional style to apply to the edit dialog's column.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * The optional className to apply to the edit dialog's column.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The optional style to apply to the edit dialog.
	   */
	  dialogStyle: _propTypes2.default.object,
	
	  /**
	   * The optional className to apply to the edit dialog.
	   */
	  dialogClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the text field.
	   */
	  textFieldStyle: _propTypes2.default.object,
	
	  /**
	   * An optional class name to apply to the text field.
	   */
	  textFieldClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the text field's input.
	   */
	  inputStyle: _propTypes2.default.object,
	
	  /**
	   * An optional class name to apply to the text field's input.
	   */
	  inputClassName: _propTypes2.default.string,
	
	  /**
	   * The transition duration when the dialog is moving from
	   * active to inactive.
	   */
	  transitionDuration: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the edit dialog is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * The optional max length for the edit dialog.
	   */
	  maxLength: _propTypes2.default.number,
	
	  /**
	   * A value to use for the edit dialog text field. This
	   * will make the component controlled so you will need
	   * to provide an `onChange` function.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional function to call when the text field's value
	   * is changed. It is called with `(newValue, changeEvent)`.
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * The default value for the column.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional function to call when the input is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the keyup event is triggered.
	   */
	  onKeyUp: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the keydown event is triggered.
	   */
	  onKeyDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the mouseover event is triggered.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the mouseleave event is triggered.
	   */
	  onMouseLeave: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the touchstart event is triggered.
	   */
	  onTouchStart: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the touchend event is triggered.
	   */
	  onTouchEnd: _propTypes2.default.func,
	
	  /**
	   * Boolean if the edit dialog should be large.
	   */
	  large: _propTypes2.default.bool,
	
	  /**
	   * The title for the large edit dialog. The custom validation changes to required
	   * when the `large` prop is set to true.
	   */
	  title: function title(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    if (props.large) {
	      var _PropTypes$node;
	
	      return (_PropTypes$node = _propTypes2.default.node).isRequired.apply(_PropTypes$node, [props, propName, component].concat(others));
	    } else {
	      return _propTypes2.default.node.apply(_propTypes2.default, [props, propName, component].concat(others));
	    }
	  },
	
	  /**
	   * An optional function to call when the OK button is clicked.
	   * It is called with `(textFieldValue, clickEvent)`. This function
	   * will also be called when a user pressed the enter key.
	   */
	  onOkClick: _propTypes2.default.func,
	
	  /**
	   * The label to use for the OK button.
	   */
	  okLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional function to call when the Cancel button is clicked.
	   * It is called with `(textFieldValueBeforeEdit, clickEvent)`. This
	   * function will also be called when the user presses the escape key.
	   */
	  onCancelClick: _propTypes2.default.func,
	
	  /**
	   * The label to use for the Cancel button.
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional function to call when the edit dialog is open and the user clicks
	   * somewhere else on the page.
	   */
	  onOutsideClick: _propTypes2.default.func,
	
	  /**
	   * A boolean if the action when the edit dialog is open and the user clicks somewhere
	   * else on the page should be to confirm the current changes.
	   *
	   * If this is set to `true`, `onOkClick` will be called. Otherwise `onCancelClick` will
	   * be called.
	   */
	  okOnOutsideClick: _propTypes2.default.bool.isRequired,
	
	  /**
	   * An optional label for the text field.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * An optional placeholder for the text field.
	   */
	  placeholder: _propTypes2.default.string,
	
	  /**
	   * Boolean if the text field should not appear in a dialog.
	   */
	  inline: (0, _invalidIf2.default)(_propTypes2.default.bool, 'title', 'large'),
	
	  /**
	   * Any children used to display an inline edit dialog's edit icon.
	   */
	  inlineIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className used to display the inline edit dialog's edit icon.
	   */
	  inlineIconClassName: _propTypes2.default.string,
	
	  /**
	   * Boolean if an inline edit text field should not include an icon.
	   */
	  noIcon: (0, _invalidIf2.default)(_propTypes2.default.bool, 'title', 'large'),
	
	  /**
	   * This is injected by the `TableRow` component.
	   */
	  header: _propTypes2.default.bool,
	
	  /**
	   * The type for the text field.
	   */
	  type: _TextField2.default.propTypes.type,
	
	  /**
	   * Boolean if the min width of the dialog should be set to the `$md-edit-dialog-column-min-width` variable.
	   * If this is undefined, the min width will be enforced when the `type` prop is `text`.
	   */
	  enforceMinWidth: _propTypes2.default.bool,
	
	  /**
	   * When the dialog is open and a user scrolls the dialog offscreen, this is the amount
	   * of the dialog that should be offscreen before hiding the dialog (inverse). The default
	   * is to have 25% of the dialog offscreen.
	   */
	  scrollThreshold: _propTypes2.default.number.isRequired
	};
	EditDialogColumn.contextTypes = {
	  rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
	};
	EditDialogColumn.defaultProps = {
	  type: 'text',
	  defaultValue: '',
	  transitionDuration: 300,
	  okOnOutsideClick: true,
	  okLabel: 'Save',
	  cancelLabel: 'Cancel',
	  inlineIconChildren: 'edit',
	  scrollThreshold: 0.75
	};
	exports.default = EditDialogColumn;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _SelectField = __webpack_require__(65);
	
	var _SelectField2 = _interopRequireDefault(_SelectField);
	
	var _TableColumn = __webpack_require__(56);
	
	var _TableColumn2 = _interopRequireDefault(_TableColumn);
	
	var _findTable = __webpack_require__(44);
	
	var _findTable2 = _interopRequireDefault(_findTable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `SelectFieldColumn` component is used to render select fields in `DataTable`s.
	 * The only reason this component is required is to that the select field will not
	 * take the overflow of the `DataTable` into consideration when rendering itself. Without
	 * this component, the menu items would be hidden by the data table's overflow.
	 *
	 * All props that are on the `SelectField` are also available here (except the naming of style or className).
	 * See the [SelectField](/components/select-fields?tab=1#select-field-proptypes) for remaining prop descriptions.
	 */
	var SelectFieldColumn = function (_PureComponent) {
	  _inherits(SelectFieldColumn, _PureComponent);
	
	  function SelectFieldColumn(props, context) {
	    _classCallCheck(this, SelectFieldColumn);
	
	    var _this = _possibleConstructorReturn(this, (SelectFieldColumn.__proto__ || Object.getPrototypeOf(SelectFieldColumn)).call(this, props, context));
	
	    _this.state = {
	      active: !!props.defaultOpen,
	      left: null,
	      width: null
	    };
	
	    _this._wrapper = null;
	    _this._table = null;
	    _this._left = null;
	    _this._scrollLeft = null;
	
	    _this._setWrapper = _this._setWrapper.bind(_this);
	    _this._repositionCell = _this._repositionCell.bind(_this);
	    _this._handleMenuToggle = _this._handleMenuToggle.bind(_this);
	    return _this;
	  }
	
	  _createClass(SelectFieldColumn, [{
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var active = this.state.active;
	
	      if (active === prevState.active) {
	        return;
	      } else if (this._table) {
	        this._table[(active ? 'add' : 'remove') + 'EventListener']('scroll', this._repositionCell);
	        this._left = active ? this.state.left : null;
	        this._scrollLeft = active ? this._table.scrollLeft : null;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.table && this.state.active) {
	        this._table.removeEventListener('scroll', this._repositionCell);
	      }
	    }
	  }, {
	    key: '_setWrapper',
	    value: function _setWrapper(wrapper) {
	      this._wrapper = wrapper;
	      this._table = (0, _findTable2.default)(this._wrapper);
	    }
	
	    /**
	     * When the dialog is open and the user scrolls the data table (for some reason), this will
	     * keep the cell positioned correctly.
	     */
	
	  }, {
	    key: '_repositionCell',
	    value: function _repositionCell() {
	      var _this2 = this;
	
	      if (!this._ticking) {
	        requestAnimationFrame(function () {
	          _this2._ticking = false;
	
	          var left = _this2._left;
	          var scrolledOut = false;
	          if (_this2._table) {
	            var _table = _this2._table,
	                scrollLeft = _table.scrollLeft,
	                offsetWidth = _table.offsetWidth;
	
	            left -= scrollLeft - _this2._scrollLeft;
	            scrolledOut = left < 16 || offsetWidth - left < _this2.state.width * _this2.props.scrollThreshold;
	          }
	
	          var active = _this2.state.active;
	
	          if (!_this2._timeout && scrolledOut) {
	            active = false;
	          }
	
	          _this2.setState({ left: left, active: active });
	        });
	      }
	
	      this._ticking = true;
	    }
	  }, {
	    key: '_handleMenuToggle',
	    value: function _handleMenuToggle(active, e) {
	      if (this.props.onMenuToggle) {
	        this.props.onMenuToggle(active, e);
	      }
	
	      var width = null;
	      var left = null;
	      if (this._wrapper && active) {
	        left = this._wrapper.getBoundingClientRect().left - 1; // 1px for box shadow
	        width = this._wrapper.offsetWidth;
	      }
	
	      this.setState({ active: active, width: width, left: left });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var rowId = this.context.rowId;
	      var _state = this.state,
	          active = _state.active,
	          width = _state.width,
	          left = _state.left;
	
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          menuStyle = _props.menuStyle,
	          menuClassName = _props.menuClassName,
	          wrapperStyle = _props.wrapperStyle,
	          wrapperClassName = _props.wrapperClassName,
	          header = _props.header,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'menuStyle', 'menuClassName', 'wrapperStyle', 'wrapperClassName', 'header']);
	
	      delete props.id;
	      delete props.scrollThreshold;
	
	      var id = this.props.id;
	
	      if (!id) {
	        id = rowId + '-select';
	      }
	
	      return _react2.default.createElement(
	        _TableColumn2.default,
	        {
	          style: _extends({ left: left }, style),
	          className: (0, _classnames2.default)('md-select-field-column', {
	            'md-table-column--fixed md-table-column--fixed-active': active
	          }, className),
	          header: header,
	          __fixedColumn: true
	        },
	        _react2.default.createElement(
	          'div',
	          {
	            ref: this._setWrapper,
	            style: _extends({}, wrapperStyle, { width: width }),
	            className: wrapperClassName
	          },
	          _react2.default.createElement(_SelectField2.default, _extends({
	            id: id
	          }, props, {
	            style: menuStyle,
	            className: menuClassName,
	            onMenuToggle: this._handleMenuToggle,
	            fullWidth: true
	          }))
	        )
	      );
	    }
	  }]);
	
	  return SelectFieldColumn;
	}(_react.PureComponent);
	
	SelectFieldColumn.propTypes = {
	  /**
	   * An optional id to use for the select field in the column. If this is omitted,
	   * the id will be generated from the `baseId` from the `DataTable`.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional style to apply to the `TableColumn`.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `TableColumn`.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the select field's wrapper in the column.
	   */
	  wrapperStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the select field's wrapper in the column.
	   */
	  wrapperClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the select field's menu component.
	   */
	  menuStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the select field's menu component.
	   */
	  menuClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the select field's input.
	   */
	  inputStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the select field's input.
	   */
	  inputClassName: _propTypes2.default.string,
	
	  /**
	   * Boolean if the `SelectFieldColumn` is in the `TableHeader` component. This is
	   * injected from the `TableRow` component. Should not be used.
	   */
	  header: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when the select field's menu is toggled open.
	   * See the select field component for the callback information.
	   */
	  onMenuToggle: _propTypes2.default.func,
	
	  /**
	   * The position of the select field. It is ideal to keep this as the default.
	   */
	  position: _SelectField2.default.propTypes.position,
	
	  /**
	   * Boolean if the select field is open by default.
	   */
	  defaultOpen: _propTypes2.default.bool,
	
	  /**
	   * When the dialog is open and a user scrolls the dialog offscreen, this is the amount
	   * of the dialog that should be offscreen before hiding the dialog (inverse). The default
	   * is to have 25% of the dialog offscreen.
	   */
	  scrollThreshold: _propTypes2.default.number.isRequired
	};
	SelectFieldColumn.defaultProps = {
	  position: _SelectField2.default.Positions.BELOW,
	  scrollThreshold: 0.75
	};
	SelectFieldColumn.contextTypes = {
	  rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	};
	exports.default = SelectFieldColumn;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _contextTypes = __webpack_require__(43);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TableBody` component is used for managing the state of all
	 * `TableRow` inside of it.
	 */
	var TableBody = function (_Component) {
	  _inherits(TableBody, _Component);
	
	  function TableBody() {
	    _classCallCheck(this, TableBody);
	
	    return _possibleConstructorReturn(this, (TableBody.__proto__ || Object.getPrototypeOf(TableBody)).apply(this, arguments));
	  }
	
	  _createClass(TableBody, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['children', 'className']);
	
	      var _context = this.context,
	          selectedRows = _context.selectedRows,
	          toggleSelectedRow = _context.toggleSelectedRow;
	
	
	      var rows = children ? _react.Children.map(_react.Children.toArray(children), function (row, i) {
	        var uncontrolled = typeof row.props.selected === 'undefined';
	
	        // Update the row to inject the selected prop from context if it is uncontrolled.
	        // Also update the onCheckbox click function to additionally toggle the row if uncontrolled.
	        return _react2.default.cloneElement(row, _extends({}, row.props, {
	          index: i,
	          selected: uncontrolled ? selectedRows[i] : row.props.selected,
	          onCheckboxClick: function onCheckboxClick(checked, e) {
	            if (row.props.onCheckboxClick) {
	              row.props.onCheckboxClick(i, checked, e);
	            }
	
	            if (uncontrolled) {
	              toggleSelectedRow(i);
	            }
	          }
	        }));
	      }) : null;
	
	      return _react2.default.createElement(
	        'tbody',
	        _extends({}, props, { className: (0, _classnames2.default)('md-table-body', className) }),
	        rows
	      );
	    }
	  }]);
	
	  return TableBody;
	}(_react.Component);
	
	TableBody.propTypes = {
	  /**
	   * An optional style to apply to the tbody.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the tbody.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A list or a single item of `TableRow` components to render.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)])
	};
	TableBody.contextTypes = _contextTypes2.default;
	exports.default = TableBody;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _CSSTransitionGroup = __webpack_require__(25);
	
	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _oneRequired = __webpack_require__(121);
	
	var _oneRequired2 = _interopRequireDefault(_oneRequired);
	
	var _invalidIf = __webpack_require__(19);
	
	var _invalidIf2 = _interopRequireDefault(_invalidIf);
	
	var _CardTitleBlock = __webpack_require__(91);
	
	var _CardTitleBlock2 = _interopRequireDefault(_CardTitleBlock);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TableCardHeader` is used when contextual actions should appear when
	 * a user selects a row.
	 */
	var TableCardHeader = function (_PureComponent) {
	  _inherits(TableCardHeader, _PureComponent);
	
	  function TableCardHeader(props) {
	    _classCallCheck(this, TableCardHeader);
	
	    var _this = _possibleConstructorReturn(this, (TableCardHeader.__proto__ || Object.getPrototypeOf(TableCardHeader)).call(this, props));
	
	    _this.state = { animating: false };
	    return _this;
	  }
	
	  _createClass(TableCardHeader, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _this2 = this;
	
	      var visible = this.props.visible;
	      var nVisible = nextProps.visible,
	          transitionEnterTimeout = nextProps.transitionEnterTimeout,
	          transitionLeaveTimeout = nextProps.transitionLeaveTimeout;
	
	      var timeout = !nVisible ? transitionLeaveTimeout : transitionEnterTimeout;
	      if (visible !== nVisible) {
	        if (this._timeout) {
	          clearTimeout(this._timeout);
	        }
	
	        this._timeout = setTimeout(function () {
	          _this2._timeout = setTimeout(function () {
	            _this2._timeout = null;
	            _this2.setState({ animating: false });
	          }, timeout);
	        }, _CSSTransitionGroupTick2.default);
	
	        if (!this.state.animating) {
	          this.setState({ animating: true });
	        }
	      }
	    }
	  }, {
	    key: '_cloneCellRight',
	    value: function _cloneCellRight(noAdjust, children) {
	      if (noAdjust || !children) {
	        return children;
	      }
	
	      return _react.Children.map(_react.Children.toArray(children), function (child, i) {
	        if (i === 0) {
	          return (0, _react.cloneElement)(child, { className: (0, _classnames2.default)('md-cell--right', child.props.className) });
	        }
	
	        return child;
	      });
	    }
	  }, {
	    key: '_cloneLeftChildren',
	    value: function _cloneLeftChildren(noClone, children) {
	      if (noClone || !children) {
	        return children;
	      }
	
	      return _react.Children.map(_react.Children.toArray(children), function (child) {
	        return (0, _react.cloneElement)(child, {
	          className: (0, _classnames2.default)('md-btn--dialog', child.props.className)
	        });
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var animating = this.state.animating;
	
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          title = _props.title,
	          actions = _props.actions,
	          contextualChildren = _props.contextualChildren,
	          noActionsAdjust = _props.noActionsAdjust,
	          noChildrenAdjust = _props.noChildrenAdjust,
	          noLeftChildrenClone = _props.noLeftChildrenClone,
	          visible = _props.visible,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'title', 'actions', 'contextualChildren', 'noActionsAdjust', 'noChildrenAdjust', 'noLeftChildrenClone', 'visible']);
	
	      delete props.children;
	      delete props.leftChildren;
	      delete props.contextualTitle;
	
	      var _props2 = this.props,
	          children = _props2.children,
	          leftChildren = _props2.leftChildren,
	          contextualTitle = _props2.contextualTitle;
	
	      children = this._cloneCellRight(noChildrenAdjust, children);
	      leftChildren = this._cloneLeftChildren(noLeftChildrenClone, leftChildren);
	
	      if (title) {
	        children = _react2.default.createElement(
	          'div',
	          { className: 'md-card-title', key: 'main-title' },
	          _react2.default.createElement(_CardTitleBlock2.default, { title: title }),
	          children
	        );
	      } else if (leftChildren) {
	        leftChildren = _react.Children.toArray(leftChildren);
	
	        if (children) {
	          children = leftChildren.concat(_react.Children.toArray(children));
	        } else {
	          children = leftChildren;
	        }
	      }
	
	      if (contextualTitle) {
	        contextualTitle = _react2.default.createElement(
	          'h2',
	          { className: 'md-card-title--title md-card-title--title-contextual' },
	          contextualTitle
	        );
	      }
	
	      var contextualHeader = _react2.default.createElement(
	        'div',
	        { key: 'contextual-header', className: 'md-card-title md-card-title--contextual' },
	        contextualTitle,
	        contextualChildren,
	        this._cloneCellRight(noActionsAdjust, actions)
	      );
	
	      var mergedStyles = style;
	      if (animating) {
	        mergedStyles = Object.assign({}, style, { overflow: 'hidden' });
	      }
	
	      return _react2.default.createElement(
	        _CSSTransitionGroup2.default,
	        _extends({}, props, {
	          style: mergedStyles,
	          className: (0, _classnames2.default)('md-table-card-header', {
	            'md-table-card-header--no-title': !title
	          }, className)
	        }),
	        children,
	        visible ? contextualHeader : null
	      );
	    }
	  }]);
	
	  return TableCardHeader;
	}(_react.PureComponent);
	
	TableCardHeader.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The component to render as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * The transition name to use when the contextual header appears.
	   */
	  transitionName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The transition time to use when the contextual header appears.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The transition time to use when the contextual header disappears.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * An optional title to display. It is invalid to have both `title` and `leftChildren`
	   * defined as only one will be used.
	   */
	  title: (0, _oneRequired2.default)(_propTypes2.default.node, 'leftChildren', 'children'),
	
	  /**
	   * An optional title to display in the contextual header. This will get wrapped in an `h2`
	   * tag and additional styles applied.
	   */
	  contextualTitle: _propTypes2.default.node,
	
	  /**
	   * Any additional children to display in the contextual header. This will be displayed after
	   * the optional `contextualTile` and before the `actions`.
	   */
	  contextualChildren: _propTypes2.default.node,
	
	  /**
	   * An optional button or list of buttons to display instead of a title.
	   */
	  leftChildren: (0, _invalidIf2.default)(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]), 'title'),
	
	  /**
	   * An additional children to display after the `title` or `leftChildren` prop.
	   * This is _normally_ a list of icon button or menu button.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
	
	  /**
	   * An optional button/menu button or a list of button/menu button to display in the
	   * contextual header once the user has selected a row or multiple rows.
	   */
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
	
	  /**
	   * Boolean if the `actions` prop should not have each element cloned with additional
	   * class names.
	   */
	  noActionsAdjust: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `children` prop should not have each element cloned with additional
	   * class names.
	   */
	  noChildrenAdjust: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `leftChildren` prop should not have each element cloned with additional
	   * class names.
	   */
	  noLeftChildrenClone: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the contextual header is currently visible.
	   */
	  visible: _propTypes2.default.bool.isRequired
	};
	TableCardHeader.defaultProps = {
	  component: 'header',
	  transitionName: 'md-drop-down',
	  transitionEnterTimeout: 150,
	  transitionLeaveTimeout: 150
	};
	exports.default = TableCardHeader;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _SelectionControl = __webpack_require__(29);
	
	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);
	
	var _checkboxContextTypes = __webpack_require__(177);
	
	var _checkboxContextTypes2 = _interopRequireDefault(_checkboxContextTypes);
	
	var _findTable = __webpack_require__(44);
	
	var _findTable2 = _interopRequireDefault(_findTable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TableCheckbox = function (_Component) {
	  _inherits(TableCheckbox, _Component);
	
	  function TableCheckbox(props, context) {
	    _classCallCheck(this, TableCheckbox);
	
	    var _this = _possibleConstructorReturn(this, (TableCheckbox.__proto__ || Object.getPrototypeOf(TableCheckbox)).call(this, props, context));
	
	    _this._td = null;
	    _this._header = false;
	    _this._handleMount = _this._handleMount.bind(_this);
	    return _this;
	  }
	
	  _createClass(TableCheckbox, [{
	    key: '_handleMount',
	    value: function _handleMount(td) {
	      if (td) {
	        var header = (0, _findTable2.default)(td).querySelector('thead');
	        var index = td.parentNode.rowIndex - (header ? 1 : 0);
	
	        if (td.parentNode.parentNode.tagName === 'TBODY') {
	          this.context.createCheckbox(index);
	        }
	        this._td = td;
	        this._header = header;
	      } else if (this._td) {
	        var _index = this._td.parentNode.rowIndex;
	        this.context.removeCheckbox(_index - (this._header ? 1 : 0));
	        this._td = null;
	        this._header = false;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          checked = _props.checked,
	          props = _objectWithoutProperties(_props, ['checked']);
	
	      var _context = this.context,
	          uncheckedIconChildren = _context.uncheckedIconChildren,
	          uncheckedIconClassName = _context.uncheckedIconClassName,
	          checkedIconChildren = _context.checkedIconChildren,
	          checkedIconClassName = _context.checkedIconClassName,
	          rowId = _context.rowId,
	          baseName = _context.baseName,
	          header = _context.header;
	
	
	      var Cell = header ? 'th' : 'td';
	
	      return _react2.default.createElement(
	        Cell,
	        { className: 'md-table-checkbox', ref: this._handleMount },
	        _react2.default.createElement(_SelectionControl2.default, _extends({}, props, {
	          id: rowId,
	          name: baseName + '-checkbox',
	          type: 'checkbox',
	          checked: checked,
	          uncheckedCheckboxIconChildren: uncheckedIconChildren,
	          uncheckedCheckboxIconClassName: uncheckedIconClassName,
	          checkedCheckboxIconChildren: checkedIconChildren,
	          checkedCheckboxIconClassName: checkedIconClassName
	        }))
	      );
	    }
	  }]);
	
	  return TableCheckbox;
	}(_react.Component);
	
	TableCheckbox.propTypes = {
	  checked: _propTypes2.default.bool
	};
	TableCheckbox.contextTypes = _checkboxContextTypes2.default;
	exports.default = TableCheckbox;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _contextTypes = __webpack_require__(43);
	
	var _contextTypes2 = _interopRequireDefault(_contextTypes);
	
	var _headerContextTypes = __webpack_require__(57);
	
	var _headerContextTypes2 = _interopRequireDefault(_headerContextTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A `thead` component to use in the `DataTable` component. This
	 * will automatically update the header row to check if it is selected
	 * and inject a function to toggle all rows selected if the row is
	 * uncontrolled. It will also automatically attempt to set the `TableColumn`
	 * components to be the header type.
	 */
	var TableHeader = function (_Component) {
	  _inherits(TableHeader, _Component);
	
	  function TableHeader() {
	    _classCallCheck(this, TableHeader);
	
	    return _possibleConstructorReturn(this, (TableHeader.__proto__ || Object.getPrototypeOf(TableHeader)).apply(this, arguments));
	  }
	
	  _createClass(TableHeader, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return _extends({}, this.context, {
	        header: true
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          children = _props.children,
	          props = _objectWithoutProperties(_props, ['className', 'children']);
	
	      var _context = this.context,
	          toggleAllRows = _context.toggleAllRows,
	          allSelected = _context.allSelected;
	
	      var header = _react2.default.Children.only(children);
	      var selected = typeof header.props.selected === 'undefined' ? allSelected : header.props.selected;
	
	      var row = _react2.default.cloneElement(header, _extends({}, header.props, {
	        selected: selected,
	        onCheckboxClick: function onCheckboxClick(checked, e) {
	          if (header.props.onCheckboxClick) {
	            header.props.onCheckboxClick(-1, checked, e);
	          }
	
	          if (typeof header.props.selected === 'undefined') {
	            toggleAllRows();
	          }
	        }
	      }));
	
	      return _react2.default.createElement(
	        'thead',
	        _extends({}, props, { className: (0, _classnames2.default)('md-table-header', className) }),
	        row
	      );
	    }
	  }]);
	
	  return TableHeader;
	}(_react.Component);
	
	TableHeader.contextTypes = _contextTypes2.default;
	TableHeader.childContextTypes = _headerContextTypes2.default;
	TableHeader.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the table header
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * This should be a single `TableRow` component. The `custom` validation will
	   * warn you if there are more than one children given or none at all.
	   */
	  children: function children(props, propName, component) {
	    try {
	      _react2.default.Children.only(props.children);
	      return null;
	    } catch (e) {
	      var amt = props.children ? props.children.length : 0;
	      return new Error('There must only be one child in a \'' + component + '\', but ' + amt + ' were given.');
	    }
	  }
	};
	exports.default = TableHeader;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _SelectField = __webpack_require__(65);
	
	var _SelectField2 = _interopRequireDefault(_SelectField);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	var _findTable = __webpack_require__(44);
	
	var _findTable2 = _interopRequireDefault(_findTable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TablePagination` component is used to generate the table footer that helps
	 * pagination through a large dataset by limiting the number of rows per page.
	 * The pagination will always be placed persistently at the bottom of the table
	 * so that when a user scrolls to the right, they will always be able to use the
	 * pagination.
	 */
	var TablePagination = function (_PureComponent) {
	  _inherits(TablePagination, _PureComponent);
	
	  function TablePagination(props, context) {
	    _classCallCheck(this, TablePagination);
	
	    var _this = _possibleConstructorReturn(this, (TablePagination.__proto__ || Object.getPrototypeOf(TablePagination)).call(this, props, context));
	
	    var controlledPage = typeof props.page !== 'undefined';
	    var controlledRowsPerPage = typeof props.rowsPerPage !== 'undefined';
	    var rowsPerPage = controlledRowsPerPage ? props.rowsPerPage : props.defaultRowsPerPage;
	    var page = controlledPage ? props.page : props.defaultPage;
	    _this.state = {
	      start: (page - 1) * rowsPerPage,
	      controlsMarginLeft: 0
	    };
	
	    if (!controlledPage) {
	      _this.state.page = page;
	    }
	
	    if (!controlledRowsPerPage) {
	      _this.state.rowsPerPage = props.defaultRowsPerPage;
	    }
	
	    _this._setControls = _this._setControls.bind(_this);
	    _this._position = _this._position.bind(_this);
	    _this._increment = _this._increment.bind(_this);
	    _this._decrement = _this._decrement.bind(_this);
	    _this._setRowsPerPage = _this._setRowsPerPage.bind(_this);
	    return _this;
	  }
	
	  _createClass(TablePagination, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._position();
	      window.addEventListener('resize', this._position);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _props = this.props,
	          rowsPerPage = _props.rowsPerPage,
	          page = _props.page;
	
	      if (page !== nextProps.page || rowsPerPage !== nextProps.rowsPerPage) {
	        var rpp = (0, _getField2.default)(nextProps, this.state, 'rowsPerPage');
	        var p = (0, _getField2.default)(nextProps, this.state, 'page');
	
	        this.setState({ start: (p - 1) * rpp });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var rows = this.props.rows;
	      var _state = this.state,
	          start = _state.start,
	          rowsPerPage = _state.rowsPerPage;
	
	      if (rows !== prevProps.rows || start !== prevState.start || rowsPerPage !== prevState.rowsPerPage) {
	        this._position();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      window.removeEventListener('resize', this._position);
	    }
	  }, {
	    key: '_setControls',
	    value: function _setControls(controls) {
	      this._controls = (0, _reactDom.findDOMNode)(controls);
	    }
	  }, {
	    key: '_position',
	    value: function _position() {
	      var table = (0, _findTable2.default)((0, _reactDom.findDOMNode)(this));
	      if (table) {
	        this.setState({
	          controlsMarginLeft: Math.max(0, table.offsetWidth - this._controls.offsetWidth)
	        });
	      }
	    }
	  }, {
	    key: '_increment',
	    value: function _increment() {
	      var _props2 = this.props,
	          rows = _props2.rows,
	          onPagination = _props2.onPagination;
	      var start = this.state.start;
	
	      var rowsPerPage = (0, _getField2.default)(this.props, this.state, 'rowsPerPage');
	      var page = (0, _getField2.default)(this.props, this.state, 'page');
	
	      // Only correct multiple of rows per page
	      var max = rows - rows % rowsPerPage;
	
	      var newStart = Math.min(start + rowsPerPage, max);
	      var nextPage = page + 1;
	
	      onPagination(newStart, rowsPerPage, nextPage);
	      if (typeof this.props.page === 'undefined') {
	        this.setState({ start: newStart, page: nextPage });
	      }
	    }
	  }, {
	    key: '_decrement',
	    value: function _decrement() {
	      var start = this.state.start;
	
	      var page = (0, _getField2.default)(this.props, this.state, 'page');
	      var rowsPerPage = (0, _getField2.default)(this.props, this.state, 'rowsPerPage');
	      var newStart = Math.max(0, start - rowsPerPage);
	      var nextPage = page - 1;
	
	      this.props.onPagination(newStart, rowsPerPage, nextPage);
	      if (typeof this.props.page === 'undefined') {
	        this.setState({ start: newStart, page: nextPage });
	      }
	    }
	  }, {
	    key: '_setRowsPerPage',
	    value: function _setRowsPerPage(rowsPerPage) {
	      var page = 1;
	      var newStart = 0;
	      this.props.onPagination(newStart, rowsPerPage, page);
	      var nextState = void 0;
	      if (typeof this.props.rowsPerPage === 'undefined') {
	        nextState = { rowsPerPage: rowsPerPage };
	      }
	
	      if (typeof this.props.page === 'undefined') {
	        nextState = nextState || {};
	        nextState.start = newStart;
	      }
	
	      if (nextState) {
	        this.setState(nextState);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state2 = this.state,
	          controlsMarginLeft = _state2.controlsMarginLeft,
	          start = _state2.start;
	
	      var _props3 = this.props,
	          className = _props3.className,
	          rows = _props3.rows,
	          rowsPerPageLabel = _props3.rowsPerPageLabel,
	          rowsPerPageItems = _props3.rowsPerPageItems,
	          incrementIconChildren = _props3.incrementIconChildren,
	          incrementIconClassName = _props3.incrementIconClassName,
	          decrementIconChildren = _props3.decrementIconChildren,
	          decrementIconClassName = _props3.decrementIconClassName,
	          props = _objectWithoutProperties(_props3, ['className', 'rows', 'rowsPerPageLabel', 'rowsPerPageItems', 'incrementIconChildren', 'incrementIconClassName', 'decrementIconChildren', 'decrementIconClassName']);
	
	      delete props.onPagination;
	      delete props.rowsPerPage;
	      delete props.defaultPage;
	      delete props.defaultRowsPerPage;
	      delete props.page;
	
	      var rowsPerPage = (0, _getField2.default)(this.props, this.state, 'rowsPerPage');
	
	      var pagination = start + 1 + '-' + Math.min(rows, start + rowsPerPage) + ' of ' + rows;
	      return _react2.default.createElement(
	        'tfoot',
	        _extends({}, props, { className: (0, _classnames2.default)('md-table-footer', className) }),
	        _react2.default.createElement(
	          'tr',
	          null,
	          _react2.default.createElement(
	            'td',
	            { colSpan: '100%' },
	            _react2.default.createElement(
	              'div',
	              {
	                ref: this._setControls,
	                className: 'md-table-pagination md-table-pagination--controls md-text',
	                style: { marginLeft: controlsMarginLeft }
	              },
	              rowsPerPageLabel,
	              _react2.default.createElement(_SelectField2.default, {
	                id: this.context.baseId + '-pagination',
	                menuItems: rowsPerPageItems,
	                position: _SelectField2.default.Positions.BELOW,
	                inputClassName: 'md-select-field--pagination',
	                value: rowsPerPage,
	                onChange: this._setRowsPerPage
	              }),
	              _react2.default.createElement(
	                'span',
	                { className: 'md-table-pagination--label' },
	                pagination
	              ),
	              _react2.default.createElement(
	                _Button2.default,
	                {
	                  icon: true,
	                  onClick: this._decrement,
	                  disabled: start === 0,
	                  iconClassName: decrementIconClassName
	                },
	                decrementIconChildren
	              ),
	              _react2.default.createElement(
	                _Button2.default,
	                {
	                  icon: true,
	                  onClick: this._increment,
	                  disabled: start + rowsPerPage >= rows,
	                  iconClassName: incrementIconClassName
	                },
	                incrementIconChildren
	              )
	            ),
	            _react2.default.createElement('div', { className: 'md-table-pagination' })
	          )
	        )
	      );
	    }
	  }]);
	
	  return TablePagination;
	}(_react.PureComponent);
	
	TablePagination.propTypes = {
	  /**
	   * An optional style to apply to the `tfoot` tag.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `tfoot` tag.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A function to call when a user clicks the increment or decrement pagination
	   * icon button. This function will be given the new start index and the number
	   * or rows per page as well as the current page.
	   *
	   * ```js
	   * onPagination(newStart, rowsPerPage, currentPage);
	   * ```
	   */
	  onPagination: _propTypes2.default.func.isRequired,
	
	  /**
	   * The current value for the select field holding the number of rows per page.
	   */
	  rowsPerPage: _propTypes2.default.number,
	
	  /**
	   * The current page for the pagination. This will make the comonent controlled, so the only way to get pagination
	   * is making sure you are updating this prop after the `onPagination` callback is called.
	   *
	   * Pages start from 1 instead of 0.
	   */
	  page: _propTypes2.default.number,
	
	  /**
	   * The default page to start from for the pagination. Pages start from 1 instead of 0.
	   */
	  defaultPage: _propTypes2.default.number.isRequired,
	
	  /**
	   * The default number of rows per page to display. This will be the value for the
	   * `SelectField`.
	   */
	  defaultRowsPerPage: _propTypes2.default.number.isRequired,
	
	  /**
	   * The label to use for the rows per page `SelectField`.
	   */
	  rowsPerPageLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * A list of numbers for the amount of rows per page to display at a time.
	   * This will be rendered into the `SelectField`.
	   */
	  rowsPerPageItems: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
	
	  /**
	   * The total number of rows that can be displayed. This is the unfiltered/non-subset
	   * number of rows. This is used to help calculate the increment/decrement values to
	   * display and determine if the user can increment/decrement again.
	   */
	  rows: _propTypes2.default.number.isRequired,
	
	  /**
	   * Any children used to display the increment icon button.
	   */
	  incrementIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className used to display the increment icon button.
	   */
	  incrementIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children used to display the decrement icon button.
	   */
	  decrementIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className used to display the decrement icon button.
	   */
	  decrementIconClassName: _propTypes2.default.string
	};
	TablePagination.contextTypes = {
	  baseId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
	};
	TablePagination.defaultProps = {
	  defaultPage: 1,
	  defaultRowsPerPage: 10,
	  rowsPerPageLabel: 'Rows per page:',
	  rowsPerPageItems: [10, 20, 30, 40, 50, 100],
	  incrementIconChildren: 'keyboard_arrow_right',
	  decrementIconChildren: 'keyboard_arrow_left'
	};
	exports.default = TablePagination;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _headerContextTypes = __webpack_require__(57);
	
	var _headerContextTypes2 = _interopRequireDefault(_headerContextTypes);
	
	var _rowContextTypes = __webpack_require__(179);
	
	var _rowContextTypes2 = _interopRequireDefault(_rowContextTypes);
	
	var _TableCheckbox = __webpack_require__(173);
	
	var _TableCheckbox2 = _interopRequireDefault(_TableCheckbox);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A component for displaying a row in a `DataTable`. This will
	 * automatically add a `Checkbox` component to the row if it is not
	 * a `plain` table.
	 *
	 * This component will also automatically adjust the padding between
	 * columns based on the longest column if the `autoAdjust` prop
	 * is set to true.
	 */
	var TableRow = function (_Component) {
	  _inherits(TableRow, _Component);
	
	  function TableRow(props, context) {
	    _classCallCheck(this, TableRow);
	
	    var _this = _possibleConstructorReturn(this, (TableRow.__proto__ || Object.getPrototypeOf(TableRow)).call(this, props, context));
	
	    _this.state = {
	      biggest: null,
	      hover: false,
	      selects: []
	    };
	
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    _this._setLongestColumn = _this._setLongestColumn.bind(_this);
	    return _this;
	  }
	
	  _createClass(TableRow, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _context = this.context,
	          baseId = _context.baseId,
	          context = _objectWithoutProperties(_context, ['baseId']);
	
	      return _extends({}, context, {
	        rowId: context.header ? baseId + 'CheckboxToggleAll' : '' + baseId + this.props.index
	      });
	    }
	
	    /**
	     * Need to ignore adding the hvoer state if the mouse is over a menu/menu item
	     * or the edit dialog is open.
	     *
	     * @param {Function} classList - the classList to use for checking cn
	     * @return {Boolean} true if the hover state should be ignored for this classList
	     */
	
	  }, {
	    key: '_ignoreHoverState',
	    value: function _ignoreHoverState(classList) {
	      return classList.contains('md-list--menu') || ['md-edit-dialog', 'md-edit-dialog--active'].every(function (className) {
	        return classList.contains(className);
	      });
	    }
	  }, {
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      if (this.context.header) {
	        return;
	      }
	
	      var target = e.target;
	      while (target && target.parentNode) {
	        if (target.classList && this._ignoreHoverState(target.classList)) {
	          this.setState({ hover: false });
	          return;
	        }
	
	        target = target.parentNode;
	      }
	
	      this.setState({ hover: true });
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      if (this.context.header) {
	        return;
	      }
	
	      this.setState({ hover: false });
	    }
	  }, {
	    key: '_setLongestColumn',
	    value: function _setLongestColumn(row) {
	      if (!row || !this.props.autoAdjust) {
	        return;
	      }
	
	      var selects = [];
	      var cols = Array.prototype.slice.call(row.querySelectorAll('.md-table-column'));
	      var biggest = cols.reduce(function (prevBiggest, col, i) {
	        selects.push(!!col.className.match(/select-field/));
	        if (col.className.match(/prevent-grow/)) {
	          return prevBiggest;
	        }
	
	        var width = col.offsetWidth;
	        if (prevBiggest.width < width) {
	          return { width: width, index: i };
	        }
	
	        return prevBiggest;
	      }, { width: 0, index: 0 });
	
	      if (this.state.biggest && this.state.biggest.index === biggest.index) {
	        return;
	      }
	
	      this.setState({ biggest: biggest, selects: selects });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _state = this.state,
	          hover = _state.hover,
	          biggest = _state.biggest,
	          selects = _state.selects;
	
	      var _props = this.props,
	          className = _props.className,
	          children = _props.children,
	          selected = _props.selected,
	          onCheckboxClick = _props.onCheckboxClick,
	          props = _objectWithoutProperties(_props, ['className', 'children', 'selected', 'onCheckboxClick']);
	
	      delete props.index;
	      delete props.autoAdjust;
	
	      var checkbox = void 0;
	      if (!this.context.plain) {
	        checkbox = _react2.default.createElement(_TableCheckbox2.default, { key: 'checkbox', checked: selected, onChange: onCheckboxClick });
	      }
	
	      var length = children.length;
	      var columns = _react.Children.map(_react.Children.toArray(children), function (col, i) {
	        return (0, _react.cloneElement)(col, {
	          header: (0, _getField2.default)(col.props, _this2.context, 'header'),
	          className: (0, _classnames2.default)({
	            'md-table-column--grow': (0, _getField2.default)(col.props, _this2.context, 'header') && biggest && biggest.index === i,
	            'md-table-column--adjusted': selects.length && !selects[i] && biggest && biggest.index !== i && i + 1 < length
	          }, col.props.className)
	        });
	      });
	
	      return _react2.default.createElement(
	        'tr',
	        _extends({}, props, {
	          ref: this._setLongestColumn,
	          className: (0, _classnames2.default)('md-table-row', className, {
	            'md-table-row--hover': hover,
	            'md-table-row--active': !this.context.header && selected
	          }),
	          onMouseOver: this._handleMouseOver,
	          onMouseLeave: this._handleMouseLeave
	        }),
	        checkbox,
	        columns
	      );
	    }
	  }]);
	
	  return TableRow;
	}(_react.Component);
	
	TableRow.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the row.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A single or list of `TableColumn` to display in the table.
	   *
	   * > The specs "require" at least 3 columns for a non-plain data table, but that isn't
	   * strictly enforced here.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]).isRequired,
	
	  /**
	   * An optional onClick function to call when a row is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * A function to call when the checkbox is clicked. This
	   * function will will be called with `(rowIndex, event)`. The
	   * `TableBody` and `TableHeader` components will automatically
	   * merge in a function to toggle the checkbox.
	   */
	  onCheckboxClick: _propTypes2.default.func,
	
	  /**
	   * A boolean if the row should automatically check all the `TableColumn`s in the row
	   * and add the className `grow` to the one that is the biggest. You can also disable
	   * individual columns by adding the className `.prevent-grow` to them.
	   */
	  autoAdjust: _propTypes2.default.bool.isRequired,
	
	  /**
	   * An optional function to call onMouseOver.
	   */
	  onMouseOver: _propTypes2.default.func,
	
	  /**
	   * An optional function to call onMouseLeave.
	   */
	  onMouseLeave: _propTypes2.default.func,
	
	  /**
	   * Boolean if the row is currently selected. If this value will be
	   * injected by the `TableHeader` or `TableBody` component.
	   */
	  selected: _propTypes2.default.bool,
	
	  /**
	   * The row's index in the table. This is injected via the `TableBody` component.
	   */
	  index: _propTypes2.default.number
	};
	TableRow.defaultProps = {
	  autoAdjust: true
	};
	TableRow.contextTypes = _headerContextTypes2.default;
	TableRow.childContextTypes = _rowContextTypes2.default;
	exports.default = TableRow;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  uncheckedIconClassName: _propTypes2.default.string.isRequired,
	  uncheckedIconChildren: _propTypes2.default.node,
	  checkedIconClassName: _propTypes2.default.string.isRequired,
	  checkedIconChildren: _propTypes2.default.node,
	  rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  header: _propTypes2.default.bool,
	  baseName: _propTypes2.default.string.isRequired,
	  createCheckbox: _propTypes2.default.func.isRequired,
	  removeCheckbox: _propTypes2.default.func.isRequired
	};

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SelectFieldColumn = exports.TableCardHeader = exports.TablePagination = exports.EditDialogColumn = exports.TableColumn = exports.TableRow = exports.TableBody = exports.TableHeader = exports.DataTable = undefined;
	
	var _DataTable2 = __webpack_require__(168);
	
	var _DataTable3 = _interopRequireDefault(_DataTable2);
	
	var _TableHeader2 = __webpack_require__(174);
	
	var _TableHeader3 = _interopRequireDefault(_TableHeader2);
	
	var _TableBody2 = __webpack_require__(171);
	
	var _TableBody3 = _interopRequireDefault(_TableBody2);
	
	var _TableRow2 = __webpack_require__(176);
	
	var _TableRow3 = _interopRequireDefault(_TableRow2);
	
	var _TableColumn2 = __webpack_require__(56);
	
	var _TableColumn3 = _interopRequireDefault(_TableColumn2);
	
	var _EditDialogColumn2 = __webpack_require__(169);
	
	var _EditDialogColumn3 = _interopRequireDefault(_EditDialogColumn2);
	
	var _TablePagination2 = __webpack_require__(175);
	
	var _TablePagination3 = _interopRequireDefault(_TablePagination2);
	
	var _TableCardHeader2 = __webpack_require__(172);
	
	var _TableCardHeader3 = _interopRequireDefault(_TableCardHeader2);
	
	var _SelectFieldColumn2 = __webpack_require__(170);
	
	var _SelectFieldColumn3 = _interopRequireDefault(_SelectFieldColumn2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _DataTable3.default;
	exports.DataTable = _DataTable3.default;
	exports.TableHeader = _TableHeader3.default;
	exports.TableBody = _TableBody3.default;
	exports.TableRow = _TableRow3.default;
	exports.TableColumn = _TableColumn3.default;
	exports.EditDialogColumn = _EditDialogColumn3.default;
	exports.TablePagination = _TablePagination3.default;
	exports.TableCardHeader = _TableCardHeader3.default;
	exports.SelectFieldColumn = _SelectFieldColumn3.default;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _headerContextTypes = __webpack_require__(57);
	
	var _headerContextTypes2 = _interopRequireDefault(_headerContextTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var rowContextTypes = Object.assign({}, _headerContextTypes2.default, {
	  rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	});
	
	delete rowContextTypes.baseId;
	exports.default = rowContextTypes;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isValidFocusKeypress = __webpack_require__(119);
	
	var _isValidFocusKeypress2 = _interopRequireDefault(_isValidFocusKeypress);
	
	var _FocusContainer = __webpack_require__(97);
	
	var _FocusContainer2 = _interopRequireDefault(_FocusContainer);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _DialogTitle = __webpack_require__(181);
	
	var _DialogTitle2 = _interopRequireDefault(_DialogTitle);
	
	var _DialogFooter = __webpack_require__(34);
	
	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Dialog = function (_PureComponent) {
	  _inherits(Dialog, _PureComponent);
	
	  function Dialog(props) {
	    _classCallCheck(this, Dialog);
	
	    var _this = _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call(this, props));
	
	    _this._setRenderNode = function (dialog) {
	      _this._renderNode = (0, _reactDom.findDOMNode)(dialog);
	    };
	
	    _this.state = { transformOrigin: null };
	    _this._setContent = _this._setContent.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    return _this;
	  }
	
	  _createClass(Dialog, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return { renderNode: this._renderNode };
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          pageX = _props.pageX,
	          containerX = _props.containerX,
	          pageY = _props.pageY,
	          containerY = _props.containerY;
	
	      if (!pageX || !pageY) {
	        return;
	      }
	
	      this.setState({
	        transformOrigin: pageX - containerX + 'px ' + (pageY - containerY) + 'px'
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.onOpen) {
	        this.props.onOpen();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.props.onLeave) {
	        this.props.onLeave();
	      }
	    }
	  }, {
	    key: '_setContent',
	    value: function _setContent(content) {
	      if (content !== null) {
	        this._content = (0, _reactDom.findDOMNode)(content);
	        var contentPadded = this._content.querySelectorAll('.md-list').length === 0;
	
	        this.setState({ contentPadded: contentPadded });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (!(0, _isValidFocusKeypress2.default)(e)) {
	        return;
	      }
	
	      var target = e.target,
	          shiftKey = e.shiftKey;
	
	      var _innerFocusables = _toArray(this._innerFocusables),
	          first = _innerFocusables[0],
	          focusables = _innerFocusables.slice(1);
	
	      var last = focusables[focusables.length - 1];
	
	      if (shiftKey && target === first) {
	        e.preventDefault();
	        last.focus();
	      } else if (!shiftKey && target === last) {
	        e.preventDefault();
	        first.focus();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          contentPadded = _state.contentPadded,
	          transformOrigin = _state.transformOrigin;
	
	      var _props2 = this.props,
	          id = _props2.id,
	          className = _props2.className,
	          contentStyle = _props2.contentStyle,
	          contentClassName = _props2.contentClassName,
	          title = _props2.title,
	          Content = _props2.contentComponent,
	          actions = _props2.actions,
	          children = _props2.children,
	          fullPage = _props2.fullPage,
	          props = _objectWithoutProperties(_props2, ['id', 'className', 'contentStyle', 'contentClassName', 'title', 'contentComponent', 'actions', 'children', 'fullPage']);
	
	      delete props.pageX;
	      delete props.pageY;
	      delete props.containerX;
	      delete props.containerY;
	      delete props.style;
	      delete props.onOpen;
	      delete props.onLeave;
	
	      var _props3 = this.props,
	          labelledBy = _props3['aria-labelledby'],
	          style = _props3.style;
	
	      var titleId = id + 'Title';
	      if (!labelledBy && title) {
	        labelledBy = titleId;
	      }
	
	      var dialogChildren = fullPage ? children : [_react2.default.createElement(
	        _DialogTitle2.default,
	        { key: 'title', id: titleId },
	        title
	      ), _react2.default.createElement(
	        Content,
	        {
	          ref: this._setContent,
	          key: 'content',
	          style: contentStyle,
	          className: (0, _classnames2.default)('md-dialog-content', {
	            'md-dialog-content--padded': contentPadded
	          }, contentClassName)
	        },
	        children
	      ), _react2.default.createElement(_DialogFooter2.default, { key: 'footer', actions: actions })];
	
	      if (transformOrigin) {
	        style = Object.assign({}, style, { transformOrigin: transformOrigin });
	      }
	
	      return _react2.default.createElement(
	        _Paper2.default,
	        _extends({}, props, {
	          id: id,
	          component: _FocusContainer2.default,
	          ref: this._setRenderNode,
	          style: style,
	          className: (0, _classnames2.default)('md-background--card md-dialog', {
	            'md-dialog--full-page': fullPage,
	            'md-dialog--centered': !fullPage
	          }, className),
	          role: 'dialog',
	          'aria-labelledby': labelledBy
	        }),
	        dialogChildren
	      );
	    }
	  }]);
	
	  return Dialog;
	}(_react.PureComponent);
	
	Dialog.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  'aria-labelledby': _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  contentStyle: _propTypes2.default.object,
	  contentClassName: _propTypes2.default.string,
	  title: _propTypes2.default.node,
	  children: _propTypes2.default.node,
	  contentComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,
	  actions: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.object]))]),
	  initialFocus: _propTypes2.default.string,
	  pageX: _propTypes2.default.number,
	  pageY: _propTypes2.default.number,
	  containerX: _propTypes2.default.number,
	  containerY: _propTypes2.default.number,
	  fullPage: _propTypes2.default.bool,
	  onLeave: _propTypes2.default.func,
	  zDepth: _propTypes2.default.number.isRequired,
	  focusOnMount: _propTypes2.default.bool,
	  onOpen: _propTypes2.default.func
	};
	Dialog.defaultProps = {
	  contentComponent: 'section',
	  zDepth: 5
	};
	Dialog.childContextTypes = {
	  renderNode: _propTypes2.default.object
	};
	exports.default = Dialog;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DialogTitle = function (_PureComponent) {
	  _inherits(DialogTitle, _PureComponent);
	
	  function DialogTitle() {
	    _classCallCheck(this, DialogTitle);
	
	    return _possibleConstructorReturn(this, (DialogTitle.__proto__ || Object.getPrototypeOf(DialogTitle)).apply(this, arguments));
	  }
	
	  _createClass(DialogTitle, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['children', 'className']);
	
	      if (!children) {
	        return null;
	      }
	
	      return _react2.default.createElement(
	        'h2',
	        _extends({}, props, { className: (0, _classnames2.default)('md-title md-title--dialog', className) }),
	        children
	      );
	    }
	  }]);
	
	  return DialogTitle;
	}(_react.PureComponent);
	
	DialogTitle.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node
	};
	exports.default = DialogTitle;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _DialogContainer = __webpack_require__(58);
	
	var _DialogContainer2 = _interopRequireDefault(_DialogContainer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _DialogContainer2.default;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Divider = __webpack_require__(59);
	
	var _Divider2 = _interopRequireDefault(_Divider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Divider2.default;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Portal = __webpack_require__(27);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Overlay = function (_PureComponent) {
	  _inherits(Overlay, _PureComponent);
	
	  function Overlay() {
	    _classCallCheck(this, Overlay);
	
	    return _possibleConstructorReturn(this, (Overlay.__proto__ || Object.getPrototypeOf(Overlay)).apply(this, arguments));
	  }
	
	  _createClass(Overlay, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      // Always want the overlay to render in a separate subtree until 1.1.0
	      return { isInPortal: false };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          active = _props.active,
	          visible = _props.visible,
	          renderNode = _props.renderNode,
	          onClick = _props.onClick;
	
	      return _react2.default.createElement(
	        _Portal2.default,
	        { visible: visible, renderNode: renderNode },
	        _react2.default.createElement('div', {
	          className: (0, _classnames2.default)('md-overlay md-overlay--drawer md-pointer--hover', {
	            'md-overlay--active': active
	          }),
	          onClick: onClick
	        })
	      );
	    }
	  }]);
	
	  return Overlay;
	}(_react.PureComponent);
	
	Overlay.propTypes = {
	  active: _propTypes2.default.bool,
	  visible: _propTypes2.default.bool.isRequired,
	  renderNode: _propTypes2.default.object,
	  onClick: _propTypes2.default.func
	};
	Overlay.childContextTypes = {
	  isInPortal: _propTypes2.default.bool
	};
	exports.default = Overlay;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Drawer = __webpack_require__(60);
	
	var _Drawer2 = _interopRequireDefault(_Drawer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Drawer2.default;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _handleWindowClickListeners = __webpack_require__(38);
	
	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `ExpansionList` component is a wrapper for the `ExpansionPanel` that helps
	 * determine which `ExpansionPanel` currently has tab focus and adjusts the column
	 * sizes in the header of the `ExpansionPanel`.
	 *
	 * The `ExpansionList` and `ExpansionPanel` components should have probably been
	 * implemented as a `table` insead of a `ul || ol` since it is more column based,
	 * but it would complicate the API to have dynamic row generation for the expanded
	 * panels. The expanded panels _might_ not follow the same column widths as their labels
	 * so a singular row with a div for expanded content might not work correctly.
	 */
	var ExpansionList = function (_PureComponent) {
	  _inherits(ExpansionList, _PureComponent);
	
	  function ExpansionList(props) {
	    _classCallCheck(this, ExpansionList);
	
	    var _this = _possibleConstructorReturn(this, (ExpansionList.__proto__ || Object.getPrototypeOf(ExpansionList)).call(this, props));
	
	    _this.state = { columnWidths: [], focusedIndex: -1 };
	
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._removeFocus = _this._removeFocus.bind(_this);
	    _this._calcColumnWidths = _this._calcColumnWidths.bind(_this);
	    _this._determineTabFocus = _this._determineTabFocus.bind(_this);
	    return _this;
	  }
	
	  _createClass(ExpansionList, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.children !== nextProps.children) {
	        this._calcColumnWidths();
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var focusedIndex = this.state.focusedIndex;
	
	      if (prevState.focusedIndex === focusedIndex || prevState.focusedIndex > -1 && focusedIndex > -1) {
	        return;
	      }
	
	      (0, _handleWindowClickListeners2.default)(this._removeFocus, this.state.focusedIndex !== -1);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.state.focusedIndex === -1) {
	        (0, _handleWindowClickListeners2.default)(this._removeFocus, false);
	      }
	
	      window.removeEventListener('keyup', this._determineTabFocus);
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      if (container !== null) {
	        this._container = (0, _reactDom.findDOMNode)(container);
	        window.addEventListener('keyup', this._determineTabFocus);
	
	        this._calcColumnWidths();
	      }
	    }
	  }, {
	    key: '_determineTabFocus',
	    value: function _determineTabFocus(e) {
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        var panels = Array.prototype.slice.call((0, _reactDom.findDOMNode)(this).querySelectorAll('.md-panel-header'));
	        this.setState({ focusedIndex: panels.indexOf(e.target) });
	      }
	    }
	  }, {
	    key: '_removeFocus',
	    value: function _removeFocus() {
	      this.setState({ focusedIndex: -1 });
	    }
	
	    /**
	     * Since this should really be rendered as a table, need to calculate the max width for each _column_
	     * on the panel's header and apply that as a min width for the other panels.
	     */
	
	  }, {
	    key: '_calcColumnWidths',
	    value: function _calcColumnWidths() {
	      if (!this._container) {
	        return;
	      }
	
	      var columnWidths = Array.prototype.slice.call(this._container.querySelectorAll('.md-panel-header')).reduce(function (maxes, row) {
	        var columns = row.querySelectorAll('.md-panel-column');
	        for (var i = 0; i < columns.length; i++) {
	          // Only need to include the offsetWidth of the column because the child will really
	          // determine the width of the column. Since it has already been defined at this point,
	          // no additional work needs to be done.
	          maxes[i] = Math.max(columns[i].offsetWidth, maxes[i] || 0);
	        }
	
	        return maxes;
	      }, [0]);
	
	      this.setState({ columnWidths: columnWidths });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          columnWidths = _state.columnWidths,
	          focusedIndex = _state.focusedIndex;
	
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          component = _props.component,
	          props = _objectWithoutProperties(_props, ['children', 'className', 'component']);
	
	      return (0, _react.createElement)(component, _extends({}, props, {
	        ref: this._setContainer,
	        className: (0, _classnames2.default)('md-expansion-panel-list', className)
	      }), _react.Children.map(children, function (child, i) {
	        return (0, _react.cloneElement)(child, {
	          key: child.key || i,
	          columnWidths: columnWidths,
	          focused: focusedIndex === i
	        });
	      }));
	    }
	  }]);
	
	  return ExpansionList;
	}(_react.PureComponent);
	
	ExpansionList.propTypes = {
	  /**
	   * An optional style object to apply to the list.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the list.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The children should be a list or singular `ExpansionPanel` component
	   * to render with some additional props injected.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * The component to render the list as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired
	};
	ExpansionList.defaultProps = {
	  component: 'ul'
	};
	exports.default = ExpansionList;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _Collapser = __webpack_require__(61);
	
	var _Collapser2 = _interopRequireDefault(_Collapser);
	
	var _AccessibleFakeButton = __webpack_require__(45);
	
	var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);
	
	var _Collapse = __webpack_require__(17);
	
	var _Collapse2 = _interopRequireDefault(_Collapse);
	
	var _PanelContent = __webpack_require__(188);
	
	var _PanelContent2 = _interopRequireDefault(_PanelContent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var LABEL_FONT_SIZE = 15;
	var LINE_HEIGHT = 1.42857;
	var SINGLE_LINE_HEIGHT = LABEL_FONT_SIZE * LINE_HEIGHT;
	
	/**
	 * The `ExpansionPanel` component needs to be used with the `ExpansionList`
	 * component. The only reason is that the `ExpansionPanel` should really
	 * be rendered as a table, but it was a bit hard to have a single component
	 * dynamically rendering another row when expanded. It couldn't be in the
	 * same row since the expanded content might not have the same columns.
	 */
	
	var ExpansionPanel = function (_PureComponent) {
	  _inherits(ExpansionPanel, _PureComponent);
	
	  function ExpansionPanel(props) {
	    _classCallCheck(this, ExpansionPanel);
	
	    var _this = _possibleConstructorReturn(this, (ExpansionPanel.__proto__ || Object.getPrototypeOf(ExpansionPanel)).call(this, props));
	
	    _this.state = {
	      received: false,
	      twoLine: false
	    };
	
	    if (typeof props.expanded === 'undefined') {
	      _this.state.expanded = props.defaultExpanded;
	    }
	
	    _this._handleSave = _this._handleSave.bind(_this);
	    _this._handleCancel = _this._handleCancel.bind(_this);
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._determineIfTwoLine = _this._determineIfTwoLine.bind(_this);
	    return _this;
	  }
	
	  _createClass(ExpansionPanel, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._determineIfTwoLine();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (("development") === 'development' && !this.state.received) {
	        if (nextProps.columnWidths.length === 0) {
	          // Hopefully a nice warning about fixing the missing props injected from ExpansionList
	          /* eslint-disable no-console */
	          console.error('The `ExpansionPanel` component expects the `columnWidths` prop to be injected from the ' + '`ExpansionList` component. It could be missing because:' + '\n - you have a wrapper component with extra functionality' + '\n - the `ExpansionPanel` is not a direct child of the `ExpansonList` component' + '\n\nYou can fix this by making sure to pass `this.props.focused` and `this.props.columWidths` ' + 'within your wrapper component and making the `ExpansionPanel` a direct child of `ExpansionList`.');
	        }
	
	        this.setState({ received: true });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      if (this.props.label === prevProps.label && this.props.secondaryLabel === prevProps.secondaryLabel) {
	        return;
	      }
	
	      this._determineIfTwoLine();
	    }
	  }, {
	    key: '_isExpanded',
	    value: function _isExpanded(props, state) {
	      return typeof props.expanded === 'undefined' ? state.expanded : props.expanded;
	    }
	  }, {
	    key: '_determineIfTwoLine',
	    value: function _determineIfTwoLine() {
	      var twoLine = false;
	      Array.prototype.slice.call((0, _reactDom.findDOMNode)(this).querySelectorAll('.md-panel-column')).some(function (el) {
	        return twoLine = el.offsetHeight > SINGLE_LINE_HEIGHT;
	      });
	
	      this.setState({ twoLine: twoLine });
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick() {
	      var expanded = !this._isExpanded(this.props, this.state);
	      if (this.props.onExpandToggle) {
	        this.props.onExpandToggle(expanded);
	      }
	
	      if (typeof this.props.expanded === 'undefined') {
	        this.setState({ expanded: expanded });
	      }
	    }
	  }, {
	    key: '_handleSave',
	    value: function _handleSave(e) {
	      var _props = this.props,
	          onSave = _props.onSave,
	          onExpandToggle = _props.onExpandToggle,
	          closeOnSave = _props.closeOnSave;
	
	      if (onSave) {
	        onSave(e);
	      }
	
	      if (closeOnSave) {
	        if (onExpandToggle) {
	          onExpandToggle(false);
	        }
	
	        if (typeof this.props.expanded === 'undefined') {
	          this.setState({ expanded: false });
	        }
	      }
	    }
	  }, {
	    key: '_handleCancel',
	    value: function _handleCancel(e) {
	      var _props2 = this.props,
	          onCancel = _props2.onCancel,
	          onExpandToggle = _props2.onExpandToggle,
	          closeOnCancel = _props2.closeOnCancel;
	
	      if (onCancel) {
	        onCancel(e);
	      }
	
	      if (closeOnCancel) {
	        if (onExpandToggle) {
	          onExpandToggle(false);
	        }
	
	        if (typeof this.props.expanded === 'undefined') {
	          this.setState({ expanded: false });
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          className = _props3.className,
	          label = _props3.label,
	          secondaryLabel = _props3.secondaryLabel,
	          expandedSecondaryLabel = _props3.expandedSecondaryLabel,
	          children = _props3.children,
	          expandIconChildren = _props3.expandIconChildren,
	          expandIconClassName = _props3.expandIconClassName,
	          focused = _props3.focused,
	          columnWidths = _props3.columnWidths,
	          saveType = _props3.saveType,
	          saveLabel = _props3.saveLabel,
	          savePrimary = _props3.savePrimary,
	          saveSecondary = _props3.saveSecondary,
	          cancelType = _props3.cancelType,
	          cancelLabel = _props3.cancelLabel,
	          cancelPrimary = _props3.cancelPrimary,
	          cancelSecondary = _props3.cancelSecondary,
	          headerStyle = _props3.headerStyle,
	          headerClassName = _props3.headerClassName,
	          contentStyle = _props3.contentStyle,
	          contentClassName = _props3.contentClassName,
	          tabIndex = _props3.tabIndex,
	          props = _objectWithoutProperties(_props3, ['className', 'label', 'secondaryLabel', 'expandedSecondaryLabel', 'children', 'expandIconChildren', 'expandIconClassName', 'focused', 'columnWidths', 'saveType', 'saveLabel', 'savePrimary', 'saveSecondary', 'cancelType', 'cancelLabel', 'cancelPrimary', 'cancelSecondary', 'headerStyle', 'headerClassName', 'contentStyle', 'contentClassName', 'tabIndex']);
	
	      delete props.defaultExpanded;
	      delete props.expanded;
	      delete props.onSave;
	      delete props.onCancel;
	      delete props.onExpandToggle;
	      delete props.closeOnSave;
	      delete props.closeOnCancel;
	
	      var twoLine = this.state.twoLine;
	
	      var expanded = this._isExpanded(this.props, this.state);
	
	      var columns = _react.Children.map(expanded && expandedSecondaryLabel || secondaryLabel, function (panelLabel, i) {
	        return _react2.default.createElement(
	          'div',
	          { className: 'md-panel-column md-text', style: { minWidth: columnWidths[i + 1] } },
	          panelLabel
	        );
	      });
	
	      if (!Array.isArray(columns)) {
	        columns = [columns];
	      }
	
	      columns.unshift(_react2.default.createElement(
	        'div',
	        { className: 'md-panel-column md-text', style: { minWidth: columnWidths[0] }, key: 'main-label' },
	        label
	      ));
	
	      return _react2.default.createElement(
	        _Paper2.default,
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-expansion-panel', {
	            'md-expansion-panel--expanded': expanded
	          }, className),
	          'aria-expanded': expanded
	        }),
	        _react2.default.createElement(
	          _AccessibleFakeButton2.default,
	          {
	            onClick: this._handleClick,
	            style: headerStyle,
	            className: (0, _classnames2.default)('md-panel-header', {
	              'md-panel-header--expanded': expanded || twoLine,
	              'md-panel-header--focused': focused
	            }, headerClassName),
	            tabIndex: tabIndex
	          },
	          columns,
	          _react2.default.createElement(
	            _Collapser2.default,
	            { flipped: expanded, iconClassName: expandIconClassName, className: 'md-cell--right' },
	            expandIconChildren
	          )
	        ),
	        _react2.default.createElement(
	          _Collapse2.default,
	          { collapsed: !expanded },
	          _react2.default.createElement(
	            _PanelContent2.default,
	            {
	              style: contentStyle,
	              className: contentClassName,
	              onSave: this._handleSave,
	              onCancel: this._handleCancel,
	              saveType: saveType,
	              saveLabel: saveLabel,
	              savePrimary: savePrimary,
	              saveSecondary: saveSecondary,
	              cancelType: cancelType,
	              cancelLabel: cancelLabel,
	              cancelPrimary: cancelPrimary,
	              cancelSecondary: cancelSecondary
	            },
	            children
	          )
	        )
	      );
	    }
	  }]);
	
	  return ExpansionPanel;
	}(_react.PureComponent);
	
	ExpansionPanel.propTypes = {
	  /**
	   * An optional style to apply to the panel.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the panel.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An options style to apply to the panel's header content. This is the
	   * section that toggles the children to be visible and label columns.
	   */
	  headerStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the panel's header content. This is the
	   * section that toggles the children to be visible and label columns.
	   */
	  headerClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to applt to the element surrounding the children when expanded.
	   */
	  contentStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to applt to the element surrounding the children when expanded.
	   */
	  contentClassName: _propTypes2.default.string,
	
	  /**
	   * The main label to display in the unexpanded panel.
	   */
	  label: _propTypes2.default.node.isRequired,
	
	  /**
	   * Any additional columns to display after the main label. If this is a `list`
	   * instead of a singular item, they will each be formatted as a column.
	   */
	  secondaryLabel: _propTypes2.default.node,
	
	  /**
	   * Any additional columns to display after the main label when the panel is
	   * expanded. If this is omitted, the default `secondaryLabel` will be displayed
	   * instead.
	   */
	  expandedSecondaryLabel: _propTypes2.default.node,
	
	  /**
	   * The component to render the panel as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,
	
	  /**
	   * The content to display once the panel is toggled open.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * A boolean if the panel is currently expanded. This will force the component
	   * to be controlled and require's the `onExpandToggle` function to be defined.
	   */
	  expanded: (0, _controlled2.default)(_propTypes2.default.bool, 'onExpandToggle', 'defaultExpanded'),
	
	  /**
	   * Boolean if an uncontrolled panel should be expanded by default.
	   */
	  defaultExpanded: _propTypes2.default.bool.isRequired,
	
	  /**
	   * Any children required to render the expand icon.
	   */
	  expandIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className to use to render the expand icon.
	   */
	  expandIconClassName: _propTypes2.default.string,
	
	  /**
	   * Boolean if the `ExpansionPanel` is currently tab focused. This is injected
	   * and managed by the `ExpansionList` component. Do not set yourself.
	   */
	  focused: _propTypes2.default.bool.isRequired,
	
	  /**
	   * A list of min-widths to apply to each column in the panel header. This is injected
	   * and managed by the `ExpansionList` component. Do not set yourself.
	   */
	  columnWidths: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
	
	  /**
	   * A function to call when the expansion panel's expanded state is toggled.
	   * The callback for this function will include the new expanded state.
	   *
	   * `onExpandToggle(expanded)`
	   */
	  onExpandToggle: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the Save button is clicked on the expanded panel.
	   */
	  onSave: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the Cancel button is clicked on the expanded panel.
	   */
	  onCancel: _propTypes2.default.func,
	
	  /**
	   * Boolean if the panel should close when the Save button is clicked.
	   */
	  closeOnSave: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the panel should close when the Cancel button is clicked.
	   */
	  closeOnCancel: _propTypes2.default.bool,
	
	  /**
	   * An optional button type to apply to the Save button. This will get
	   * passed to the `FlatButton`.
	   */
	  saveType: _propTypes2.default.oneOf(['button', 'submit', 'reset']),
	
	  /**
	   * The label for the Save button.
	   */
	  saveLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the Save button should be styled with the primary color.
	   */
	  savePrimary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the Save button should be styled with the secondary color,
	   */
	  saveSecondary: _propTypes2.default.bool,
	
	  /**
	   * An optional button type to apply to the Cancel button. This will get
	   * passed to the `FlatButton`.
	   */
	  cancelType: _propTypes2.default.oneOf(['button', 'submit', 'reset']),
	
	  /**
	   * The label for the Cancel button.
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the Cancel button should be styled with the primary color,
	   */
	  cancelPrimary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the Cancel button should be styled with the secondary color,
	   */
	  cancelSecondary: _propTypes2.default.bool,
	
	  /**
	   * The tab index for the panel's header. This allows keyboard navigation.
	   */
	  tabIndex: _propTypes2.default.number.isRequired
	};
	ExpansionPanel.defaultProps = {
	  defaultExpanded: false,
	  expandIconChildren: 'keyboard_arrow_down',
	  component: 'li',
	  saveLabel: 'Save',
	  cancelLabel: 'Cancel',
	  savePrimary: true,
	  tabIndex: 0,
	  closeOnSave: true,
	  closeOnCancel: true,
	  focused: false,
	  columnWidths: []
	};
	exports.default = ExpansionPanel;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _DialogFooter = __webpack_require__(34);
	
	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `PanelContent` component is for displaying the expanded content
	 * for an `ExpansionPanel`. It wil display any children in a `md-panel-content`
	 * container followed by a `Divider` and the `PanelControls` .
	 */
	var PanelContent = function (_PureComponent) {
	  _inherits(PanelContent, _PureComponent);
	
	  function PanelContent() {
	    _classCallCheck(this, PanelContent);
	
	    return _possibleConstructorReturn(this, (PanelContent.__proto__ || Object.getPrototypeOf(PanelContent)).apply(this, arguments));
	  }
	
	  _createClass(PanelContent, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          contentStyle = _props.contentStyle,
	          className = _props.className,
	          children = _props.children,
	          onSave = _props.onSave,
	          onCancel = _props.onCancel,
	          saveType = _props.saveType,
	          saveLabel = _props.saveLabel,
	          savePrimary = _props.savePrimary,
	          saveSecondary = _props.saveSecondary,
	          cancelType = _props.cancelType,
	          cancelLabel = _props.cancelLabel,
	          cancelPrimary = _props.cancelPrimary,
	          cancelSecondary = _props.cancelSecondary;
	
	
	      var actions = [{
	        type: cancelType,
	        label: cancelLabel,
	        onClick: onCancel,
	        primary: cancelPrimary,
	        secondary: cancelSecondary
	      }, {
	        type: saveType,
	        label: saveLabel,
	        onClick: onSave,
	        primary: savePrimary,
	        secondary: saveSecondary
	      }];
	
	      return _react2.default.createElement(
	        'div',
	        { style: style },
	        _react2.default.createElement(
	          'div',
	          { className: (0, _classnames2.default)('md-panel-content', className), style: contentStyle },
	          children
	        ),
	        _react2.default.createElement(_DialogFooter2.default, { actions: actions, className: 'md-divider-border md-divider-border--top' })
	      );
	    }
	  }]);
	
	  return PanelContent;
	}(_react.PureComponent);
	
	PanelContent.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  contentStyle: _propTypes2.default.object,
	  children: _propTypes2.default.node,
	  onSave: _propTypes2.default.func.isRequired,
	  onCancel: _propTypes2.default.func.isRequired,
	  saveType: _propTypes2.default.string,
	  saveLabel: _propTypes2.default.node.isRequired,
	  savePrimary: _propTypes2.default.bool,
	  saveSecondary: _propTypes2.default.bool,
	  cancelType: _propTypes2.default.string,
	  cancelLabel: _propTypes2.default.node.isRequired,
	  cancelPrimary: _propTypes2.default.bool,
	  cancelSecondary: _propTypes2.default.bool
	};
	exports.default = PanelContent;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ExpansionList = exports.ExpansionPanel = undefined;
	
	var _ExpansionPanel = __webpack_require__(187);
	
	var _ExpansionPanel2 = _interopRequireDefault(_ExpansionPanel);
	
	var _ExpansionList2 = __webpack_require__(186);
	
	var _ExpansionList3 = _interopRequireDefault(_ExpansionList2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _ExpansionPanel2.default;
	exports.ExpansionPanel = _ExpansionPanel2.default;
	exports.ExpansionList = _ExpansionList3.default;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _CSSTransitionGroup = __webpack_require__(25);
	
	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Any props such as style or event listeners will be applied to the
	 * main floating action button. If you want props applied to the `SpeedDial`
	 * itself, you will need to set them in the `containerProps` prop.
	 */
	var SpeedDial = function (_PureComponent) {
	  _inherits(SpeedDial, _PureComponent);
	
	  function SpeedDial(props) {
	    _classCallCheck(this, SpeedDial);
	
	    var _this = _possibleConstructorReturn(this, (SpeedDial.__proto__ || Object.getPrototypeOf(SpeedDial)).call(this, props));
	
	    _this.state = { isOpen: props.initiallyOpen };
	    _this._handleClick = _this._handleClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(SpeedDial, [{
	    key: '_isOpen',
	    value: function _isOpen(props, state) {
	      return typeof props.isOpen === 'undefined' ? state.isOpen : props.isOpen;
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      var _props = this.props,
	          onClick = _props.onClick,
	          onPassiveClick = _props.onPassiveClick,
	          onActiveClick = _props.onActiveClick;
	
	      if (onClick) {
	        onClick(e);
	      }
	
	      var isOpen = this._isOpen(this.props, this.state);
	      if (isOpen && onActiveClick) {
	        onActiveClick(e);
	      } else if (!isOpen && onPassiveClick) {
	        onPassiveClick(e);
	      }
	
	      if (typeof this.props.isOpen === 'undefined') {
	        this.setState({ isOpen: !isOpen });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          fabs = _props2.fabs,
	          passiveIconChildren = _props2.passiveIconChildren,
	          passiveIconClassName = _props2.passiveIconClassName,
	          activeIconChildren = _props2.activeIconChildren,
	          activeIconClassName = _props2.activeIconClassName,
	          transitionName = _props2.transitionName,
	          transitionEnterTimeout = _props2.transitionEnterTimeout,
	          speedDialTransitionName = _props2.speedDialTransitionName,
	          speedDialTransitionEnterTimeout = _props2.speedDialTransitionEnterTimeout,
	          speedDialTransitionLeaveTimeout = _props2.speedDialTransitionLeaveTimeout,
	          containerProps = _props2.containerProps,
	          props = _objectWithoutProperties(_props2, ['fabs', 'passiveIconChildren', 'passiveIconClassName', 'activeIconChildren', 'activeIconClassName', 'transitionName', 'transitionEnterTimeout', 'speedDialTransitionName', 'speedDialTransitionEnterTimeout', 'speedDialTransitionLeaveTimeout', 'containerProps']);
	
	      delete props.isOpen;
	      delete props.initiallyOpen;
	
	      var isOpen = this._isOpen(this.props, this.state);
	
	      var speedDialFabs = void 0;
	      if (isOpen) {
	        speedDialFabs = fabs.map(function (fab, i) {
	          var fn = void 0;
	          var el = void 0;
	          var fabProps = void 0;
	          if (_react2.default.isValidElement(fab)) {
	            el = _react2.default.Children.only(fab);
	            fn = _react2.default.cloneElement;
	            fabProps = fab.props;
	          } else {
	            el = _Button2.default;
	            fn = _react2.default.createElement;
	            fabProps = fab;
	          }
	
	          var created = fn(el, _extends({
	            floating: true,
	            mini: true
	          }, fabProps));
	          return _react2.default.createElement(
	            'div',
	            { key: i, className: 'md-speed-dial-fab' },
	            created
	          );
	        });
	      }
	
	      props.iconClassName = isOpen ? activeIconClassName : passiveIconClassName;
	      props.children = isOpen ? activeIconChildren : passiveIconChildren;
	      return _react2.default.createElement(
	        _CSSTransitionGroup2.default,
	        _extends({}, containerProps, {
	          component: 'div',
	          className: (0, _classnames2.default)('md-speed-dial', !!containerProps && containerProps.className),
	          transitionName: transitionName + '-' + (isOpen ? 'right' : 'left'),
	          transitionEnterTimeout: transitionEnterTimeout,
	          transitionLeave: false,
	          ref: 'container'
	        }),
	        _react2.default.createElement(
	          _CSSTransitionGroup2.default,
	          {
	            component: 'div',
	            key: 'speed-dial-fabs',
	            transitionName: speedDialTransitionName,
	            transitionEnterTimeout: speedDialTransitionEnterTimeout,
	            transitionLeaveTimeout: speedDialTransitionLeaveTimeout
	          },
	          speedDialFabs
	        ),
	        _react2.default.createElement(_Button2.default, _extends({}, props, {
	          floating: true,
	          key: (isOpen ? 'open' : 'closed') + '-fab',
	          onClick: this._handleClick
	        }))
	      );
	    }
	  }]);
	
	  return SpeedDial;
	}(_react.PureComponent);
	
	SpeedDial.propTypes = {
	  /**
	   * A boolean if the speed dial is currently open. This will make
	   * the speed dial into a controlled component.
	   */
	  isOpen: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the uncontrolled speed dial is initially open.
	   */
	  initiallyOpen: _propTypes2.default.bool,
	
	  /**
	   * An optional className to apply to the speed dial.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The speed dial's floating action button transition name when the button's
	   * open state changes. If the button is open, `-right` is appened, otherwise
	   * `-left`.
	   */
	  transitionName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The timeout for the speed dial's floating action button transition.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The name for the flinging animation of the speed dial.
	   */
	  speedDialTransitionName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The timeout for the flinging animation of the speed dial when opening.
	   */
	  speedDialTransitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The timeout for the flinging animation when the speed dial is closing.
	   */
	  speedDialTransitionLeaveTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The optional children to display for unopened speed dial floating action button.
	   */
	  passiveIconChildren: _propTypes2.default.node,
	
	  /**
	   * The optional icon className to display for unopened speed dial floating action button.
	   */
	  passiveIconClassName: _propTypes2.default.node,
	
	  /**
	   * The optional children to display for opened speed dial floating action button.
	   */
	  activeIconChildren: _propTypes2.default.node,
	
	  /**
	   * The optional icon className to display for opened speed dial floating action button.
	   */
	  activeIconClassName: _propTypes2.default.string,
	
	  /**
	   * A list of `FloatingButton` or props to generate the `FloatinButton` when the
	   * `SpeedDial` is open. The buttons will automatically be converted to the `mini`
	   * version.
	   */
	  fabs: function fabs(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    var size = props.fabs.length;
	    if (size >= 3 && size <= 5) {
	      var _PropTypes$arrayOf;
	
	      return (_PropTypes$arrayOf = _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.shape({
	        onClick: _propTypes2.default.func,
	        iconClassName: _propTypes2.default.string,
	        children: _propTypes2.default.node
	      })]))).isRequired.apply(_PropTypes$arrayOf, [props, propName, component].concat(others));
	    }
	
	    var middle = size < 3 ? 'at least 3' : 'no more than 5';
	    return new Error('A speed dial requires ' + middle + ' floating action buttons to fling. ' + ('However, only ' + size + ' were given.'));
	  },
	
	  /**
	   * An optional function to call when the main floating action button is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the main floating action button is clicked.
	   */
	  onPassiveClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the main floating action button is clicked.
	   */
	  onActiveClick: _propTypes2.default.func,
	
	  /**
	   * Any additional props to apply to the speed dial itself.
	   */
	  containerProps: _propTypes2.default.object
	};
	SpeedDial.defaultProps = {
	  initiallyOpen: false,
	  transitionName: 'md-fab-rotate',
	  transitionEnterTimeout: 150,
	  speedDialTransitionName: 'md-speed-dial',
	  speedDialTransitionEnterTimeout: 450,
	  speedDialTransitionLeaveTimeout: 150,
	  passiveIconClassName: 'material-icons',
	  activeIconClassName: 'material-icons'
	};
	exports.default = SpeedDial;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SpeedDial = undefined;
	
	var _SpeedDial2 = __webpack_require__(190);
	
	var _SpeedDial3 = _interopRequireDefault(_SpeedDial2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.SpeedDial = _SpeedDial3.default;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _FileInput = __webpack_require__(95);
	
	var _FileInput2 = _interopRequireDefault(_FileInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `FileUpload` component is used to upload files locally This is a wrapper of the `FileInput` component
	 * with some additional functionality so any props that are undocumented on `FileUpload` but are present
	 * on `FileInput` are correctly provided. If you want to upload files to a server, use
	 * [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
	 * by attaching the `File`.
	 *
	 * Quick example:
	 *
	 * ```js
	 * function upload(file) {
	 *   fetch('/api/images', {
	 *     method: 'POST',
	 *     body: new FormData().append('file', file),
	 *   });
	 * }
	 * ```
	 *
	 * An upload can be aborted by calling the `abort(file || fileName)` function. If
	 * the file or fileName are ommitted, it will *attempt* to abort the current
	 * file that is uploading. Unreliable for multiselect.
	 *
	 * ```js
	 * <FileUpload ref="upload" />
	 * <Button raised onClick={() => this.refs.upload.abort()} label="Abort! Abort!" />
	 * ```
	 */
	var FileUpload = function (_PureComponent) {
	  _inherits(FileUpload, _PureComponent);
	
	  function FileUpload(props) {
	    _classCallCheck(this, FileUpload);
	
	    var _this = _possibleConstructorReturn(this, (FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).call(this, props));
	
	    _this.state = {};
	    _this.abort = _this.abort.bind(_this);
	    _this._uploadFile = _this._uploadFile.bind(_this);
	    _this._handleUpload = _this._handleUpload.bind(_this);
	    return _this;
	  }
	
	  /**
	   * Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`
	   * as it's parameter. If the parameter is omitted, it attempts to abort the first file that was
	   * added. If the `onAbort` function was given, it will be called as well.
	   *
	   * @param {Object|string=} file - The file or the file name to use to find the
	   *     correct `FileReader`.
	   */
	
	
	  _createClass(FileUpload, [{
	    key: 'abort',
	    value: function abort(file) {
	      var fileName = file;
	      if (!file) {
	        // Attempt to remove first file added...
	        fileName = Object.keys(this.state)[0];
	      } else if (typeof file.name === 'string') {
	        fileName = file.name;
	      }
	
	      var reader = this.state[fileName];
	      if (reader) {
	        reader.abort();
	        var state = this.state;
	        delete state[fileName];
	
	        (0, _reactDom.findDOMNode)(this).querySelector('.md-file-input').value = '';
	
	        this.setState(state);
	      }
	    }
	  }, {
	    key: '_uploadFile',
	    value: function _uploadFile(file) {
	      var _this2 = this;
	
	      var _props = this.props,
	          onAbort = _props.onAbort,
	          onError = _props.onError,
	          onLoad = _props.onLoad,
	          onLoadStart = _props.onLoadStart,
	          onLoadEnd = _props.onLoadEnd,
	          onProgress = _props.onProgress,
	          readAs = _props.readAs;
	      var name = file.name,
	          type = file.type;
	
	
	      var fr = new FileReader();
	      if (onError) {
	        fr.onerror = function (e) {
	          onError(file, e.target.error, e);
	        };
	      }
	
	      if (onAbort) {
	        fr.onabort = function (e) {
	          onAbort(file, e);
	        };
	      }
	
	      if (onLoadStart) {
	        fr.onloadstart = function (e) {
	          onLoadStart(file, e);
	        };
	      }
	
	      if (onLoadEnd) {
	        fr.onloadend = function (e) {
	          onLoadEnd(file, e);
	        };
	      }
	
	      fr.onload = function (e) {
	        if (onLoad) {
	          onLoad(file, e.target.result, e);
	        }
	
	        var state = Object.assign({}, _this2.state);
	        delete state[name];
	        _this2.setState(state);
	      };
	
	      if (onProgress) {
	        fr.onprogress = function (e) {
	          if (e.lengthComputable) {
	            onProgress(file, e.loaded / e.total * 100, e);
	          }
	        };
	      }
	
	      if (readAs) {
	        if (typeof readAs === 'function') {
	          readAs(file.type, file, fr);
	        } else {
	          fr['readAs' + readAs](file);
	        }
	      } else if (type.match(/image|video|audio/)) {
	        fr.readAsDataURL(file);
	      } else if (type.match(/json$/)) {
	        fr.readAsText(file);
	      } else if (type.match(/application|model|multipart/) || name.match(/(w|e)ar$/)) {
	        fr.readAsArrayBuffer(file);
	      } else {
	        fr.readAsText(file);
	      }
	
	      return fr;
	    }
	  }, {
	    key: '_handleUpload',
	    value: function _handleUpload(fileList, e) {
	      var _this3 = this;
	
	      if (this.props.onChange) {
	        this.props.onChange(fileList, e);
	      }
	
	      if (!fileList) {
	        return;
	      }
	      var _props2 = this.props,
	          maxSize = _props2.maxSize,
	          onSizeError = _props2.onSizeError;
	
	      var files = Array.isArray(fileList) ? fileList : [fileList];
	
	      var errorFiles = [];
	      if (maxSize) {
	        errorFiles = files.filter(function (file) {
	          return file.size > maxSize;
	        });
	        files = files.filter(function (file) {
	          return file.size <= maxSize;
	        });
	      }
	
	      if (errorFiles.length) {
	        onSizeError(errorFiles);
	      }
	
	      if (!files.length) {
	        return;
	      }
	
	      var nextState = {};
	      files.forEach(function (file) {
	        var fileReader = _this3._uploadFile(file);
	        nextState[file.name] = fileReader;
	      });
	
	      this.setState(nextState);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = _objectWithoutProperties(this.props, []);
	
	      // Remove invalid input props
	
	
	      delete props.maxSize;
	      delete props.onLoad;
	      delete props.onLoadStart;
	      delete props.onLoadEnd;
	      delete props.onProgress;
	      delete props.onAbort;
	      delete props.onError;
	      delete props.maxSize;
	      delete props.onSizeError;
	      delete props.readAs;
	
	      return _react2.default.createElement(_FileInput2.default, _extends({}, props, { onChange: this._handleUpload }));
	    }
	  }]);
	
	  return FileUpload;
	}(_react.PureComponent);
	
	FileUpload.propTypes = {
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * Boolean if the `FileInput` should be styled with the primary color.
	   */
	  primary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `FileInput` should be styled with the secondary color.
	   */
	  secondary: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `FileInput` should be styled as a flat button instead of a
	   * raised button.
	   */
	  flat: _propTypes2.default.bool,
	
	  /**
	   * This should be a comma separated list of Media Types that the `FileInput` can
	   * accept. If this prop is left blank, any file will be accepted.
	   *
	   * The values can either be:
	   * - A file extension
	   * - audio/*
	   * - video/*
	   * - image/*
	   * - any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)
	   */
	  accept: _propTypes2.default.string,
	
	  /**
	   * Boolean if multiple files will be accepted.
	   */
	  multiple: _propTypes2.default.bool,
	
	  /**
	   * A label to display on the `FileInput`.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * The icon children to use for the upload icon.
	   */
	  iconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className to use for the upload icon.
	   */
	  iconClassName: _propTypes2.default.string,
	
	  /**
	   * An optional max size for the file. If the file is greater than
	   * this limit, the file will not be uploaded.
	   */
	  maxSize: _propTypes2.default.number,
	
	  /**
	   * A required function to call when the `maxSize` prop is set. It will
	   * be given a list of files that were too big.
	   */
	  onSizeError: function onSizeError(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    if (typeof props.maxSize === 'number') {
	      var _PropTypes$func;
	
	      return (_PropTypes$func = _propTypes2.default.func).isRequired.apply(_PropTypes$func, [props, propName, component].concat(others));
	    }
	
	    return null;
	  },
	
	  /**
	   * You can force the `FileReader` to read the file as a specific type
	   * if you do not trust the *amazing* regex I have for choosing the correct
	   * one.
	   *
	   * ```js
	   * if(type.match(/image|video|audio/)) {
	   *   fr.readAsDataURL(file);
	   * } else if(type.match(/application|model|multipart/)) {
	   *   fr.readAsArrayBuffer(file);
	   * } else {
	   *   fr.readAsText(file);
	   * }
	   * ```
	   *
	   * > `.yml` and `.js` both are considered `application`, so it definitely fails there.
	   *
	   * If this prop is a function, you will be given the file's type, the file object, and
	   * the file reader. You will then need to call `fileReader.readAsYOUR_CORRECT_TYPE(file)`.
	   */
	  readAs: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['DataURL', 'ArrayBuffer', 'Text']), _propTypes2.default.func]),
	
	  /**
	   * An optional function to call when the `FileUpload` aborts. The current
	   * file and the abort event are given. This might not be the most useful
	   * function to use since you will need to manually call abort yourself anyways.
	   */
	  onAbort: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `FileUpload` errors. The current
	   * file, the error, and the error event are given.
	   *
	   * ```js
	   * onError(file, event.target.error, event);
	   * ```
	   */
	  onError: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `FileUpload` loads. The current
	   * file, the load result, and the load event are given.
	   *
	   * ```js
	   * onLoad(file, event.target.result, event);
	   * ```
	   *
	   * The load result will either be:
	   * - a data url
	   * - a plain text string
	   * - an array buffer
	   *
	   * depending on what type the file is.
	   */
	  onLoad: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `FileUpload` starts loading. The current
	   * file and the load start event are given.
	   */
	  onLoadStart: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `FileUpload` finishes loading. The
	   * current file and the load end event are given.
	   */
	  onLoadEnd: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the `FileUpload` progress. The current
	   * file, upload progress, and the progress event are given. The progress
	   * will be a number between 0 and 100 that has not been rounded.
	   *
	   * ```js
	   * onProgress(file, progress, event);
	   * ```
	   */
	  onProgress: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when a file selects or unselects a file.
	   * This will be called before any local uploading occurs.
	   *
	   * ```js
	   * onChange(file(s) || null, event);
	   * ```
	   */
	  onChange: _propTypes2.default.func
	};
	exports.default = FileUpload;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FileUpload = exports.FileInput = undefined;
	
	var _FileInput = __webpack_require__(95);
	
	var _FileInput2 = _interopRequireDefault(_FileInput);
	
	var _FileUpload2 = __webpack_require__(192);
	
	var _FileUpload3 = _interopRequireDefault(_FileUpload2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _FileInput2.default;
	exports.FileInput = _FileInput2.default;
	exports.FileUpload = _FileUpload3.default;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Portal = exports.IconSeparator = exports.FocusContainer = exports.Collapse = exports.AccessibleFakeInkedButton = exports.AccessibleFakeButton = undefined;
	
	var _AccessibleFakeButton2 = __webpack_require__(45);
	
	var _AccessibleFakeButton3 = _interopRequireDefault(_AccessibleFakeButton2);
	
	var _AccessibleFakeInkedButton2 = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton3 = _interopRequireDefault(_AccessibleFakeInkedButton2);
	
	var _Collapse2 = __webpack_require__(17);
	
	var _Collapse3 = _interopRequireDefault(_Collapse2);
	
	var _FocusContainer2 = __webpack_require__(97);
	
	var _FocusContainer3 = _interopRequireDefault(_FocusContainer2);
	
	var _IconSeparator2 = __webpack_require__(26);
	
	var _IconSeparator3 = _interopRequireDefault(_IconSeparator2);
	
	var _Portal2 = __webpack_require__(27);
	
	var _Portal3 = _interopRequireDefault(_Portal2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.AccessibleFakeButton = _AccessibleFakeButton3.default;
	exports.AccessibleFakeInkedButton = _AccessibleFakeInkedButton3.default;
	exports.Collapse = _Collapse3.default;
	exports.FocusContainer = _FocusContainer3.default;
	exports.IconSeparator = _IconSeparator3.default;
	exports.Portal = _Portal3.default;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Ink = function (_PureComponent) {
	  _inherits(Ink, _PureComponent);
	
	  function Ink(props) {
	    _classCallCheck(this, Ink);
	
	    var _this = _possibleConstructorReturn(this, (Ink.__proto__ || Object.getPrototypeOf(Ink)).call(this, props));
	
	    _this.state = {
	      active: false,
	      expanded: false,
	      pulsing: false,
	      leaving: false
	    };
	    return _this;
	  }
	
	  _createClass(Ink, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (!this.props.aborted && nextProps.aborted) {
	        if (this._timeout) {
	          clearTimeout(this._timeout);
	        }
	
	        if (this._abort) {
	          this._abort();
	        }
	
	        this.setState({ active: false, expanding: false, pulsing: false, leaving: false });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(cb) {
	      var _this2 = this;
	
	      if (this.props.aborted) {
	        cb();
	        return;
	      }
	
	      var _props = this.props,
	          transitionOverlap = _props.transitionOverlap,
	          transitionEnterTimeout = _props.transitionEnterTimeout;
	
	      this._abort = cb;
	
	      this._timeout = setTimeout(function () {
	        _this2._timeout = setTimeout(function () {
	          _this2._timeout = null;
	          _this2._abort = null;
	
	          cb();
	        }, transitionEnterTimeout - transitionOverlap);
	
	        _this2.setState({ expanded: true });
	      }, _CSSTransitionGroupTick2.default);
	
	      this.setState({ active: true });
	    }
	  }, {
	    key: 'componentDidEnter',
	    value: function componentDidEnter() {
	      var _this3 = this;
	
	      this._timeout = setTimeout(function () {
	        _this3._timeout = null;
	
	        _this3.setState({ pulsing: true });
	      }, this.props.transitionEnterTimeout);
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(cb) {
	      var _this4 = this;
	
	      if (this.props.aborted) {
	        cb();
	        return;
	      }
	
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	
	      this._abort = cb;
	      this._timeout = setTimeout(function () {
	        _this4._timeout = null;
	
	        cb();
	      }, this.props.transitionLeaveTimeout);
	
	      this.setState({ pulsing: false, leaving: true });
	    }
	  }, {
	    key: 'componentDidLeave',
	    value: function componentDidLeave() {
	      if (!this.props.aborted && this.props.onRemove) {
	        this.props.onRemove();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          style = _props2.style,
	          className = _props2.className,
	          left = _props2.left,
	          top = _props2.top,
	          size = _props2.size;
	      var _state = this.state,
	          active = _state.active,
	          expanded = _state.expanded,
	          pulsing = _state.pulsing,
	          leaving = _state.leaving;
	
	
	      return _react2.default.createElement('span', {
	        style: Object.assign({}, style, {
	          left: left,
	          top: top,
	          height: size,
	          width: size
	        }),
	        className: (0, _classnames2.default)('md-ink', {
	          'md-ink--active': active,
	          'md-ink--expanded': expanded,
	          'md-ink--pulsing': pulsing,
	          'md-ink--leaving': leaving
	        }, className)
	      });
	    }
	  }]);
	
	  return Ink;
	}(_react.PureComponent);
	
	Ink.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  aborted: _propTypes2.default.bool,
	  onRemove: _propTypes2.default.func,
	  left: _propTypes2.default.number.isRequired,
	  top: _propTypes2.default.number.isRequired,
	  size: _propTypes2.default.number.isRequired,
	  transitionOverlap: _propTypes2.default.number.isRequired,
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired
	};
	exports.default = Ink;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _TransitionGroup = __webpack_require__(86);
	
	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _calcPageOffset = __webpack_require__(124);
	
	var _calcPageOffset2 = _interopRequireDefault(_calcPageOffset);
	
	var _isFormPartRole = __webpack_require__(126);
	
	var _isFormPartRole2 = _interopRequireDefault(_isFormPartRole);
	
	var _isValidClick = __webpack_require__(67);
	
	var _isValidClick2 = _interopRequireDefault(_isValidClick);
	
	var _captureNextEvent = __webpack_require__(36);
	
	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);
	
	var _calculateHypotenuse = __webpack_require__(271);
	
	var _calculateHypotenuse2 = _interopRequireDefault(_calculateHypotenuse);
	
	var _Ink = __webpack_require__(195);
	
	var _Ink2 = _interopRequireDefault(_Ink);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `InkContainer` is usesd for holding the list of inks that get created by touch,
	 * click, or keyboard focus.
	 *
	 * If the container element has the `type="submit"` attribute, the ink will also be
	 * triggered when the user presses enter anywhere in the form.
	 */
	var InkContainer = function (_PureComponent) {
	  _inherits(InkContainer, _PureComponent);
	
	  function InkContainer(props) {
	    _classCallCheck(this, InkContainer);
	
	    var _this = _possibleConstructorReturn(this, (InkContainer.__proto__ || Object.getPrototypeOf(InkContainer)).call(this, props));
	
	    _this.state = { inks: [] };
	    _this.createInk = _this.createInk.bind(_this);
	    _this.focus = _this.focus.bind(_this);
	    _this._handleFocus = _this._handleFocus.bind(_this);
	    _this._createInk = _this._createInk.bind(_this);
	    _this._removeInk = _this._removeInk.bind(_this);
	    _this._setContainers = _this._setContainers.bind(_this);
	    _this._maybeDelayClick = _this._maybeDelayClick.bind(_this);
	    _this._handleBlur = _this._handleBlur.bind(_this);
	    _this._handleMouseDown = _this._handleMouseDown.bind(_this);
	    _this._handleMouseUp = _this._handleMouseUp.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleTouchMove = _this._handleTouchMove.bind(_this);
	    _this._handleTouchEnd = _this._handleTouchEnd.bind(_this);
	    _this._handleRemove = _this._handleRemove.bind(_this);
	    _this._handleSubmit = _this._handleSubmit.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._getKeyboardContainer = _this._getKeyboardContainer.bind(_this);
	    _this._stopPropagationToFocus = _this._stopPropagationToFocus.bind(_this);
	    _this._initOrRemoveEvents = _this._initOrRemoveEvents.bind(_this);
	    return _this;
	  }
	
	  _createClass(InkContainer, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var di = this.props.disabledInteractions;
	      var ndi = nextProps.disabledInteractions;
	
	      if (di === ndi || !this._container) {
	        return;
	      }
	
	      var mouseDisabledDiff = this._isListenerDisabledDiff('mouse', di, ndi);
	      var touchDisabledDiff = this._isListenerDisabledDiff('touch', di, ndi);
	      var keyboardDisabledDiff = this._isListenerDisabledDiff('keyboard', di, ndi);
	      this._initOrRemoveEvents(nextProps, keyboardDisabledDiff, mouseDisabledDiff, touchDisabledDiff);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._removeTimeout) {
	        clearTimeout(this._removeTimeout);
	      }
	
	      if (this._container) {
	        this._initOrRemoveEvents({ disabledInteractions: ['keyboard', 'mouse', 'touch'] });
	        this._getKeyboardContainer().removeEventListener('blur', this._handleBlur);
	      }
	    }
	
	    /**
	     * Creates an ink from pageX and pageY coordinates. These values should either come
	     * from the `changedTouches` or just the base event (if clicked). These coordinates
	     * are used to position the ink correctly in the container from touch/click point.
	     * If either value is undefined, an ink will be created from the center of the
	     * container.
	     *
	     * It will also automatically remove the ink.
	     *
	     * @param {number} pageX - The page x coordinate of the click or touch event.
	     * @param {number} pageY - The page y coordinate of the click or touch event.
	     */
	
	  }, {
	    key: 'createInk',
	    value: function createInk(pageX, pageY) {
	      var _this2 = this;
	
	      this._createInk(pageX, pageY);
	      this._removeTimeout = setTimeout(function () {
	        _this2._removeTimeout = null;
	        _this2._removeInk();
	      }, this.props.transitionOverlap);
	    }
	
	    /**
	     * Focuses the main element.
	     */
	
	  }, {
	    key: 'focus',
	    value: function focus() {
	      this._getKeyboardContainer().focus();
	    }
	
	    /**
	     * Creates an ink from pageX and pageY coordinates. These values should either come
	     * from the `changedTouches` or just the base event (if clicked). These coordinates
	     * are used to position the ink correctly in the container from touch/click point.
	     * If either value is undefined, an ink will be created from the center of the
	     * container.
	     *
	     * @param {number} pageX - The page x coordinate of the click or touch event.
	     * @param {number} pageY - The page y coordinate of the click or touch event.
	     */
	
	  }, {
	    key: '_createInk',
	    value: function _createInk(pageX, pageY) {
	      var _inkContainer = this._inkContainer,
	          offsetWidth = _inkContainer.offsetWidth,
	          offsetHeight = _inkContainer.offsetHeight;
	
	
	      var x = void 0;
	      var y = void 0;
	      if (typeof pageX !== 'undefined' && typeof pageY !== 'undefined') {
	        var pageOffset = (0, _calcPageOffset2.default)(this._inkContainer);
	
	        x = pageX - pageOffset.left;
	        y = pageY - pageOffset.top;
	      } else {
	        x = offsetWidth / 2;
	        y = offsetHeight / 2;
	      }
	
	      var r = Math.max((0, _calculateHypotenuse2.default)(x, y), (0, _calculateHypotenuse2.default)(offsetWidth - x, y), (0, _calculateHypotenuse2.default)(offsetWidth - x, offsetHeight - y), (0, _calculateHypotenuse2.default)(x, offsetHeight - y));
	
	      var ink = {
	        left: x - r,
	        top: y - r,
	        size: r * 2,
	        key: Date.now()
	      };
	
	      var inks = this.state.inks.slice();
	      inks.push(ink);
	      this.setState({ inks: inks });
	    }
	
	    /**
	     * Removes an ink from the container.
	     */
	
	  }, {
	    key: '_removeInk',
	    value: function _removeInk() {
	      var inks = this.state.inks.slice();
	      inks.pop();
	
	      this.setState({ inks: inks });
	    }
	
	    /**
	     * Gets the container for any keyboard events. This will almost always be the main element,
	     * but text fields will need to be the input itself.
	     */
	
	  }, {
	    key: '_getKeyboardContainer',
	    value: function _getKeyboardContainer() {
	      if (this._container.classList.contains('md-text-field-container')) {
	        return this._container.querySelector('.md-text-field');
	      }
	
	      return this._container;
	    }
	
	    /**
	     * Sets the ink container and the main container from the ref callback. When the component
	     * is mounting, the keyboard, mouse, and keyboard events will be initialized.
	     *
	     * @param {Object} inkContainer - The ink container.
	     */
	
	  }, {
	    key: '_setContainers',
	    value: function _setContainers(inkContainer) {
	      if (inkContainer !== null) {
	        this._inkContainer = (0, _reactDom.findDOMNode)(inkContainer);
	        this._container = this._inkContainer.parentNode;
	
	        if (this._container) {
	          this._initOrRemoveEvents(this.props);
	        }
	      }
	    }
	
	    /**
	     * This function will either add or remove the event listeners for creating inks.
	     *
	     * @param {Object} props - The current props to use for figuring out if the events should
	     *    be added or removed.
	     * @param {bool=} keyboardDiff - Boolean if there was a difference between the current props and either
	     *    the previous or next props for the keyboard interactions being disabled.
	     * @param {bool=} mouseDiff - Boolean if there was a difference between the current props and either
	     *    the previous or next props for the mouse interactions being disabled.
	     * @param {bool=} touchDiff - Boolean if there was a difference between the current props and either
	     *    the previous or next props for the touch interactions being disabled.
	     */
	
	  }, {
	    key: '_initOrRemoveEvents',
	    value: function _initOrRemoveEvents(props) {
	      var keyboardDiff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var mouseDiff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	      var touchDiff = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	
	      var mouseDisabled = this._isListenerDisabled('mouse', props.disabledInteractions);
	      var touchDisabled = this._isListenerDisabled('touch', props.disabledInteractions);
	      var keyboardDisabled = this._isListenerDisabled('keyboard', props.disabledInteractions);
	
	      if (keyboardDiff) {
	        var fn = (keyboardDisabled ? 'remove' : 'add') + 'EventListener';
	        this._getKeyboardContainer()[fn]('focus', this._handleFocus);
	        this._getKeyboardContainer()[fn]('keydown', this._handleKeyDown);
	
	        if (this._container.getAttribute('type') === 'submit') {
	          window[fn]('submit', this._handleSubmit);
	        }
	
	        if (mouseDiff) {
	          this._container[(mouseDisabled ? 'add' : 'remove') + 'EventListener']('mousedown', this._stopPropagationToFocus);
	        }
	
	        if (touchDiff) {
	          this._container[(touchDisabled ? 'add' : 'remove') + 'EventListener']('touchstart', this._stopPropagationToFocus);
	        }
	      }
	
	      if (mouseDiff) {
	        var _fn = (mouseDisabled ? 'remove' : 'add') + 'EventListener';
	        this._container[_fn]('mousedown', this._handleMouseDown);
	        this._container[_fn]('mouseup', this._handleMouseUp);
	      }
	
	      if (touchDiff) {
	        var _fn2 = (touchDisabled ? 'remove' : 'add') + 'EventListener';
	        this._container[_fn2]('touchstart', this._handleTouchStart);
	        this._container[_fn2]('touchend', this._handleTouchEnd);
	      }
	    }
	  }, {
	    key: '_isListenerDisabledDiff',
	    value: function _isListenerDisabledDiff(interaction, disabledInteractions, nextDisabledInteractions) {
	      var i = disabledInteractions.indexOf(interaction);
	      var ni = nextDisabledInteractions.indexOf(interaction);
	
	      return i < 0 && ni >= 0 || i >= 0 && ni < 0;
	    }
	  }, {
	    key: '_isListenerDisabled',
	    value: function _isListenerDisabled(interaction, disabledInteractions) {
	      return disabledInteractions && disabledInteractions.indexOf(interaction) !== -1;
	    }
	  }, {
	    key: '_maybeDelayClick',
	    value: function _maybeDelayClick() {
	      if (!this.props.waitForInkTransition) {
	        return;
	      }
	
	      (0, _captureNextEvent2.default)('click', this._container);
	    }
	  }, {
	    key: '_handleRemove',
	    value: function _handleRemove() {
	      var _this3 = this;
	
	      if (this._clicked && this.props.waitForInkTransition) {
	        // For some reason if the click event will make the ink unmount, it will no longer
	        // have a debug id in the TransitionGroup and it displays a warning. Adding a 1ms timeout
	        // fixes that issue... It only happens on an actual click instead of an enter click.
	        setTimeout(function () {
	          _this3._container.click();
	        }, 1);
	      }
	
	      this._clicked = false;
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      var key = e.which || e.keyCode;
	      var enter = key === _keyCodes.ENTER;
	      var space = key === _keyCodes.SPACE;
	      // Don't trigger ink when enter key is pressed and the target has an input inside of it (SelectField)
	      if (space || enter && !(0, _isFormPartRole2.default)(e.target) && !e.target.querySelector('input')) {
	        this._clicked = true;
	        this.createInk();
	        this._maybeDelayClick();
	      }
	    }
	  }, {
	    key: '_handleFocus',
	    value: function _handleFocus() {
	      if (this._clicked) {
	        return;
	      }
	
	      this._createInk();
	      this._getKeyboardContainer().addEventListener('blur', this._handleBlur);
	    }
	  }, {
	    key: '_handleBlur',
	    value: function _handleBlur() {
	      this._getKeyboardContainer().removeEventListener('blur', this._handleBlur);
	      this._removeInk();
	    }
	  }, {
	    key: '_handleMouseDown',
	    value: function _handleMouseDown(e) {
	      this._clicked = true;
	      if (!(0, _isValidClick2.default)(e) || this._skipNextMouse) {
	        this._skipNextMouse = false;
	        return;
	      }
	
	      this._mouseLeave = false;
	      this._container.addEventListener('mouseleave', this._handleMouseLeave);
	      this._createInk(e.pageX, e.pageY);
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave() {
	      this._container.removeEventListener('mouseleave', this._handleMouseLeave);
	      this._mouseLeave = true;
	      this._removeInk();
	    }
	  }, {
	    key: '_handleMouseUp',
	    value: function _handleMouseUp() {
	      if (this._mouseLeave) {
	        return;
	      }
	
	      this._maybeDelayClick();
	      this._container.removeEventListener('mouseleave', this._handleMouseLeave);
	      this._removeInk();
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      this._aborted = false;
	      this._clicked = true;
	      this._skipNextMouse = true;
	      window.addEventListener('touchmove', this._handleTouchMove);
	
	      var _e$changedTouches$ = e.changedTouches[0],
	          pageX = _e$changedTouches$.pageX,
	          pageY = _e$changedTouches$.pageY;
	
	      this._createInk(pageX, pageY);
	    }
	  }, {
	    key: '_handleTouchMove',
	    value: function _handleTouchMove() {
	      window.removeEventListener('touchmove', this._handleTouchMove);
	      var lastInk = this.state.inks[this.state.inks.length - 1];
	      if (!lastInk || Date.now() > lastInk.key + 200) {
	        this._aborted = false;
	        return;
	      }
	
	      var inks = this.state.inks.slice();
	      var index = inks.length - 1;
	
	      var abortedInk = Object.assign({}, lastInk, { aborted: true });
	      inks.splice(index, 1, abortedInk);
	
	      this._aborted = true;
	      this.setState({ inks: inks }, this._removeInk);
	    }
	  }, {
	    key: '_handleTouchEnd',
	    value: function _handleTouchEnd() {
	      this._skipNextMouse = true;
	
	      if (this._aborted) {
	        return;
	      } else {
	        window.removeEventListener('touchmove', this._handleTouchMove);
	      }
	
	      this._removeInk();
	    }
	
	    /**
	     * If a form was submitted that contains the container of the ink and the current focus element
	     * is not the container, trigger an ink effect.
	     *
	     * The current focus check is added so that two inks are not created.
	     */
	
	  }, {
	    key: '_handleSubmit',
	    value: function _handleSubmit(e) {
	      if (document.activeElement === this._container || !e.target.contains(this._container)) {
	        return;
	      }
	
	      this._maybeDelayClick();
	      this.createInk();
	    }
	  }, {
	    key: '_stopPropagationToFocus',
	    value: function _stopPropagationToFocus(e) {
	      var type = e.type;
	
	      var mousedown = type === 'mousedown';
	      this._clicked = mousedown || type === 'touchstart';
	
	      if (this._clicked) {
	        window.addEventListener(mousedown ? 'mouseup' : 'touchend', this._stopPropagationToFocus, true);
	      } else {
	        window.removeEventListener(e.type, this._stopPropagationToFocus, true);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;
	
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          inkStyle = _props.inkStyle,
	          inkClassName = _props.inkClassName,
	          transitionOverlap = _props.transitionOverlap,
	          transitionEnterTimeout = _props.transitionEnterTimeout,
	          transitionLeaveTimeout = _props.transitionLeaveTimeout;
	
	      var inks = this.state.inks.map(function (props) {
	        return _react2.default.createElement(_Ink2.default, _extends({}, props, {
	          style: inkStyle,
	          className: inkClassName,
	          onRemove: _this4._handleRemove,
	          transitionOverlap: transitionOverlap,
	          transitionEnterTimeout: transitionEnterTimeout,
	          transitionLeaveTimeout: transitionLeaveTimeout
	        }));
	      });
	
	      return _react2.default.createElement(
	        _TransitionGroup2.default,
	        {
	          ref: this._setContainers,
	          component: 'div',
	          style: style,
	          className: (0, _classnames2.default)('md-ink-container', className)
	        },
	        inks
	      );
	    }
	  }]);
	
	  return InkContainer;
	}(_react.PureComponent);
	
	InkContainer.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  inkStyle: _propTypes2.default.object,
	  inkClassName: _propTypes2.default.string,
	  waitForInkTransition: _propTypes2.default.bool,
	  disabledInteractions: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['keyboard', 'mouse', 'touch'])),
	  transitionOverlap: _propTypes2.default.number.isRequired,
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired
	};
	InkContainer.defaultProps = {
	  transitionOverlap: 150,
	  transitionEnterTimeout: 450,
	  transitionLeaveTimeout: 300
	};
	exports.default = InkContainer;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _injectInk = __webpack_require__(62);
	
	var _injectInk2 = _interopRequireDefault(_injectInk);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _injectInk2.default;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _ListItemText = __webpack_require__(98);
	
	var _ListItemText2 = _interopRequireDefault(_ListItemText);
	
	var _TileAddon = __webpack_require__(63);
	
	var _TileAddon2 = _interopRequireDefault(_TileAddon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ListItemControl = function (_PureComponent) {
	  _inherits(ListItemControl, _PureComponent);
	
	  function ListItemControl() {
	    _classCallCheck(this, ListItemControl);
	
	    return _possibleConstructorReturn(this, (ListItemControl.__proto__ || Object.getPrototypeOf(ListItemControl)).apply(this, arguments));
	  }
	
	  _createClass(ListItemControl, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          tileStyle = _props.tileStyle,
	          tileClassName = _props.tileClassName,
	          primaryAction = _props.primaryAction,
	          secondaryAction = _props.secondaryAction,
	          primaryText = _props.primaryText,
	          secondaryText = _props.secondaryText,
	          threeLines = _props.threeLines,
	          leftIcon = _props.leftIcon,
	          leftAvatar = _props.leftAvatar,
	          rightIcon = _props.rightIcon,
	          rightAvatar = _props.rightAvatar,
	          props = _objectWithoutProperties(_props, ['className', 'tileStyle', 'tileClassName', 'primaryAction', 'secondaryAction', 'primaryText', 'secondaryText', 'threeLines', 'leftIcon', 'leftAvatar', 'rightIcon', 'rightAvatar']);
	
	      var control = _react.Children.only(primaryAction || secondaryAction);
	      var text = _react2.default.createElement(_ListItemText2.default, {
	        key: 'text',
	        primaryText: control.props.label || primaryText,
	        secondaryText: secondaryText,
	        className: (0, _classnames2.default)({
	          'md-tile-content--left-icon': leftIcon,
	          'md-tile-content--left-avatar': leftAvatar,
	          'md-tile-content--left-button': primaryAction,
	          'md-tile-content--right-padding': primaryAction
	        })
	      });
	      control = (0, _react.cloneElement)(control, {
	        className: (0, _classnames2.default)('md-list-control', {
	          'md-list-control--right': secondaryAction
	        }, control.props.className),
	        label: text
	      });
	
	      var leftNode = _react2.default.createElement(_TileAddon2.default, {
	        key: 'left-addon',
	        icon: leftIcon,
	        avatar: leftAvatar
	      });
	
	      var rightNode = _react2.default.createElement(_TileAddon2.default, {
	        key: 'right-addon',
	        icon: rightIcon,
	        avatar: rightAvatar
	      });
	
	      var icond = !!leftIcon || !!rightIcon;
	      var avatard = !!leftAvatar || !!rightAvatar;
	
	      return _react2.default.createElement(
	        'li',
	        _extends({}, props, { className: (0, _classnames2.default)('md-list-item', className) }),
	        _react2.default.createElement(
	          'div',
	          {
	            style: tileStyle,
	            className: (0, _classnames2.default)('md-list-tile md-text', {
	              'md-list-tile--icon': !secondaryText && icond && !avatard,
	              'md-list-tile--avatar': !secondaryText && avatard,
	              'md-list-tile--two-lines': secondaryText && !threeLines,
	              'md-list-tile--three-lines': secondaryText && threeLines,
	              'md-list-tile--control-left': primaryAction,
	              'md-list-tile--control-right': secondaryAction
	            }, tileClassName)
	          },
	          leftNode,
	          control,
	          rightNode
	        )
	      );
	    }
	  }]);
	
	  return ListItemControl;
	}(_react.PureComponent);
	
	ListItemControl.propTypes = {
	  /**
	   * An optional style to apply to the `.md-list-item`.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `.md-list-item`.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the `.md-list-tile`.
	   */
	  tileStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `.md-list-tile`.
	   */
	  tileClassName: _propTypes2.default.string,
	
	  /**
	   * The primary text to display in the `ListItemControl`. The `primaryAction` or
	   * `secondaryAction` will end up getting the `label` prop injected into it with
	   * a combination of the `primaryText` and `secondaryText`. If the `primaryAction`
	   * or `secondaryAction` already have a label prop, the `label` prop will be used
	   * as the `primaryText`.
	   */
	  primaryText: _propTypes2.default.node,
	
	  /**
	   * An optional secondary text that can be displayed in the label of the `primaryAction`
	   * or `secondaryAction`.
	   */
	  secondaryText: _propTypes2.default.node,
	
	  /**
	   * Boolean if the primary and secondary text will span three lines.
	   */
	  threeLines: _propTypes2.default.bool,
	
	  /**
	   * The primary action of the `ListItemControl`. This _should_ normally
	   * be a type of `SelectionControl`
	   */
	  primaryAction: _propTypes2.default.element,
	
	  /**
	   * The secondary action of the `ListItemControl`. This _should_ normally
	   * be a type of `SelectionControl`. If it is a selection control,
	   * make sure to add the `labelBefore` prop to get correct positioning.
	   */
	  secondaryAction: _propTypes2.default.element,
	
	  /**
	   * An optional `FontIcon` to display to the left of the action.
	   */
	  leftIcon: _propTypes2.default.node,
	
	  /**
	   * An optional `Avatar` to display to the left of the action.
	   */
	  leftAvatar: _propTypes2.default.node,
	
	  /**
	   * An optional `FontIcon` to display to the right of the action.
	   */
	  rightIcon: _propTypes2.default.node,
	
	  /**
	   * An optional `FontIcon` to display to the right of the action.
	   */
	  rightAvatar: _propTypes2.default.node
	};
	exports.default = ListItemControl;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ListItemControl = exports.ListItem = exports.List = undefined;
	
	var _List = __webpack_require__(28);
	
	var _List2 = _interopRequireDefault(_List);
	
	var _ListItem2 = __webpack_require__(46);
	
	var _ListItem3 = _interopRequireDefault(_ListItem2);
	
	var _ListItemControl2 = __webpack_require__(198);
	
	var _ListItemControl3 = _interopRequireDefault(_ListItemControl2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _List2.default;
	exports.List = _List2.default;
	exports.ListItem = _ListItem3.default;
	exports.ListItemControl = _ListItemControl3.default;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MediaOverlay = exports.Media = undefined;
	
	var _Media = __webpack_require__(99);
	
	var _Media2 = _interopRequireDefault(_Media);
	
	var _MediaOverlay2 = __webpack_require__(100);
	
	var _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Media2.default;
	exports.Media = _Media2.default;
	exports.MediaOverlay = _MediaOverlay3.default;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _Menu = __webpack_require__(35);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	var _Positions = __webpack_require__(47);
	
	var _Positions2 = _interopRequireDefault(_Positions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * A simple wrapper for creating Menus wrapped with Button. The props used are a
	 * combination of the `Menu` and `Button` components. Menu props will be extracted
	 * and any props that are not `Menu` related will be passed to the `Button`.
	 *
	 * The only main difference is that the `children` for the button are now defined with
	 * `buttonChildren`.
	 */
	var MenuButton = function (_PureComponent) {
	  _inherits(MenuButton, _PureComponent);
	
	  function MenuButton(props) {
	    _classCallCheck(this, MenuButton);
	
	    var _this = _possibleConstructorReturn(this, (MenuButton.__proto__ || Object.getPrototypeOf(MenuButton)).call(this, props));
	
	    _this.state = {
	      isOpen: props.defaultOpen || false
	    };
	    _this._toggleMenu = _this._toggleMenu.bind(_this);
	    _this._closeMenu = _this._closeMenu.bind(_this);
	    return _this;
	  }
	
	  _createClass(MenuButton, [{
	    key: '_toggleMenu',
	    value: function _toggleMenu(e) {
	      var isOpen = !this.state.isOpen;
	      if (this.props.onClick) {
	        this.props.onClick(e);
	      }
	
	      if (this.props.onMenuToggle) {
	        this.props.onMenuToggle(isOpen, e);
	      }
	
	      this.setState({ isOpen: isOpen });
	    }
	  }, {
	    key: '_closeMenu',
	    value: function _closeMenu(e) {
	      if (this.props.onMenuToggle) {
	        this.props.onMenuToggle(false, e);
	      }
	
	      this.setState({ isOpen: false });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var isOpen = this.state.isOpen;
	
	      var _props = this.props,
	          id = _props.id,
	          listId = _props.listId,
	          buttonId = _props.buttonId,
	          menuStyle = _props.menuStyle,
	          menuClassName = _props.menuClassName,
	          listStyle = _props.listStyle,
	          listClassName = _props.listClassName,
	          buttonChildren = _props.buttonChildren,
	          children = _props.children,
	          fullWidth = _props.fullWidth,
	          position = _props.position,
	          contained = _props.contained,
	          transitionName = _props.transitionName,
	          transitionEnterTimeout = _props.transitionEnterTimeout,
	          transitionLeaveTimeout = _props.transitionLeaveTimeout,
	          props = _objectWithoutProperties(_props, ['id', 'listId', 'buttonId', 'menuStyle', 'menuClassName', 'listStyle', 'listClassName', 'buttonChildren', 'children', 'fullWidth', 'position', 'contained', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout']);
	
	      delete props.onClick;
	      delete props.onMenuToggle;
	      delete props.defaultOpen;
	
	      var toggle = _react2.default.createElement(
	        _Button2.default,
	        _extends({
	          key: 'menu-button'
	        }, props, {
	          id: buttonId,
	          onClick: this._toggleMenu
	        }),
	        buttonChildren
	      );
	
	      return _react2.default.createElement(
	        _Menu2.default,
	        {
	          id: id,
	          listId: listId,
	          style: menuStyle,
	          className: menuClassName,
	          listStyle: listStyle,
	          listClassName: listClassName,
	          toggle: toggle,
	          isOpen: isOpen,
	          onClose: this._closeMenu,
	          contained: contained,
	          position: position,
	          fullWidth: fullWidth,
	          transitionName: transitionName,
	          transitionEnterTimeout: transitionEnterTimeout,
	          transitionLeaveTimeout: transitionLeaveTimeout
	        },
	        children
	      );
	    }
	  }]);
	
	  return MenuButton;
	}(_react.PureComponent);
	
	MenuButton.Positions = _Positions2.default;
	MenuButton.propTypes = {
	  /**
	   * An id to use for the menu button. This is required for a11y
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * An optional id to give the button instead of the menu.
	   */
	  buttonId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional id to give the list that appears in the menu.
	   */
	  listId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional style to apply to the button.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the button.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the menu.
	   */
	  menuStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the menu.
	   */
	  menuClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the menu's list when it is open.
	   */
	  listStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the menu's list when it is open.
	   */
	  listClassName: _propTypes2.default.string,
	
	  /**
	   * Any children used to render icons or anything else for the button.
	   */
	  buttonChildren: _propTypes2.default.node,
	
	  /**
	   * An optional function to call when the button is clicked.
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the menu's visiblity is toggled. The callback
	   * will include the next `open` state and the click event.
	   */
	  onMenuToggle: _propTypes2.default.func,
	
	  /**
	   * Boolean if the MenuButton is open by default.
	   */
	  defaultOpen: _propTypes2.default.bool,
	
	  /**
	   * The position for the menu.
	   */
	  position: _propTypes2.default.oneOf([_Positions2.default.TOP_LEFT, _Positions2.default.TOP_RIGHT, _Positions2.default.BOTTOM_LEFT, _Positions2.default.BOTTOM_RIGHT, _Positions2.default.BELOW]),
	
	  /**
	   * A list of `ListItem`s to render when the Menu is toggled open.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the `Menu` is displayed as full width.
	   */
	  fullWidth: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the max width of the menu's list should be equal to the `Button`.
	   */
	  contained: _propTypes2.default.bool,
	
	  /**
	   * An optional transition name to use for the menu transitions.
	   */
	  transitionName: _propTypes2.default.string,
	
	  /**
	   * An optional transition leave timeout to use for the menu transitions.
	   */
	  transitionEnterTimeout: _propTypes2.default.number,
	
	  /**
	   * An optional transition leave timeout to use for the menu transitions.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number
	};
	exports.default = MenuButton;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MenuButton = exports.Menu = undefined;
	
	var _Menu = __webpack_require__(35);
	
	var _Menu2 = _interopRequireDefault(_Menu);
	
	var _MenuButton2 = __webpack_require__(201);
	
	var _MenuButton3 = _interopRequireDefault(_MenuButton2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Menu2.default;
	exports.Menu = _Menu2.default;
	exports.MenuButton = _MenuButton3.default;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	var _TileAddon = __webpack_require__(63);
	
	var _TileAddon2 = _interopRequireDefault(_TileAddon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MiniListItem = function (_PureComponent) {
	  _inherits(MiniListItem, _PureComponent);
	
	  function MiniListItem(props) {
	    _classCallCheck(this, MiniListItem);
	
	    var _this = _possibleConstructorReturn(this, (MiniListItem.__proto__ || Object.getPrototypeOf(MiniListItem)).call(this, props));
	
	    _this.state = { active: false };
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    _this._handleTouchEnd = _this._handleTouchEnd.bind(_this);
	    _this._handleMouseOver = _this._handleMouseOver.bind(_this);
	    _this._handleMouseLeave = _this._handleMouseLeave.bind(_this);
	    return _this;
	  }
	
	  _createClass(MiniListItem, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._touchTimeout) {
	        clearTimeout(this._touchTimeout);
	      }
	    }
	  }, {
	    key: '_handleMouseOver',
	    value: function _handleMouseOver(e) {
	      if (this.props.onMouseOver) {
	        this.props.onMouseOver(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ active: true });
	      }
	    }
	  }, {
	    key: '_handleMouseLeave',
	    value: function _handleMouseLeave(e) {
	      if (this.props.onMouseLeave) {
	        this.props.onMouseLeave(e);
	      }
	
	      if (!this.props.disabled) {
	        this.setState({ active: false });
	      }
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart(e) {
	      if (this.props.onTouchStart) {
	        this.props.onTouchStart(e);
	      }
	
	      this._touched = true;
	
	      this.setState({ active: true, touchedAt: Date.now() });
	    }
	  }, {
	    key: '_handleTouchEnd',
	    value: function _handleTouchEnd(e) {
	      var _this2 = this;
	
	      if (this.props.onTouchEnd) {
	        this.props.onTouchEnd(e);
	      }
	
	      var time = Date.now() - this.state.touchedAt;
	      this._touchTimeout = setTimeout(function () {
	        _this2._touchTimeout = null;
	
	        _this2.setState({ active: false });
	      }, time > 450 ? 0 : 450 - time);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          tileStyle = _props.tileStyle,
	          tileClassName = _props.tileClassName,
	          leftIcon = _props.leftIcon,
	          leftAvatar = _props.leftAvatar,
	          active = _props.active,
	          activeClassName = _props.activeClassName,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'tileStyle', 'tileClassName', 'leftIcon', 'leftAvatar', 'active', 'activeClassName']);
	
	      delete props.defaultOpen;
	      return _react2.default.createElement(
	        'li',
	        { style: style, className: className },
	        _react2.default.createElement(
	          _AccessibleFakeInkedButton2.default,
	          _extends({}, props, {
	            style: tileStyle,
	            className: (0, _classnames2.default)('md-list-tile md-list-tile--icon md-list-tile--mini', {
	              'md-list-tile--active': this.state.active && !this._touched
	            }, tileClassName),
	            onMouseOver: this._handleMouseOver,
	            onMouseLeave: this._handleMouseLeave,
	            onTouchStart: this._handleTouchStart,
	            onTouchEnd: this._handleTouchEnd
	          }),
	          _react2.default.createElement(_TileAddon2.default, {
	            active: active,
	            activeClassName: activeClassName,
	            icon: leftIcon,
	            avatar: leftAvatar
	          })
	        )
	      );
	    }
	  }]);
	
	  return MiniListItem;
	}(_react.PureComponent);
	
	MiniListItem.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  tileStyle: _propTypes2.default.object,
	  tileClassName: _propTypes2.default.string,
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	  active: _propTypes2.default.bool,
	  activeClassName: _propTypes2.default.string,
	  leftIcon: _propTypes2.default.node,
	  leftAvatar: _propTypes2.default.node,
	  disabled: _propTypes2.default.bool,
	  onTouchStart: _propTypes2.default.func,
	  onTouchEnd: _propTypes2.default.func,
	  onMouseOver: _propTypes2.default.func,
	  onMouseLeave: _propTypes2.default.func
	};
	MiniListItem.defaultProps = {
	  activeClassName: 'md-text--theme-primary',
	  component: 'div'
	};
	exports.default = MiniListItem;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _CSSTransitionGroup = __webpack_require__(25);
	
	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _invalidIf = __webpack_require__(19);
	
	var _invalidIf2 = _interopRequireDefault(_invalidIf);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	var _Drawer = __webpack_require__(60);
	
	var _Drawer2 = _interopRequireDefault(_Drawer);
	
	var _List = __webpack_require__(28);
	
	var _List2 = _interopRequireDefault(_List);
	
	var _Toolbar = __webpack_require__(113);
	
	var _Toolbar2 = _interopRequireDefault(_Toolbar);
	
	var _isType = __webpack_require__(94);
	
	var _JumpToContentLink = __webpack_require__(103);
	
	var _JumpToContentLink2 = _interopRequireDefault(_JumpToContentLink);
	
	var _CloseButton = __webpack_require__(102);
	
	var _CloseButton2 = _interopRequireDefault(_CloseButton);
	
	var _MiniListItem = __webpack_require__(203);
	
	var _MiniListItem2 = _interopRequireDefault(_MiniListItem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	var DrawerTypes = _Drawer2.default.DrawerTypes;
	
	
	function getNonMiniType(type) {
	  var pMini = DrawerTypes.PERSISTENT_MINI,
	      tMini = DrawerTypes.TEMPORARY_MINI;
	
	  if ([pMini, tMini].indexOf(type) === -1) {
	    return type;
	  }
	
	  return pMini === type ? DrawerTypes.PERSISTENT : DrawerTypes.TEMPORARY;
	}
	
	function toMiniListItem(item, index) {
	  if ((0, _react.isValidElement)(item)) {
	    return item;
	  }
	
	  var divider = item.divider,
	      subheader = item.subheader,
	      key = item.key,
	      itemProps = _objectWithoutProperties(item, ['divider', 'subheader', 'key']);
	
	  if (divider || subheader) {
	    return null;
	  }
	
	  delete itemProps.primaryText;
	  delete itemProps.secondaryText;
	  delete itemProps.rightIcon;
	  delete itemProps.rightAvatar;
	  delete itemProps.threeLines;
	  delete itemProps.nestedItems;
	  delete itemProps.expanderIconChildren;
	  delete itemProps.expanderIconClassName;
	  delete itemProps.children;
	
	  return _react2.default.createElement(_MiniListItem2.default, _extends({ key: key || index }, itemProps));
	}
	
	/**
	 * The `NavigationDrawer` is used when you want a full layout configuration. It is a combination
	 * of the `Toolbar` component and the `Drawer` component. Any props that are not specifically
	 * listed below will be provided to the `Drawer` component. So if there are props on the `Drawer`
	 * that are not listed here, they will be passed along.
	 *
	 * The main benfit of using this component is that it will manage adding respective offset
	 * classes automatically for you to the content and the drawer. It will also manage using
	 * a mini drawer type for you.
	 */
	
	var NavigationDrawer = function (_PureComponent) {
	  _inherits(NavigationDrawer, _PureComponent);
	
	  _createClass(NavigationDrawer, null, [{
	    key: 'getCurrentMedia',
	
	
	    /**
	     * Determines the current media and returns an object containing matches for `mobile`, `tablet`, `desktop`,
	     * and the current drawer type. This expects a `props` object of the drawer.
	     *
	     * If this is used server side, it will default to only matching mobile.
	     *
	     * @param {Object=} props - The current drawer's prop shape to extract the mobile, tablet, and desktop type/min
	     *    widths. This defaults to the drawer's default props.
	     * @return {Object} an object containing the media matches and the current type to use for the drawer.
	     */
	    value: function getCurrentMedia() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NavigationDrawer.defaultProps;
	
	      var mobileType = props.mobileDrawerType,
	          tabletType = props.tabletDrawerType,
	          desktopType = props.desktopDrawerType,
	          constantType = props.constantDrawerType,
	          others = _objectWithoutProperties(props, ['mobileDrawerType', 'tabletDrawerType', 'desktopDrawerType', 'constantDrawerType']);
	
	      return _Drawer2.default.getCurrentMedia(_extends({ mobileType: mobileType, tabletType: tabletType, desktopType: desktopType, constantType: constantType }, others));
	    }
	  }]);
	
	  function NavigationDrawer(props) {
	    _classCallCheck(this, NavigationDrawer);
	
	    var _this = _possibleConstructorReturn(this, (NavigationDrawer.__proto__ || Object.getPrototypeOf(NavigationDrawer)).call(this, props));
	
	    var defaultMedia = props.defaultMedia,
	        defaultVisible = props.defaultVisible,
	        initialDrawerType = props.initialDrawerType;
	
	
	    _this.state = {
	      mobile: initialDrawerType || defaultMedia === 'mobile',
	      tablet: initialDrawerType || defaultMedia === 'tablet',
	      desktop: initialDrawerType || defaultMedia === 'desktop'
	    };
	
	    if (typeof props.drawerType === 'undefined') {
	      _this.state.drawerType = props[(initialDrawerType || defaultMedia) + 'DrawerType'];
	    }
	
	    var type = (0, _getField2.default)(props, _this.state, 'drawerType');
	
	    if (typeof props.visible === 'undefined') {
	      _this.state.visible = typeof defaultVisible !== 'undefined' ? defaultVisible : (0, _isType.isPermanent)(type);
	    }
	
	    _this._handleTypeChange = _this._handleTypeChange.bind(_this);
	    _this._handleVisibility = _this._handleVisibility.bind(_this);
	    _this._toggleVisibility = _this._toggleVisibility.bind(_this);
	    return _this;
	  }
	
	  _createClass(NavigationDrawer, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _props = this.props,
	          persistentIconChildren = _props.persistentIconChildren,
	          persistentIconClassName = _props.persistentIconClassName,
	          closeIconChildren = _props.closeIconChildren,
	          closeIconClassName = _props.closeIconClassName,
	          id = _props.contentId,
	          label = _props.jumpLabel;
	
	
	      return {
	        id: id,
	        label: label,
	        closeChildren: closeIconChildren || persistentIconChildren,
	        closeIconClassName: closeIconClassName || persistentIconClassName,
	        onCloseClick: this._toggleVisibility,
	        renderNode: this.context.renderNode
	      };
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var _this2 = this;
	
	      var visible = (0, _getField2.default)(this.props, this.state, 'visible');
	      var nVisible = (0, _getField2.default)(nextProps, nextState, 'visible');
	      var drawerType = (0, _getField2.default)(nextProps, nextState, 'drawerType');
	
	      if (!(0, _isType.isTemporary)(drawerType) && visible !== nVisible) {
	        if (this._timeout) {
	          clearTimeout(this._timeout);
	        }
	
	        this._timeout = setTimeout(function () {
	          _this2.setState({ contentActive: false });
	        }, nextProps.drawerTransitionDuration);
	
	        this.setState({ contentActive: true });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	    }
	  }, {
	    key: '_toggleVisibility',
	    value: function _toggleVisibility(e) {
	      var _props2 = this.props,
	          onVisibilityToggle = _props2.onVisibilityToggle,
	          onDrawerChange = _props2.onDrawerChange;
	
	      var visible = !(0, _getField2.default)(this.props, this.state, 'visible');
	      if (onVisibilityToggle || onDrawerChange) {
	        (onDrawerChange || onVisibilityToggle)(visible, e);
	      }
	
	      if (typeof this.props.visible === 'undefined') {
	        this.setState({ visible: visible });
	      }
	    }
	  }, {
	    key: '_handleVisibility',
	    value: function _handleVisibility(visible) {
	      if (this.props.onVisibilityToggle) {
	        this.props.onVisibilityToggle(visible);
	      }
	
	      if (typeof this.props.visible === 'undefined') {
	        this.setState({ visible: visible });
	      }
	    }
	  }, {
	    key: '_handleTypeChange',
	    value: function _handleTypeChange(drawerType, mediaState) {
	      var onMediaTypeChange = this.props.onMediaTypeChange;
	
	      var state = mediaState;
	      if (onMediaTypeChange) {
	        onMediaTypeChange(drawerType, mediaState);
	      }
	
	      if (typeof this.props.drawerType === 'undefined') {
	        state = _extends({}, mediaState, { drawerType: drawerType });
	      }
	
	      this.setState(state);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          style = _props3.style,
	          className = _props3.className,
	          toolbarStyle = _props3.toolbarStyle,
	          toolbarClassName = _props3.toolbarClassName,
	          drawerStyle = _props3.drawerStyle,
	          drawerClassName = _props3.drawerClassName,
	          contentStyle = _props3.contentStyle,
	          contentClassName = _props3.contentClassName,
	          Content = _props3.contentComponent,
	          navItems = _props3.navItems,
	          children = _props3.children,
	          drawerTitle = _props3.drawerTitle,
	          drawerChildren = _props3.drawerChildren,
	          drawerHeaderChildren = _props3.drawerHeaderChildren,
	          drawerTransitionDuration = _props3.drawerTransitionDuration,
	          toolbarTitle = _props3.toolbarTitle,
	          toolbarTitleMenu = _props3.toolbarTitleMenu,
	          toolbarTitleStyle = _props3.toolbarTitleStyle,
	          toolbarTitleClassName = _props3.toolbarTitleClassName,
	          toolbarActions = _props3.toolbarActions,
	          toolbarProminent = _props3.toolbarProminent,
	          toolbarProminentTitle = _props3.toolbarProminentTitle,
	          toolbarThemeType = _props3.toolbarThemeType,
	          toolbarSingleColor = _props3.toolbarSingleColor,
	          toolbarChildren = _props3.toolbarChildren,
	          mobileType = _props3.mobileDrawerType,
	          tabletType = _props3.tabletDrawerType,
	          desktopType = _props3.desktopDrawerType,
	          transitionName = _props3.transitionName,
	          transitionEnterTimeout = _props3.transitionEnterTimeout,
	          transitionLeaveTimeout = _props3.transitionLeaveTimeout,
	          extractMini = _props3.extractMini,
	          miniDrawerHeader = _props3.miniDrawerHeader,
	          miniDrawerChildren = _props3.miniDrawerChildren,
	          temporaryIconChildren = _props3.temporaryIconChildren,
	          temporaryIconClassName = _props3.temporaryIconClassName,
	          menuIconChildren = _props3.menuIconChildren,
	          menuIconClassName = _props3.menuIconClassName,
	          footer = _props3.footer,
	          includeDrawerHeader = _props3.includeDrawerHeader,
	          contentId = _props3.contentId,
	          contentProps = _props3.contentProps,
	          constantDrawerType = _props3.constantDrawerType,
	          props = _objectWithoutProperties(_props3, ['style', 'className', 'toolbarStyle', 'toolbarClassName', 'drawerStyle', 'drawerClassName', 'contentStyle', 'contentClassName', 'contentComponent', 'navItems', 'children', 'drawerTitle', 'drawerChildren', 'drawerHeaderChildren', 'drawerTransitionDuration', 'toolbarTitle', 'toolbarTitleMenu', 'toolbarTitleStyle', 'toolbarTitleClassName', 'toolbarActions', 'toolbarProminent', 'toolbarProminentTitle', 'toolbarThemeType', 'toolbarSingleColor', 'toolbarChildren', 'mobileDrawerType', 'tabletDrawerType', 'desktopDrawerType', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'extractMini', 'miniDrawerHeader', 'miniDrawerChildren', 'temporaryIconChildren', 'temporaryIconClassName', 'menuIconChildren', 'menuIconClassName', 'footer', 'includeDrawerHeader', 'contentId', 'contentProps', 'constantDrawerType']);
	
	      delete props.drawerType;
	      delete props.drawerHeader;
	      delete props.persistentIconChildren;
	      delete props.persistentIconClassName;
	      delete props.jumpLabel;
	      delete props.renderNode;
	
	      // Deprecated deletes
	      delete props.onDrawerChange;
	      delete props.closeIconChildren;
	      delete props.closeIconClassName;
	
	      var drawerHeader = this.props.drawerHeader;
	      var _state = this.state,
	          desktop = _state.desktop,
	          tablet = _state.tablet,
	          contentActive = _state.contentActive;
	
	
	      var drawerType = (0, _getField2.default)(this.props, this.state, 'drawerType');
	      var visible = (0, _getField2.default)(this.props, this.state, 'visible');
	      var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	      var mini = (0, _isType.isMini)(drawerType);
	      var temporary = (0, _isType.isTemporary)(drawerType);
	      var persistent = (0, _isType.isPersistent)(drawerType);
	      var clipped = drawerType === DrawerTypes.CLIPPED;
	      var floating = drawerType === DrawerTypes.FLOATING;
	
	      var offset = desktop || tablet ? !temporary && visible : visible;
	      var toolbarRelative = (0, _classnames2.default)({
	        'md-toolbar-relative': !toolbarProminent && !toolbarProminentTitle,
	        'md-toolbar-relative--prominent': toolbarProminent || toolbarProminentTitle
	      });
	
	      var nav = void 0;
	      if (temporary || persistent) {
	        nav = _react2.default.createElement(
	          _Button2.default,
	          {
	            key: 'nav',
	            onClick: this._toggleVisibility,
	            disabled: persistent && visible,
	            icon: true,
	            iconClassName: menuIconClassName || temporaryIconClassName
	          },
	          menuIconChildren || temporaryIconChildren
	        );
	      }
	
	      var closeButton = void 0;
	      if (persistent) {
	        closeButton = _react2.default.createElement(_CloseButton2.default, null);
	      }
	
	      if (!drawerHeader && includeDrawerHeader) {
	        drawerHeader = _react2.default.createElement(
	          _Toolbar2.default,
	          {
	            key: 'drawer-header',
	            title: drawerTitle,
	            actions: visible && nav ? closeButton : null,
	            className: (0, _classnames2.default)('md-divider-border md-divider-border--bottom', _defineProperty({}, toolbarRelative, clipped || floating))
	          },
	          drawerHeaderChildren,
	          _react2.default.createElement(_JumpToContentLink2.default, null)
	        );
	      }
	      var miniDrawer = void 0;
	      if (mini) {
	        var miniList = void 0;
	        if (extractMini) {
	          miniList = navItems.map(toMiniListItem);
	          miniList = _react2.default.createElement(
	            _List2.default,
	            { key: 'mini-nav-items', className: toolbarRelative },
	            miniList
	          );
	        }
	
	        miniDrawer = _react2.default.createElement(
	          _Drawer2.default,
	          { key: 'mini-drawer', type: drawerType, renderNode: renderNode, 'aria-hidden': visible },
	          miniDrawerHeader,
	          miniList,
	          miniDrawerChildren
	        );
	      }
	
	      var desktopOffset = !clipped && !floating && offset;
	
	      return _react2.default.createElement(
	        'div',
	        { style: style, className: className },
	        _react2.default.createElement(
	          _Toolbar2.default,
	          {
	            colored: toolbarThemeType === 'colored',
	            themed: toolbarThemeType === 'themed',
	            singleColor: toolbarSingleColor,
	            style: toolbarStyle,
	            className: (0, _classnames2.default)({
	              'md-toolbar--over-drawer': clipped || floating || mini && !visible
	            }, toolbarClassName),
	            title: toolbarTitle,
	            titleMenu: toolbarTitleMenu,
	            prominent: toolbarProminent,
	            prominentTitle: toolbarProminentTitle,
	            titleStyle: toolbarTitleStyle,
	            titleClassName: (0, _classnames2.default)({
	              'md-title--drawer-active': contentActive,
	              'md-transition--decceleration': offset && visible,
	              'md-transition--acceleration': offset && !visible,
	              'md-title--permanent-offset': desktopOffset && (0, _isType.isPermanent)(drawerType),
	              'md-title--persistent-offset': desktopOffset && persistent
	            }, toolbarTitleClassName),
	            nav: nav,
	            actions: toolbarActions,
	            fixed: true
	          },
	          toolbarChildren
	        ),
	        miniDrawer,
	        _react2.default.createElement(
	          _Drawer2.default,
	          _extends({}, props, {
	            constantType: constantDrawerType,
	            transitionDuration: drawerTransitionDuration,
	            header: drawerHeader,
	            style: drawerStyle,
	            className: drawerClassName,
	            navItems: navItems,
	            renderNode: renderNode,
	            mobileType: mobileType,
	            tabletType: tabletType,
	            desktopType: desktopType,
	            type: getNonMiniType(drawerType),
	            visible: visible,
	            onVisibilityToggle: this._handleVisibility,
	            onMediaTypeChange: this._handleTypeChange
	          }),
	          drawerChildren
	        ),
	        _react2.default.createElement(
	          _CSSTransitionGroup2.default,
	          _extends({}, contentProps, {
	            id: contentId,
	            component: Content,
	            transitionName: transitionName,
	            transitionEnter: !!transitionEnterTimeout,
	            transitionEnterTimeout: transitionEnterTimeout,
	            transitionLeave: !!transitionLeaveTimeout,
	            transitionLeaveTimeout: transitionLeaveTimeout,
	            tabIndex: -1,
	            style: contentStyle,
	            className: (0, _classnames2.default)('md-navigation-drawer-content', {
	              'md-navigation-drawer-content--active': contentActive,
	              'md-navigation-drawer-content--inactive': !visible,
	              'md-navigation-drawer-content--prominent-offset': toolbarProminent || toolbarProminentTitle,
	              'md-transition--decceleration': visible,
	              'md-transition--acceleration': !visible,
	              'md-drawer-relative': offset,
	              'md-drawer-relative--mini': mini && (!visible || temporary)
	            }, toolbarRelative, contentClassName)
	          }),
	          children
	        ),
	        footer
	      );
	    }
	  }]);
	
	  return NavigationDrawer;
	}(_react.PureComponent);
	
	NavigationDrawer.DrawerType = { // deprecated
	  /* eslint-disable no-console */
	  _warned: false,
	  _msg: 'Invalid use of `NavigationDrawer.DrawerType.{{TYPE}}`. The `NavigationDrawer.DrawerType` ' + 'has been deprecated and will be removed in the next release. Please use the ' + '`NavigationDrawer.DrawerTypes.{{TYPE}}` instead.',
	
	  get FULL_HEIGHT() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'FULL_HEIGHT'));
	    }
	    this._warned = true;
	
	    return DrawerTypes.FULL_HEIGHT;
	  },
	
	  get CLIPPED() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'CLIPPED'));
	    }
	    this._warned = true;
	
	    return DrawerTypes.CLIPPED;
	  },
	
	  get FLOATING() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'FLOATING'));
	    }
	    this._warned = true;
	
	    return DrawerTypes.FLOATING;
	  },
	
	  get PERSISTENT() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT'));
	    }
	    this._warned = true;
	
	    return DrawerTypes.PERSISTENT;
	  },
	
	  get PERSISTENT_MINI() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'PERSISTENT_MINI'));
	    }
	    this._warned = true;
	
	    return DrawerTypes.PERSISTENT_MINI;
	  },
	
	  get TEMPORARY() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY'));
	    }
	    this._warned = true;
	
	    return DrawerTypes.TEMPORARY;
	  },
	
	  get TEMPORARY_MINI() {
	    if (!this._warned) {
	      console.error(this._msg.replace(/{{TYPE}}/g, 'TEMPORARY_MINI'));
	    }
	    this._warned = true;
	
	    return DrawerTypes.TEMPORARY_MINI;
	  }
	};
	NavigationDrawer.DrawerTypes = DrawerTypes;
	NavigationDrawer.propTypes = {
	  /**
	   * An optional style to apply to the surrounding container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the surrounding container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the main toolbar.
	   */
	  toolbarStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the toolbar.
	   */
	  toolbarClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the main toolbar's title.
	   */
	  toolbarTitleStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the main toolbar's title.
	   */
	  toolbarTitleClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the drawer.
	   */
	  drawerStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the drawer.
	   */
	  drawerClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the `List` surrounding the `navItems`.
	   */
	  navStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `List` surrounding the `navItems`.
	   */
	  navClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the content. This is the container surrounding whatever
	   * `children` are passed in.
	   */
	  contentStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the content. This is the container surrounding whatever
	   * `children` are passed in.
	   */
	  contentClassName: _propTypes2.default.string,
	
	  /**
	   * The children to display in the main content.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * Boolean if the `drawerHeader` component should be built if the `drawerHeader` prop is not
	   * passed in.
	   */
	  includeDrawerHeader: _propTypes2.default.bool,
	
	  /**
	   * An optional header to display in the drawer. This will normally be the `Toolbar` component
	   * or any other type of header. You can either use this prop with the `CloseButton` component
	   * when displaying a persistent drawer, or use the `drawerTitle` and `drawerHeaderChildren` prop
	   * to build a toolbar.
	   */
	  drawerHeader: _propTypes2.default.node,
	
	  /**
	   * An optional title to use for the drawer's header toolbar. If the `drawerHeader` prop is defined,
	   * this is invalid.
	   */
	  drawerTitle: (0, _invalidIf2.default)(_propTypes2.default.node, 'drawerHeader'),
	
	  /**
	   * Any additional children to display in the drawer's header `Toolbar`. If the `drawerHeader` prop is defined,
	   * this is invalud.
	   */
	  drawerHeaderChildren: (0, _invalidIf2.default)(_propTypes2.default.node, 'drawerHeader'),
	
	  /**
	   * Any additional children to display after the `drawerHeader` and `navItems` list in the drawer.
	   */
	  drawerChildren: _propTypes2.default.node,
	
	  /**
	   * The position for the drawer to be displayed.
	   */
	  position: _propTypes2.default.oneOf(['left', 'right']).isRequired,
	
	  /**
	   * An optional list of elements or props to use to build a navigational list in the drawer.
	   * When the item is an object of props, it will build a `ListItem` component unless a key of
	   * `divider` or `subheader` is set to true. It will then create the Divider or Subheader component
	   * with any other remaining keys.
	   */
	  navItems: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.shape({
	    divider: _propTypes2.default.bool,
	    subheader: _propTypes2.default.bool,
	    primaryText: _propTypes2.default.node
	  })])),
	
	  /**
	   * The drawer type to use for mobile devices.
	   */
	  mobileDrawerType: _propTypes2.default.oneOf([DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]).isRequired,
	
	  /**
	   * The drawer tye to use for tablets.
	   */
	  tabletDrawerType: _propTypes2.default.oneOf([DrawerTypes.FULL_HEIGHT, DrawerTypes.CLIPPED, DrawerTypes.FLOATING, DrawerTypes.PERSISTENT, DrawerTypes.PERSISTENT_MINI, DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]).isRequired,
	
	  /**
	   * The drawer type to use for desktop displays.
	   */
	  desktopDrawerType: _propTypes2.default.oneOf([DrawerTypes.FULL_HEIGHT, DrawerTypes.CLIPPED, DrawerTypes.FLOATING, DrawerTypes.PERSISTENT, DrawerTypes.PERSISTENT_MINI, DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]).isRequired,
	
	  /**
	   * An optional drawer type to enforce on all screen sizes. If the drawer type is not
	   * `temporary`, you are required to define the `onMediaTypeChange` prop to handle switching
	   * to temporary when the media matches a mobile device.
	   * ```
	   */
	  drawerType: _propTypes2.default.oneOf([DrawerTypes.FULL_HEIGHT, DrawerTypes.CLIPPED, DrawerTypes.FLOATING, DrawerTypes.PERSISTENT, DrawerTypes.PERSISTENT_MINI, DrawerTypes.TEMPORARY, DrawerTypes.TEMPORARY_MINI]),
	
	  /**
	   * The default media match for the drawer. This will be what is displayed on first render.
	   * The component will adjust itself to the current media after it has mounted, but this
	   * is mostly used for server side rendering.
	   */
	  defaultMedia: _propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']),
	
	  /**
	   * The min width to use for a mobile media query. This prop should match the `md-mobile-min-width`
	   * variable.
	   *
	   * The media query for a mobile device will be:
	   *
	   * ```js
	   * window.matchMedia(
	   *   `screen and (min-width: ${mobileMinWidth}px) and (max-width: ${tabletMinWidth - 1}px`
	   * ).matches;
	   * ```
	   */
	  mobileMinWidth: _propTypes2.default.number.isRequired,
	
	  /**
	   * The min width to use for a tablet media query. This prop should match the `md-tablet-min-width`
	   * variable.
	   *
	   * The media query for a tablet device will be:
	   *
	   * ```js
	   * window.matchMedia(
	   *   `screen and (min-width: ${tabletMinWidth}px) and (max-width: ${desktopWidth - 1}px`
	   * ).matches;
	   * ```
	   */
	  tabletMinWidth: _propTypes2.default.number.isRequired,
	
	  /**
	   * The min width to use for a desktop media query. This prop should match the `md-desktop-min-width`
	   * variable.
	   *
	   * The media query for a tablet device will be:
	   *
	   * ```js
	   * window.matchMedia(`screen and (min-width: ${tabletMinWidth}px)`).matches;
	   * ```
	   */
	  desktopMinWidth: _propTypes2.default.number.isRequired,
	
	  /**
	   * An optional function to call when the type of the drawer changes because of the
	   * new media queries. The callback will include the newly selected drawer type
	   * and an object containing the media matches of `mobile`, `tablet`, and `desktop`.
	   *
	   * ```js
	   * this.props.onMediaTypeChange(NavigationDrawer.DrawerTypes.TEMPORARY, {
	   *   mobile: true,
	   *   tablet: false,
	   *   desktop: false,
	   * });
	   * ```
	   */
	  onMediaTypeChange: _propTypes2.default.func,
	
	  /**
	   * Boolean if the temporary or persistent drawers are visible by default.
	   */
	  defaultVisible: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the temporary or persistent drawers are visible. If this is defined,
	   * it will make the component controlled and require the `onVisibilityToggle` prop
	   * to be defined.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityToggle', 'defaultVisible'),
	
	  /**
	   * An optional function to call when the visibility of the drawer changes. The callback
	   * will include the new visibility.
	   *
	   * ```js
	   * this.props.onVisibilityToggle(false);
	   * ```
	   */
	  onVisibilityToggle: _propTypes2.default.func,
	
	  /**
	   * A boolean if the mini drawer's list should be generated from the `navItems` prop. When building
	   * the list, it will extract the `leftIcon` or `leftAvatar` from the `navItem` and then create a
	   * mini `ListItem` containing only that icon or image. Any other event listeners will also be applied.
	   *
	   *
	   * @see miniDrawerHeader
	   * @see miniDrawerChildren
	   */
	  extractMini: _propTypes2.default.bool,
	
	  /**
	   * An optional header to display in the mini drawer. This will be displayed above the optional
	   * mini nav list that get generated if the `extractMini` prop is `true` and the `miniDrawerChildren`.
	   *
	   * @see extractMini
	   */
	  miniDrawerHeader: _propTypes2.default.node,
	
	  /**
	   * Any additional children to display in the mini drawer. This will be displayed after the `miniDrawerHeader`
	   * and the optional mini nav list that gets generated if the `extractMini` prop is `true`.
	   *
	   * @see extractMini
	   */
	  miniDrawerChildren: _propTypes2.default.node,
	
	  /**
	   * Boolean if the drawer should automatically close after a nav item has been clicked for `temporary` drawers.
	   */
	  autoclose: _propTypes2.default.bool,
	
	  /**
	   * An optional title to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`
	   * may be defined, not both.
	   */
	  toolbarTitle: (0, _invalidIf2.default)(_propTypes2.default.node, 'toolbarTitleMenu'),
	
	  /**
	   * An optional select field menu to display in the main toolbar. Either the `toolbarTitle` or the `toolbarTitleMenu`
	   * may be defined, not both.
	   */
	  toolbarTitleMenu: _propTypes2.default.element,
	
	  /**
	   * The theme style for the main toolbar.
	   *
	   * @see [toolbars](/components/toolbars#prop-types-toolbar)
	   */
	  toolbarThemeType: _propTypes2.default.oneOf(['default', 'colored', 'themed']).isRequired,
	
	  /**
	   * Boolean if the toolbar's nav, actions, and title should share the same color.
	   */
	  toolbarSingleColor: _propTypes2.default.bool,
	
	  /**
	   * A boolean if the toolbar should be prominent.
	   */
	  toolbarProminent: _propTypes2.default.bool,
	
	  /**
	   * A boolean if the toolbar's title should be prominent.
	   */
	  toolbarProminentTitle: _propTypes2.default.bool,
	
	  /**
	   * A list of elements or a single element to display to the right of the
	   * toolbar's nav, title, and children.
	   *
	   * @see [toolbars](/components/toolbars#prop-types-toolbar)
	   */
	  toolbarActions: _Toolbar2.default.propTypes.actions,
	
	  /**
	   * Any children to display in the toolbar. This will be displayed between the optional title and
	   * actions.
	   */
	  toolbarChildren: _Toolbar2.default.propTypes.children,
	
	  /**
	   * The component to render the content in.
	   */
	  contentComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * An optional footer display after the main content.
	   */
	  footer: _propTypes2.default.node,
	
	  /**
	   * Any children used to render a button that will toggle the visibility of the
	   * navigation drawer for `temporary` and `persistent` drawers. This is normally a
	   * hamburger menu.
	   */
	  temporaryIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className used to render a button that will toggle the visibility of the
	   * navigation drawer for `temporary` and `persistent` drawers. This is normally a
	   * hamburger menu.
	   */
	  temporaryIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children used to render a button that appears on a persistent drawer's open
	   * header. This is used to create the `CloseButton` for drawers. When a persistent
	   * drawer is closed, the `temporaryIconChildren` and `temporaryIconClassName` props
	   * will be used to create a button to open the drawer.
	   *
	   * If the `drawerHeader` prop is defined, you will have to either include the `CloseButton`
	   * in your header manually, or create your own controlled button to close the drawer.
	   */
	  persistentIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon classNameused to render a button that appears on a persistent drawer's open
	   * header. This is used to create the `CloseButton` for drawers. When a persistent
	   * drawer is closed, the `temporaryIconChildren` and `temporaryIconClassName` props
	   * will be used to create a button to open the drawer.
	   *
	   * If the `drawerHeader` prop is defined, you will have to either include the `CloseButton`
	   * in your header manually, or create your own controlled button to close the drawer.
	   */
	  persistentIconClassName: _propTypes2.default.string,
	
	  /**
	   * The transition name to use when the page's content changes. If you want to disable
	   * transitions, set both the `transitionEnterTimeout` and `transitionLeaveTimeout` props
	   * to a false-ish value. (`null`, `undefined`, or `0`).
	   */
	  transitionName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The transition enter timeout when the page's content changes. If you want to disable
	   * the enter transition, set this to a false-ish value (`null`, `undefined`, or `0`).
	   */
	  transitionEnterTimeout: _propTypes2.default.number,
	
	  /**
	   * The transition leave timeout when the page's content changes. If you want to disable
	   * the leave transition, set this to a false-ish value (`null`, `undefined`, or `0`).
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,
	
	  /**
	   * The transition duration for the drawer when sliding in and out of view.
	   */
	  drawerTransitionDuration: _propTypes2.default.number.isRequired,
	
	  /**
	   * Any additional props to provide to the main content. This will be applied before any of the generated props,
	   * so this should not include `style`, `className`, or `component`.
	   */
	  contentProps: _propTypes2.default.object,
	
	  /**
	   * An id to give the main content. A hidden link is created in the main drawer's header that links to the main
	   * content. This is used for keyboard only users to jump the navigation and jump straight to the content.
	   *
	   * If you provide your own `drawerHeader`, it is suggested to include the link yourself.
	   */
	  contentId: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * The label to use for a keyboard accessibility link that jumps all the navigation and allows a user to focus
	   * the main content. This is created in the drawer's header.
	   */
	  jumpLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * An optional DOM Node to render the drawer into. The default is to render as
	   * the first child in the `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the drawer should be rendered as the last child instead of the first child
	   * in the `renderNode` or `body`.
	   *
	   * > This prop will not be used when the drawer is of the permanent type or `inline` is specified
	   * since the `Portal` component will not be used.
	   */
	  lastChild: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the `drawerType` should remain constant across all media. This is really only valid
	   * if the `drawerType` is one of the temporary types.
	   */
	  constantDrawerType: _propTypes2.default.bool,
	
	  menuIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `temporaryIconChildren` instead'),
	  menuIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `temporaryIconClassName` instead'),
	  closeIconChildren: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `persistentIconChildren` instead'),
	  closeIconClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `persistentIconClassName` instead'),
	  onDrawerChange: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onVisibilityToggle` or `onMediaTypeChange` instead'),
	  contentTransitionName: (0, _deprecated2.default)(_propTypes2.default.string, 'Use `transitionName` instead'),
	  contentTransitionEnterTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transtionEnterTimeout` instead'),
	  contentTransitionLeaveTimeout: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `transtionLeaveTimeout` instead'),
	  initialDrawerType: (0, _deprecated2.default)(_propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']), 'Use `defaultMedia` instead')
	};
	NavigationDrawer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};
	NavigationDrawer.childContextTypes = {
	  closeIconClassName: _propTypes2.default.string,
	  closeChildren: _propTypes2.default.node,
	  onCloseClick: _propTypes2.default.func,
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	  label: _propTypes2.default.node.isRequired,
	  renderNode: _propTypes2.default.object
	};
	NavigationDrawer.defaultProps = {
	  autoclose: _Drawer2.default.defaultProps.autoclose,
	  contentId: 'main-content',
	  // Defaults to false since it keeps the state of the drawerType in sync and makes the Drawer
	  // controlled. On initial mount without any defaultMedia updates, it would always be considered
	  // temporary
	  constantDrawerType: false,
	  jumpLabel: 'Jump to content',
	  extractMini: true,
	  position: _Drawer2.default.defaultProps.position,
	  defaultMedia: _Drawer2.default.defaultProps.defaultMedia,
	  mobileDrawerType: _Drawer2.default.defaultProps.mobileType,
	  tabletDrawerType: _Drawer2.default.defaultProps.tabletType,
	  desktopDrawerType: _Drawer2.default.defaultProps.desktopType,
	  mobileMinWidth: _Drawer2.default.defaultProps.mobileMinWidth,
	  tabletMinWidth: _Drawer2.default.defaultProps.tabletMinWidth,
	  desktopMinWidth: _Drawer2.default.defaultProps.desktopMinWidth,
	  includeDrawerHeader: true,
	  contentComponent: 'main',
	  temporaryIconChildren: 'menu',
	  toolbarThemeType: 'colored',
	  persistentIconChildren: 'arrow_back',
	  transitionName: 'md-cross-fade',
	  transitionEnterTimeout: 300,
	  drawerTransitionDuration: _Drawer2.default.defaultProps.transitionDuration
	};
	exports.default = NavigationDrawer;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.JumpToContentLink = exports.CloseButton = exports.NavigationDrawer = undefined;
	
	var _NavigationDrawer = __webpack_require__(204);
	
	var _NavigationDrawer2 = _interopRequireDefault(_NavigationDrawer);
	
	var _CloseButton2 = __webpack_require__(102);
	
	var _CloseButton3 = _interopRequireDefault(_CloseButton2);
	
	var _JumpToContentLink2 = __webpack_require__(103);
	
	var _JumpToContentLink3 = _interopRequireDefault(_JumpToContentLink2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _NavigationDrawer2.default;
	exports.NavigationDrawer = _NavigationDrawer2.default;
	exports.CloseButton = _CloseButton3.default;
	exports.JumpToContentLink = _JumpToContentLink3.default;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Paper2.default;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This component renders a selectable date in the `CalendarMonth` component.
	 */
	var CalendarDate = function (_PureComponent) {
	  _inherits(CalendarDate, _PureComponent);
	
	  function CalendarDate(props) {
	    _classCallCheck(this, CalendarDate);
	
	    var _this = _possibleConstructorReturn(this, (CalendarDate.__proto__ || Object.getPrototypeOf(CalendarDate)).call(this, props));
	
	    _this.state = _this._getFormattedDate(props);
	    _this.state.desktopActive = false;
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._setActive = _this._setActive.bind(_this);
	    _this._setInactive = _this._setInactive.bind(_this);
	    _this._setFocus = _this._setFocus.bind(_this);
	    return _this;
	  }
	
	  _createClass(CalendarDate, [{
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps) {
	      var _props = this.props,
	          DateTimeFormat = _props.DateTimeFormat,
	          locales = _props.locales,
	          date = _props.date;
	
	      if (DateTimeFormat !== nextProps.DateTimeFormat || locales !== nextProps.locales || date !== nextProps.date) {
	        this.setState(this._getFormattedDate(nextProps));
	      }
	    }
	  }, {
	    key: '_setFocus',
	    value: function _setFocus(btn) {
	      if (btn && this.props.active) {
	        btn.focus();
	      }
	    }
	  }, {
	    key: '_getFormattedDate',
	    value: function _getFormattedDate(_ref) {
	      var DateTimeFormat = _ref.DateTimeFormat,
	          locales = _ref.locales,
	          date = _ref.date;
	
	      return {
	        date: new DateTimeFormat(locales, { day: 'numeric' }).format(date)
	      };
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      this.props.onClick(new Date(this.props.date), e);
	    }
	  }, {
	    key: '_setActive',
	    value: function _setActive() {
	      if (!this.props.disabled) {
	        this.setState({ desktopActive: true });
	      }
	    }
	  }, {
	    key: '_setInactive',
	    value: function _setInactive() {
	      if (!this.props.disabled) {
	        this.setState({ desktopActive: false });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          date = _state.date,
	          desktopActive = _state.desktopActive;
	      var _props2 = this.props,
	          disabled = _props2.disabled,
	          active = _props2.active,
	          today = _props2.today,
	          className = _props2.className;
	
	
	      var fullyActive = today && !active && !desktopActive;
	      return _react2.default.createElement(
	        'button',
	        {
	          type: 'button',
	          ref: this._setFocus,
	          onFocus: this._setActive,
	          onBlur: this._setInactive,
	          onMouseOver: this._setActive,
	          onMouseLeave: this._setInactive,
	          className: (0, _classnames2.default)('md-btn md-calendar-date md-calendar-date--btn', {
	            'md-text--disabled': disabled,
	            'md-pointer--hover': !disabled,
	            'md-text--theme-primary': fullyActive,
	            'md-calendar-date--btn-active': active || desktopActive
	          }, className),
	          onClick: this._handleClick,
	          disabled: disabled
	        },
	        _react2.default.createElement(
	          'span',
	          {
	            className: (0, _classnames2.default)('md-calendar-date--date', {
	              'md-picker-text--active': active || desktopActive,
	              'md-font-bold': fullyActive
	            })
	          },
	          date
	        )
	      );
	    }
	  }]);
	
	  return CalendarDate;
	}(_react.PureComponent);
	
	CalendarDate.propTypes = {
	  className: _propTypes2.default.string,
	  date: _propTypes2.default.instanceOf(Date).isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  disabled: _propTypes2.default.bool,
	  onClick: _propTypes2.default.func.isRequired,
	  active: _propTypes2.default.bool,
	  today: _propTypes2.default.bool
	};
	exports.default = CalendarDate;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _isMonthBefore = __webpack_require__(269);
	
	var _isMonthBefore2 = _interopRequireDefault(_isMonthBefore);
	
	var _getDayOfWeek = __webpack_require__(117);
	
	var _getDayOfWeek2 = _interopRequireDefault(_getDayOfWeek);
	
	var _addDate = __webpack_require__(66);
	
	var _addDate2 = _interopRequireDefault(_addDate);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This component renders the controls for a `DatePicker`'s Calendar.
	 * This will render a next and previous month button along with the
	 * current month/year. It also renders the abbreviiations for the days
	 * of the week.
	 */
	var CalendarHeader = function (_PureComponent) {
	  _inherits(CalendarHeader, _PureComponent);
	
	  function CalendarHeader(props) {
	    _classCallCheck(this, CalendarHeader);
	
	    var _this = _possibleConstructorReturn(this, (CalendarHeader.__proto__ || Object.getPrototypeOf(CalendarHeader)).call(this, props));
	
	    _this.state = _this._createState(props);
	    return _this;
	  }
	
	  _createClass(CalendarHeader, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _props = this.props,
	          DateTimeFormat = _props.DateTimeFormat,
	          locales = _props.locales,
	          date = _props.date;
	
	      if (DateTimeFormat !== nextProps.DateTimeFormat || locales !== nextProps.locales || date !== nextProps.date) {
	        this.setState(this._createState(nextProps));
	      }
	    }
	  }, {
	    key: '_createState',
	    value: function _createState() {
	      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,
	          DateTimeFormat = _ref.DateTimeFormat,
	          locales = _ref.locales,
	          date = _ref.date;
	
	      var sunday = (0, _getDayOfWeek2.default)(date, 0);
	      var formatter = new DateTimeFormat(locales, { weekday: 'narrow' });
	      var dows = [];
	      for (var i = 0; i < 7; i++) {
	        var dow = formatter.format((0, _addDate2.default)(sunday, i, 'D'));
	        dows.push(_react2.default.createElement(
	          'h4',
	          { className: 'md-calendar-date md-text--disabled md-calendar-dow', key: i },
	          dow
	        ));
	      }
	
	      return {
	        dows: dows,
	        title: new DateTimeFormat(locales, { month: 'long', year: 'numeric' }).format(date)
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          dows = _state.dows,
	          title = _state.title;
	      var _props2 = this.props,
	          date = _props2.date,
	          minDate = _props2.minDate,
	          maxDate = _props2.maxDate,
	          onPreviousClick = _props2.onPreviousClick,
	          previousIconChildren = _props2.previousIconChildren,
	          previousIconClassName = _props2.previousIconClassName,
	          onNextClick = _props2.onNextClick,
	          nextIconChildren = _props2.nextIconChildren,
	          nextIconClassName = _props2.nextIconClassName;
	
	
	      var isPreviousDisabled = (0, _isMonthBefore2.default)(minDate, date);
	      var isNextDisabled = (0, _isMonthBefore2.default)(date, maxDate);
	      return _react2.default.createElement(
	        'header',
	        { className: 'md-calendar-header' },
	        _react2.default.createElement(
	          'div',
	          { className: 'md-calendar-controls' },
	          _react2.default.createElement(
	            _Button2.default,
	            {
	              icon: true,
	              onClick: onPreviousClick,
	              disabled: isPreviousDisabled,
	              className: 'md-calendar-control',
	              iconClassName: previousIconClassName
	            },
	            previousIconChildren
	          ),
	          _react2.default.createElement(
	            'h4',
	            { className: 'md-title' },
	            title
	          ),
	          _react2.default.createElement(
	            _Button2.default,
	            {
	              icon: true,
	              onClick: onNextClick,
	              disabled: isNextDisabled,
	              className: 'md-calendar-control',
	              iconClassName: nextIconClassName
	            },
	            nextIconChildren
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'md-calendar-dows' },
	          dows
	        )
	      );
	    }
	  }]);
	
	  return CalendarHeader;
	}(_react.PureComponent);
	
	CalendarHeader.propTypes = {
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  date: _propTypes2.default.instanceOf(Date).isRequired,
	  minDate: _propTypes2.default.instanceOf(Date),
	  maxDate: _propTypes2.default.instanceOf(Date),
	  previousIconChildren: _propTypes2.default.node,
	  previousIconClassName: _propTypes2.default.string,
	  onPreviousClick: _propTypes2.default.func.isRequired,
	  nextIconChildren: _propTypes2.default.node,
	  nextIconClassName: _propTypes2.default.string,
	  onNextClick: _propTypes2.default.func.isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired
	};
	exports.default = CalendarHeader;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _addDate = __webpack_require__(66);
	
	var _addDate2 = _interopRequireDefault(_addDate);
	
	var _stripTime = __webpack_require__(118);
	
	var _stripTime2 = _interopRequireDefault(_stripTime);
	
	var _getLastDay = __webpack_require__(267);
	
	var _getLastDay2 = _interopRequireDefault(_getLastDay);
	
	var _getDayOfWeek = __webpack_require__(117);
	
	var _getDayOfWeek2 = _interopRequireDefault(_getDayOfWeek);
	
	var _CalendarDate = __webpack_require__(207);
	
	var _CalendarDate2 = _interopRequireDefault(_CalendarDate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This component renders a month for the calendar view of the `DatePicker`.
	 */
	var CalendarMonth = function (_PureComponent) {
	  _inherits(CalendarMonth, _PureComponent);
	
	  function CalendarMonth() {
	    _classCallCheck(this, CalendarMonth);
	
	    return _possibleConstructorReturn(this, (CalendarMonth.__proto__ || Object.getPrototypeOf(CalendarMonth)).apply(this, arguments));
	  }
	
	  _createClass(CalendarMonth, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          calendarDate = _props.calendarDate,
	          calendarTempDate = _props.calendarTempDate,
	          onCalendarDateClick = _props.onCalendarDateClick,
	          minDate = _props.minDate,
	          maxDate = _props.maxDate,
	          DateTimeFormat = _props.DateTimeFormat,
	          locales = _props.locales,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['calendarDate', 'calendarTempDate', 'onCalendarDateClick', 'minDate', 'maxDate', 'DateTimeFormat', 'locales', 'className']);
	
	      var days = [];
	      var currentDate = (0, _stripTime2.default)((0, _getDayOfWeek2.default)(new Date(calendarDate).setDate(1), 0));
	      var endDate = (0, _stripTime2.default)((0, _getDayOfWeek2.default)((0, _getLastDay2.default)(calendarDate), 6));
	      var activeDate = (0, _stripTime2.default)(new Date(calendarTempDate));
	      var today = (0, _stripTime2.default)(new Date());
	
	      while (currentDate <= endDate) {
	        var key = currentDate.getMonth() + '-' + currentDate.getDate();
	
	        var date = void 0;
	        if (currentDate.getMonth() === calendarDate.getMonth()) {
	          var time = currentDate.getTime();
	          var isMinDateDisabled = minDate && minDate.getTime() > time;
	          var isMaxDateDisbaled = maxDate && maxDate.getTime() < time;
	          date = _react2.default.createElement(_CalendarDate2.default, {
	            key: key,
	            today: time === today.getTime(),
	            active: time === activeDate.getTime(),
	            disabled: isMinDateDisabled || isMaxDateDisbaled,
	            onClick: onCalendarDateClick,
	            date: currentDate,
	            DateTimeFormat: DateTimeFormat,
	            locales: locales
	          });
	        } else {
	          date = _react2.default.createElement('div', { key: key, className: 'md-calendar-date' });
	        }
	
	        days.push(date);
	        currentDate = (0, _addDate2.default)(currentDate, 1, 'D');
	      }
	
	      return _react2.default.createElement(
	        'div',
	        _extends({ className: (0, _classnames2.default)('md-calendar-month', className) }, props),
	        days
	      );
	    }
	  }]);
	
	  return CalendarMonth;
	}(_react.PureComponent);
	
	CalendarMonth.propTypes = {
	  /**
	   * A className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The current selected date of the calendar. This is
	   * the date after hitting the Ok button or `value` || `defaultValue`.
	   */
	  calendarDate: _propTypes2.default.instanceOf(Date).isRequired,
	
	  /**
	   * The current selected date of the calendar before verifying
	   * the new date.
	   */
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	
	  /**
	   * An optional min date for the calendar. This will disable any
	   * dates that come before this date in the month.
	   */
	  minDate: _propTypes2.default.instanceOf(Date),
	
	  /**
	   * An optional max date for the calendar. This will disable any
	   * dates that come after this date in the month.
	   */
	  maxDate: _propTypes2.default.instanceOf(Date),
	
	  /**
	   * A function to call that will select a new date.
	   */
	  onCalendarDateClick: _propTypes2.default.func.isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired
	};
	exports.default = CalendarMonth;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _isValidClick = __webpack_require__(67);
	
	var _isValidClick2 = _interopRequireDefault(_isValidClick);
	
	var _captureNextEvent = __webpack_require__(36);
	
	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);
	
	var _calcTimeFromPoint = __webpack_require__(270);
	
	var _calcTimeFromPoint2 = _interopRequireDefault(_calcTimeFromPoint);
	
	var _calcPageOffset = __webpack_require__(124);
	
	var _calcPageOffset2 = _interopRequireDefault(_calcPageOffset);
	
	var _ClockTime = __webpack_require__(212);
	
	var _ClockTime2 = _interopRequireDefault(_ClockTime);
	
	var _ClockHand = __webpack_require__(211);
	
	var _ClockHand2 = _interopRequireDefault(_ClockHand);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `ClockFace` component is used for rendering all the clock's times
	 * and the clock hand.
	 */
	var ClockFace = function (_PureComponent) {
	  _inherits(ClockFace, _PureComponent);
	
	  function ClockFace(props) {
	    _classCallCheck(this, ClockFace);
	
	    var _this = _possibleConstructorReturn(this, (ClockFace.__proto__ || Object.getPrototypeOf(ClockFace)).call(this, props));
	
	    _this.state = { radius: 136, moving: false };
	    _this._center = {};
	    _this._setFace = _this._setFace.bind(_this);
	    _this._calcNewTime = _this._calcNewTime.bind(_this);
	    _this._handleMouseUp = _this._handleMouseUp.bind(_this);
	    _this._handleMouseDown = _this._handleMouseDown.bind(_this);
	    _this._handleMouseMove = _this._handleMouseMove.bind(_this);
	    _this._handleTouchEnd = _this._handleTouchEnd.bind(_this);
	    _this._handleTouchMove = _this._handleTouchMove.bind(_this);
	    _this._handleTouchStart = _this._handleTouchStart.bind(_this);
	    return _this;
	  }
	
	  _createClass(ClockFace, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      window.removeEventListener('mousemove', this._handleMouseMove);
	      window.removeEventListener('mouseup', this._handleMouseMove);
	      window.removeEventListener('touchmove', this._handleTouchMove);
	      window.removeEventListener('touchend', this._handleTouchEnd);
	    }
	  }, {
	    key: '_setFace',
	    value: function _setFace(face) {
	      this._face = face;
	
	      if (face !== null) {
	        var radius = face.offsetWidth / 2;
	        var offset = (0, _calcPageOffset2.default)(face);
	        this._center = { x: offset.left + radius, y: offset.top + radius };
	        this._left = offset.left;
	        this._top = offset.top;
	        this.setState({ radius: radius });
	      }
	    }
	  }, {
	    key: '_handleMouseDown',
	    value: function _handleMouseDown(e) {
	      if (!(0, _isValidClick2.default)(e)) {
	        return;
	      }
	
	      window.addEventListener('mousemove', this._handleMouseMove);
	      window.addEventListener('mouseup', this._handleMouseUp);
	      this.setState({ moving: true });
	    }
	  }, {
	    key: '_handleMouseMove',
	    value: function _handleMouseMove(e) {
	      if (!this.state.moving) {
	        return;
	      }
	
	      e.preventDefault();
	      this._calcNewTime(e);
	    }
	  }, {
	    key: '_handleMouseUp',
	    value: function _handleMouseUp(e) {
	      if (!(0, _isValidClick2.default)(e)) {
	        return;
	      }
	
	      if (this._face && !this._face.contains(e.target)) {
	        (0, _captureNextEvent2.default)('click');
	      }
	
	      window.removeEventListener('mousemove', this._handleMouseMove);
	      window.removeEventListener('mouseup', this._handleMouseUp);
	
	      this._calcNewTime(e);
	      this.setState({ moving: false });
	    }
	  }, {
	    key: '_handleTouchStart',
	    value: function _handleTouchStart() {
	      (0, _captureNextEvent2.default)('mousedown');
	
	      window.addEventListener('touchmove', this._handleTouchMove);
	      window.addEventListener('touchend', this._handleTouchEnd);
	      this.setState({ moving: true });
	    }
	  }, {
	    key: '_handleTouchMove',
	    value: function _handleTouchMove(e) {
	      if (!this.state.moving) {
	        return;
	      }
	      e.preventDefault();
	
	      this._calcNewTime(e);
	    }
	  }, {
	    key: '_handleTouchEnd',
	    value: function _handleTouchEnd(e) {
	      this._calcNewTime(e);
	      if (this._face && !this._face.contains(e.target)) {
	        (0, _captureNextEvent2.default)('click');
	      }
	
	      window.removeEventListener('touchmove', this._handleTouchMove);
	      window.removeEventListener('touchend', this._handleTouchEnd);
	
	      this.setState({ moving: false });
	    }
	  }, {
	    key: '_calcNewTime',
	    value: function _calcNewTime(e) {
	      var _ref = e.changedTouches ? e.changedTouches[0] : e,
	          x = _ref.pageX,
	          y = _ref.pageY;
	
	      var innerRadius = this.state.radius - 48;
	      var _props = this.props,
	          onChange = _props.onChange,
	          minutes = _props.minutes,
	          timePeriod = _props.timePeriod;
	
	      onChange((0, _calcTimeFromPoint2.default)({ x: x, y: y }, this._center, innerRadius, minutes, timePeriod));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          time = _props2.time,
	          minutes = _props2.minutes,
	          timePeriod = _props2.timePeriod,
	          onChange = _props2.onChange;
	      var radius = this.state.radius;
	
	      var size = !minutes && !timePeriod ? 24 : 12;
	      var times = Array.apply(null, new Array(size)).map(function (_, i) {
	        var clockTime = i + 1;
	        if (minutes) {
	          clockTime = clockTime * 5 % 60;
	        } else {
	          clockTime %= 24;
	        }
	
	        return _react2.default.createElement(_ClockTime2.default, {
	          key: 'time-' + i,
	          index: i + 1,
	          time: clockTime,
	          active: clockTime === time,
	          radius: radius,
	          onKeyboardFocus: onChange
	        });
	      });
	
	      return _react2.default.createElement(
	        'div',
	        {
	          ref: this._setFace,
	          className: 'md-clock-face md-block-centered md-pointer--hover',
	          onMouseDown: this._handleMouseDown,
	          onTouchStart: this._handleTouchStart
	        },
	        times,
	        _react2.default.createElement(_ClockHand2.default, { time: time, coords: radius, minutes: minutes })
	      );
	    }
	  }]);
	
	  return ClockFace;
	}(_react.PureComponent);
	
	ClockFace.propTypes = {
	  /**
	   * The current time for the clock.
	   */
	  time: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the clock is on the minutes view.
	   */
	  minutes: _propTypes2.default.bool.isRequired,
	
	  /**
	   * A function to call when a new time is selected. It gives the
	   * new time value. If it is 12 o'clock, 0 will be given.
	   */
	  onChange: _propTypes2.default.func.isRequired,
	
	  /**
	   * An optional time period string. This should be either AM or PM
	   * if the locale uses them.
	   */
	  timePeriod: _propTypes2.default.string
	};
	exports.default = ClockFace;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `ClockHand` component is just used to display the hand of the clock
	 * and a ball to surround the selected time.
	 */
	var ClockHand = function (_PureComponent) {
	  _inherits(ClockHand, _PureComponent);
	
	  function ClockHand(props) {
	    _classCallCheck(this, ClockHand);
	
	    var _this = _possibleConstructorReturn(this, (ClockHand.__proto__ || Object.getPrototypeOf(ClockHand)).call(this, props));
	
	    _this.state = { active: false };
	    return _this;
	  }
	
	  _createClass(ClockHand, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _this2 = this;
	
	      if (this.props.minutes !== nextProps.minutes) {
	        if (this.state.timeout) {
	          clearTimeout(this.state.timeout);
	        }
	
	        this.setState({
	          active: true,
	          timeout: setTimeout(function () {
	            return _this2.setState({ active: false, timeout: null });
	          }, 150)
	        });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.state.timeout) {
	        clearTimeout(this.state.timeout);
	      }
	    }
	  }, {
	    key: '_calcCurrentDegrees',
	    value: function _calcCurrentDegrees(_ref) {
	      var time = _ref.time,
	          minutes = _ref.minutes;
	
	      var timeAt0Deg = minutes ? 15 : 3;
	      var sectors = minutes ? 60 : 12;
	
	      return (time % sectors - timeAt0Deg) * (360 / sectors);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          coords = _props.coords,
	          time = _props.time,
	          minutes = _props.minutes;
	
	
	      var degrees = this._calcCurrentDegrees(this.props);
	      var invisibleMinute = false;
	      if (minutes) {
	        invisibleMinute = degrees % (360 / 12) !== 0;
	      }
	
	      var rotateTransform = 'rotate3d(0, 0, 1, ' + degrees + 'deg)';
	      return _react2.default.createElement('div', {
	        className: (0, _classnames2.default)('md-clock-hand md-background--primary', {
	          'md-clock-hand--active': this.state.active,
	          'md-clock-hand--minute-hover': invisibleMinute,
	          'md-clock-hand--inner': !minutes && (time > 12 || time === 0)
	        }),
	        style: {
	          left: coords,
	          top: coords,
	          WebkitTransform: rotateTransform,
	          MozTransform: rotateTransform,
	          msTransform: rotateTransform,
	          transform: rotateTransform
	        }
	      });
	    }
	  }]);
	
	  return ClockHand;
	}(_react.PureComponent);
	
	ClockHand.propTypes = {
	  /**
	   * This is the x and y coordinate to use for the center of the `ClockFace`.
	   * This should really be whatever the radius of the `ClockFace` is.
	   */
	  coords: _propTypes2.default.number,
	
	  /**
	   * The current time of the clock.
	   */
	  time: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the clock is displaying minutes instead of hours.
	   */
	  minutes: _propTypes2.default.bool.isRequired
	};
	exports.default = ClockHand;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CLOCK_PADDING = 4;
	
	/**
	 * The `ClockTime` component is used for positioning hours or minutes
	 * in a clock. The time will be positioned based on it's given index
	 * and the radius of the clock.
	 */
	
	var ClockTime = function (_PureComponent) {
	  _inherits(ClockTime, _PureComponent);
	
	  function ClockTime(props) {
	    _classCallCheck(this, ClockTime);
	
	    var _this = _possibleConstructorReturn(this, (ClockTime.__proto__ || Object.getPrototypeOf(ClockTime)).call(this, props));
	
	    _this.state = {
	      // default size in scss
	      size: 18
	    };
	
	    _this._setTime = _this._setTime.bind(_this);
	    _this._setPosition = _this._setPosition.bind(_this);
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    return _this;
	  }
	
	  _createClass(ClockTime, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.radius !== nextProps.radius || this.props.index !== nextProps.index) {
	        this._setPosition(nextProps, this._time);
	      }
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        this.props.onKeyboardFocus(this.props.time);
	      }
	    }
	  }, {
	    key: '_setTime',
	    value: function _setTime(time) {
	      this._time = time;
	      if (time !== null) {
	        this._setPosition(this.props, time);
	
	        if (this.props.active) {
	          time.focus();
	        }
	      }
	    }
	  }, {
	    key: '_setPosition',
	    value: function _setPosition(_ref, time) {
	      var radius = _ref.radius,
	          index = _ref.index;
	
	      // 36 is default size for the time
	      var size = (time.offsetWidth || 36) / 2;
	      var timeRadians = Math.PI / 2 - index * (Math.PI / 6);
	      var innerCircle = index > 12;
	
	      var outerRadius = radius - size;
	      var innerRadius = outerRadius - CLOCK_PADDING - (innerCircle ? size * 2 : 0);
	
	      this.setState({
	        style: {
	          top: outerRadius - innerRadius * Math.sin(timeRadians),
	          left: outerRadius + innerRadius * Math.cos(timeRadians)
	        }
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          time = _props.time,
	          active = _props.active;
	
	      return _react2.default.createElement(
	        'div',
	        {
	          ref: this._setTime,
	          tabIndex: 0,
	          className: (0, _classnames2.default)('md-clock-time md-text-no-select md-pointer--none', {
	            'md-text': !active,
	            'md-picker-text--active': active
	          }),
	          style: this.state.style,
	          onKeyUp: this._handleKeyUp
	        },
	        _react2.default.createElement(
	          'span',
	          { className: 'md-clock-time-value' },
	          time
	        )
	      );
	    }
	  }]);
	
	  return ClockTime;
	}(_react.PureComponent);
	
	ClockTime.propTypes = {
	  /**
	   * The index of the current time to be displayed. This
	   * should be a number between 1 and 24.
	   */
	  index: _propTypes2.default.number.isRequired,
	
	  /**
	   * The time number to display.
	   */
	  time: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if this time is currently selected.
	   */
	  active: _propTypes2.default.bool.isRequired,
	
	  /**
	   * The radius of the clock.
	   */
	  radius: _propTypes2.default.number.isRequired,
	
	  onKeyboardFocus: _propTypes2.default.func.isRequired
	};
	exports.default = ClockTime;

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _DialogFooter = __webpack_require__(34);
	
	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);
	
	var _DatePickerHeader = __webpack_require__(216);
	
	var _DatePickerHeader2 = _interopRequireDefault(_DatePickerHeader);
	
	var _DatePickerCalendar = __webpack_require__(214);
	
	var _DatePickerCalendar2 = _interopRequireDefault(_DatePickerCalendar);
	
	var _YearPicker = __webpack_require__(222);
	
	var _YearPicker2 = _interopRequireDefault(_YearPicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DatePicker = function (_PureComponent) {
	  _inherits(DatePicker, _PureComponent);
	
	  function DatePicker() {
	    _classCallCheck(this, DatePicker);
	
	    return _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).apply(this, arguments));
	  }
	
	  _createClass(DatePicker, [{
	    key: 'render',
	    value: function render() {
	      var _cn;
	
	      var _props = this.props,
	          okLabel = _props.okLabel,
	          okPrimary = _props.okPrimary,
	          onOkClick = _props.onOkClick,
	          cancelLabel = _props.cancelLabel,
	          cancelPrimary = _props.cancelPrimary,
	          onCancelClick = _props.onCancelClick,
	          DateTimeFormat = _props.DateTimeFormat,
	          locales = _props.locales,
	          calendarTempDate = _props.calendarTempDate,
	          calendarMode = _props.calendarMode,
	          changeCalendarMode = _props.changeCalendarMode,
	          style = _props.style,
	          className = _props.className,
	          inline = _props.inline,
	          icon = _props.icon,
	          displayMode = _props.displayMode,
	          props = _objectWithoutProperties(_props, ['okLabel', 'okPrimary', 'onOkClick', 'cancelLabel', 'cancelPrimary', 'onCancelClick', 'DateTimeFormat', 'locales', 'calendarTempDate', 'calendarMode', 'changeCalendarMode', 'style', 'className', 'inline', 'icon', 'displayMode']);
	
	      var picker = void 0;
	      if (calendarMode === 'calendar') {
	        picker = _react2.default.createElement(_DatePickerCalendar2.default, _extends({}, props, {
	          key: 'calendar',
	          calendarTempDate: calendarTempDate,
	          DateTimeFormat: DateTimeFormat,
	          locales: locales
	        }));
	      } else {
	        picker = _react2.default.createElement(_YearPicker2.default, _extends({}, props, {
	          key: 'year',
	          calendarTempDate: calendarTempDate,
	          DateTimeFormat: DateTimeFormat,
	          locales: locales
	        }));
	      }
	
	      var actions = [{
	        key: 'cancel',
	        onClick: onCancelClick,
	        primary: cancelPrimary,
	        secondary: !cancelPrimary,
	        label: cancelLabel
	      }, {
	        key: 'ok',
	        onClick: onOkClick,
	        primary: okPrimary,
	        secondary: !okPrimary,
	        label: okLabel
	      }];
	
	      return _react2.default.createElement(
	        'div',
	        {
	          style: style,
	          className: (0, _classnames2.default)('md-picker md-picker--date', (_cn = {}, _defineProperty(_cn, 'md-picker--' + displayMode, displayMode), _defineProperty(_cn, 'md-picker--inline', inline), _defineProperty(_cn, 'md-picker--inline-icon', inline && icon), _cn), className)
	        },
	        _react2.default.createElement(_DatePickerHeader2.default, {
	          DateTimeFormat: DateTimeFormat,
	          locales: locales,
	          calendarTempDate: calendarTempDate,
	          calendarMode: calendarMode,
	          changeCalendarMode: changeCalendarMode
	        }),
	        _react2.default.createElement(
	          'div',
	          { className: 'md-picker-content-container' },
	          picker,
	          _react2.default.createElement(_DialogFooter2.default, { actions: actions })
	        )
	      );
	    }
	  }]);
	
	  return DatePicker;
	}(_react.PureComponent);
	
	DatePicker.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  okLabel: _propTypes2.default.node.isRequired,
	  okPrimary: _propTypes2.default.bool.isRequired,
	  onOkClick: _propTypes2.default.func.isRequired,
	  cancelLabel: _propTypes2.default.node.isRequired,
	  cancelPrimary: _propTypes2.default.bool.isRequired,
	  onCancelClick: _propTypes2.default.func.isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  calendarDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarMode: _propTypes2.default.oneOf(['calendar', 'year']).isRequired,
	  changeCalendarMode: _propTypes2.default.func.isRequired,
	  icon: _propTypes2.default.bool,
	  inline: _propTypes2.default.bool,
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait'])
	};
	exports.default = DatePicker;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _CalendarMonth = __webpack_require__(209);
	
	var _CalendarMonth2 = _interopRequireDefault(_CalendarMonth);
	
	var _CalendarHeader = __webpack_require__(208);
	
	var _CalendarHeader2 = _interopRequireDefault(_CalendarHeader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DatePickerCalendar = function (_PureComponent) {
	  _inherits(DatePickerCalendar, _PureComponent);
	
	  function DatePickerCalendar() {
	    _classCallCheck(this, DatePickerCalendar);
	
	    return _possibleConstructorReturn(this, (DatePickerCalendar.__proto__ || Object.getPrototypeOf(DatePickerCalendar)).apply(this, arguments));
	  }
	
	  _createClass(DatePickerCalendar, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          previousIconChildren = _props.previousIconChildren,
	          previousIconClassName = _props.previousIconClassName,
	          onPreviousClick = _props.onPreviousClick,
	          nextIconChildren = _props.nextIconChildren,
	          nextIconClassName = _props.nextIconClassName,
	          onNextClick = _props.onNextClick,
	          calendarDate = _props.calendarDate,
	          calendarTempDate = _props.calendarTempDate,
	          onCalendarDateClick = _props.onCalendarDateClick,
	          DateTimeFormat = _props.DateTimeFormat,
	          locales = _props.locales,
	          minDate = _props.minDate,
	          maxDate = _props.maxDate;
	
	
	      return _react2.default.createElement(
	        'section',
	        { className: 'md-picker-content md-picker-content--calendar' },
	        _react2.default.createElement(_CalendarHeader2.default, {
	          date: calendarDate,
	          minDate: minDate,
	          maxDate: maxDate,
	          DateTimeFormat: DateTimeFormat,
	          locales: locales,
	          onPreviousClick: onPreviousClick,
	          previousIconChildren: previousIconChildren,
	          previousIconClassName: previousIconClassName,
	          onNextClick: onNextClick,
	          nextIconChildren: nextIconChildren,
	          nextIconClassName: nextIconClassName
	        }),
	        _react2.default.createElement(_CalendarMonth2.default, {
	          key: new DateTimeFormat(locales).format(calendarDate),
	          calendarDate: calendarDate,
	          calendarTempDate: calendarTempDate,
	          onCalendarDateClick: onCalendarDateClick,
	          minDate: minDate,
	          maxDate: maxDate,
	          DateTimeFormat: DateTimeFormat,
	          locales: locales
	        })
	      );
	    }
	  }]);
	
	  return DatePickerCalendar;
	}(_react.PureComponent);
	
	DatePickerCalendar.propTypes = {
	  previousIconChildren: _propTypes2.default.node,
	  previousIconClassName: _propTypes2.default.string,
	  onPreviousClick: _propTypes2.default.func.isRequired,
	  nextIconChildren: _propTypes2.default.node,
	  nextIconClassName: _propTypes2.default.string,
	  onNextClick: _propTypes2.default.func.isRequired,
	  onCalendarDateClick: _propTypes2.default.func.isRequired,
	  calendarDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  minDate: _propTypes2.default.instanceOf(Date),
	  maxDate: _propTypes2.default.instanceOf(Date)
	};
	exports.default = DatePickerCalendar;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _keyCodes = __webpack_require__(6);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _handleWindowClickListeners = __webpack_require__(38);
	
	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);
	
	var _handleKeyboardAccessibility = __webpack_require__(37);
	
	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _isDateEqual = __webpack_require__(268);
	
	var _isDateEqual2 = _interopRequireDefault(_isDateEqual);
	
	var _addDate = __webpack_require__(66);
	
	var _addDate2 = _interopRequireDefault(_addDate);
	
	var _DateTimeFormat = __webpack_require__(115);
	
	var _DateTimeFormat2 = _interopRequireDefault(_DateTimeFormat);
	
	var _Collapse = __webpack_require__(17);
	
	var _Collapse2 = _interopRequireDefault(_Collapse);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _TextField = __webpack_require__(30);
	
	var _TextField2 = _interopRequireDefault(_TextField);
	
	var _DialogContainer = __webpack_require__(58);
	
	var _DialogContainer2 = _interopRequireDefault(_DialogContainer);
	
	var _DatePicker = __webpack_require__(213);
	
	var _DatePicker2 = _interopRequireDefault(_DatePicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable new-cap,no-shadow */
	
	
	/**
	 * The `DatePickerContainer` component is a wrapper for the main `DatePicker` component
	 * to manage the state and _logic_ for rendering the `DatePicker`. This component will
	 * either render inline or in a `Dialog` depending if the `inline` prop is set to `true`.
	 *
	 * NOTE: This component is actually exported as `DatePicker` when using the `import { member }` syntax.
	 * The following two lines are equivalent:
	 *
	 * ```js
	 * import { DatePicker } from 'react-md/lib/Pickers';
	 * import DatePicker from 'react-md/lib/Pickers/DatePickerContainer';
	 * ```
	 */
	var DatePickerContainer = function (_PureComponent) {
	  _inherits(DatePickerContainer, _PureComponent);
	
	  function DatePickerContainer(props) {
	    _classCallCheck(this, DatePickerContainer);
	
	    var _this = _possibleConstructorReturn(this, (DatePickerContainer.__proto__ || Object.getPrototypeOf(DatePickerContainer)).call(this, props));
	
	    var date = void 0;
	    var value = void 0;
	    var defaultValue = props.defaultValue,
	        DateTimeFormat = props.DateTimeFormat,
	        locales = props.locales,
	        formatOptions = props.formatOptions,
	        initialCalendarDate = props.initialCalendarDate,
	        minDate = props.minDate,
	        maxDate = props.maxDate;
	
	
	    if (typeof props.value !== 'undefined') {
	      date = _this._getDate(props.value);
	    } else if (defaultValue) {
	      date = _this._getDate(defaultValue);
	      value = typeof defaultValue === 'string' ? defaultValue : DateTimeFormat(locales, formatOptions).format(defaultValue);
	    } else {
	      date = new Date();
	      value = '';
	    }
	
	    date = _this._validateDateRange(date, minDate, maxDate);
	
	    var calendarTempDate = date;
	    if (typeof initialCalendarDate !== 'undefined' && !props.value && !props.defaultValue) {
	      calendarTempDate = _this._getDate(initialCalendarDate);
	      date = calendarTempDate;
	    } else if (calendarTempDate === null) {
	      calendarTempDate = new Date();
	      date = new Date();
	    }
	
	    var visible = typeof props.initiallyOpen !== 'undefined' ? props.initiallyOpen : !!props.defaultVisible;
	
	    _this.state = {
	      value: value,
	      visible: visible,
	      calendarDate: date,
	      calendarTempDate: calendarTempDate,
	      calendarMode: props.initialCalendarMode || props.defaultCalendarMode
	    };
	
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._toggleOpen = _this._toggleOpen.bind(_this);
	    _this._closeOnEsc = _this._closeOnEsc.bind(_this);
	    _this._handleOutsideClick = _this._handleOutsideClick.bind(_this);
	    _this._handleOkClick = _this._handleOkClick.bind(_this);
	    _this._handleCancelClick = _this._handleCancelClick.bind(_this);
	    _this._changeCalendarMode = _this._changeCalendarMode.bind(_this);
	    _this._nextMonth = _this._nextMonth.bind(_this);
	    _this._previousMonth = _this._previousMonth.bind(_this);
	    _this._setCalendarTempDate = _this._setCalendarTempDate.bind(_this);
	    _this._setCalendarTempYear = _this._setCalendarTempYear.bind(_this);
	    _this._validateDateRange = _this._validateDateRange.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    return _this;
	  }
	
	  _createClass(DatePickerContainer, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var value = nextProps.value,
	          minDate = nextProps.minDate,
	          maxDate = nextProps.maxDate;
	
	      var minEqual = (0, _isDateEqual2.default)(this.props.minDate, minDate);
	      var maxEqual = (0, _isDateEqual2.default)(this.props.maxDate, maxDate);
	      if (this.props.value !== value || !minEqual || !maxEqual) {
	        var calendarDate = this.state.calendarDate;
	
	        if (typeof value !== 'undefined') {
	          calendarDate = this._getDate(value);
	        }
	
	        calendarDate = this._validateDateRange(calendarDate, minDate, maxDate);
	
	        if (!(0, _isDateEqual2.default)(this.state.calendarDate, calendarDate)) {
	          this.setState({ calendarDate: calendarDate, calendarTempDate: calendarDate });
	        }
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _props = this.props,
	          inline = _props.inline,
	          isOpen = _props.isOpen;
	
	      var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	      var pVisible = typeof prevProps.isOpen !== 'undefined' ? prevProps.isOpen : (0, _getField2.default)(prevProps, prevState, 'visible');
	
	      if (visible === pVisible) {
	        return;
	      }
	
	      if (visible) {
	        if (inline) {
	          (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, true);
	          window.addEventListener('keydown', this._closeOnEsc);
	        }
	      } else if (inline) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	        window.removeEventListener('keydown', this._closeOnEsc);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	
	      if (visible && this.props.inline) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	        window.removeEventListener('keydown', this._closeOnEsc);
	      }
	    }
	  }, {
	    key: '_getDate',
	    value: function _getDate(value) {
	      if (value === '' || value === null) {
	        return new Date();
	      } else if (typeof value === 'string') {
	        return new Date(value);
	      }
	
	      return value;
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      this._container = container;
	    }
	  }, {
	    key: '_closeOnEsc',
	    value: function _closeOnEsc(e) {
	      if ((e.which || e.keyCode) === _keyCodes.ESC) {
	        this._handleCancelClick(e);
	      }
	    }
	  }, {
	    key: '_handleOutsideClick',
	    value: function _handleOutsideClick(e) {
	      if (this._container && !this._container.contains(e.target)) {
	        this._handleCancelClick(e);
	      }
	    }
	  }, {
	    key: '_toggleOpen',
	    value: function _toggleOpen(e) {
	      if (this.props.disabled || this.props.readOnly) {
	        return;
	      }
	
	      var visible = !(typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible'));
	
	      if (this.props.onVisibilityChange) {
	        this.props.onVisibilityChange(visible, e);
	      }
	
	      if (typeof this.props.isOpen === 'undefined' && typeof this.props.visible === 'undefined') {
	        this.setState({ visible: visible });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      (0, _handleKeyboardAccessibility2.default)(e, this._toggleOpen, true, true);
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB && this.state.active) {
	        this.setState({ active: false });
	      }
	    }
	  }, {
	    key: '_handleOkClick',
	    value: function _handleOkClick(e) {
	      var _props2 = this.props,
	          DateTimeFormat = _props2.DateTimeFormat,
	          locales = _props2.locales,
	          onChange = _props2.onChange,
	          formatOptions = _props2.formatOptions,
	          onVisibilityChange = _props2.onVisibilityChange;
	
	      var value = DateTimeFormat(locales, formatOptions).format(this.state.calendarTempDate);
	      if (onChange) {
	        onChange(value, new Date(this.state.calendarTempDate), e);
	      }
	
	      if (onVisibilityChange) {
	        onVisibilityChange(false, e);
	      }
	
	      var state = void 0;
	      if (typeof this.props.value === 'undefined') {
	        state = { value: value };
	      }
	
	      if (typeof this.props.visible === 'undefined' && typeof this.props.isOpen === 'undefined') {
	        state = state || {};
	        state.visible = false;
	      }
	
	      if (state) {
	        this.setState(state);
	      }
	    }
	  }, {
	    key: '_handleCancelClick',
	    value: function _handleCancelClick(e) {
	      var state = { calendarTempDate: this.state.calendarDate };
	      if (typeof this.props.isOpen === 'undefined' && typeof this.props.isOpen === 'undefined') {
	        state.visible = false;
	      }
	
	      if (this.props.onVisibilityChange) {
	        this.props.onVisibilityChange(false, e);
	      }
	
	      this.setState(state);
	    }
	  }, {
	    key: '_changeCalendarMode',
	    value: function _changeCalendarMode(calendarMode) {
	      if (this.state.calendarMode === calendarMode) {
	        return;
	      }
	
	      this.setState({ calendarMode: calendarMode });
	    }
	  }, {
	    key: '_previousMonth',
	    value: function _previousMonth() {
	      var calendarDate = (0, _addDate2.default)(this.state.calendarDate, -1, 'M');
	      this.setState({ calendarDate: calendarDate });
	    }
	  }, {
	    key: '_nextMonth',
	    value: function _nextMonth() {
	      var calendarDate = (0, _addDate2.default)(this.state.calendarDate, 1, 'M');
	      this.setState({ calendarDate: calendarDate });
	    }
	  }, {
	    key: '_setCalendarTempDate',
	    value: function _setCalendarTempDate(calendarTempDate) {
	      var _this2 = this;
	
	      var _props3 = this.props,
	          autoOk = _props3.autoOk,
	          DateTimeFormat = _props3.DateTimeFormat,
	          locales = _props3.locales,
	          onChange = _props3.onChange,
	          formatOptions = _props3.formatOptions;
	
	
	      var state = { calendarTempDate: calendarTempDate };
	      if (autoOk) {
	        var value = DateTimeFormat(locales, formatOptions).format(calendarTempDate);
	        if (onChange) {
	          onChange(value, new Date(calendarTempDate));
	        }
	
	        if (typeof this.props.value === 'undefined') {
	          state.value = value;
	        }
	
	        this._timeout = setTimeout(function () {
	          _this2._timeout = null;
	
	          if (_this2.props.onVisibilityChange) {
	            _this2.props.onVisibilityChange(false);
	          }
	
	          if (typeof _this2.props.visible === 'undefined' && typeof _this2.props.isOpen === 'undefined') {
	            _this2.setState({ visible: false });
	          }
	        });
	      }
	      this.setState(state);
	    }
	  }, {
	    key: '_setCalendarTempYear',
	    value: function _setCalendarTempYear(year) {
	      var _state = this.state,
	          calendarTempDate = _state.calendarTempDate,
	          calendarDate = _state.calendarDate;
	
	      if (calendarTempDate.getFullYear() === year) {
	        return;
	      }
	
	      var _props4 = this.props,
	          minDate = _props4.minDate,
	          maxDate = _props4.maxDate;
	
	      var nextDate = new Date(calendarDate.setFullYear(year));
	      var nextTemp = new Date(calendarTempDate.setFullYear(year));
	
	      if (minDate && nextTemp < minDate) {
	        nextDate = new Date(minDate);
	        nextTemp = new Date(minDate);
	      }
	
	      if (maxDate && nextTemp > maxDate) {
	        nextDate = new Date(maxDate);
	        nextTemp = new Date(maxDate);
	      }
	
	      this.setState({
	        calendarDate: nextDate,
	        calendarTempDate: nextTemp
	      });
	    }
	
	    /**
	     * Gets the current value from the date picker as a formatted string.
	     *
	     * @param {Object} props? the props object to use.
	     * @param {Object} state? the state object to use.
	     * @return {String} a formatted date string or the empty string.
	     */
	
	  }, {
	    key: '_getFormattedValue',
	    value: function _getFormattedValue(props, state) {
	      var DateTimeFormat = props.DateTimeFormat,
	          locales = props.locales,
	          formatOptions = props.formatOptions;
	
	      var value = (0, _getField2.default)(props, state, 'value');
	      if (!value) {
	        return '';
	      } else if (value instanceof Date) {
	        return DateTimeFormat(locales, formatOptions).format(new Date(value));
	      } else {
	        return value;
	      }
	    }
	
	    /**
	     * Attempts to validate the `calendarDate` in the state against the min and
	     * max dates.
	     *
	     * This will return null if the current calendarDate is still within the range.
	     *
	     * @param {Date} calendarDate - The current calendar date to compare to.
	     * @param {Date} minDate - An optional min date to compare to.
	     * @param {Date} maxDate - An optional max date to compare to.
	     * @return {Object} - The new state object with the updated calendarDate and
	     *    calendarTempDate keys or null.
	     */
	
	  }, {
	    key: '_validateDateRange',
	    value: function _validateDateRange(calendarDate, minDate, maxDate) {
	      var date = calendarDate;
	      if (minDate && minDate > calendarDate) {
	        date = new Date(minDate);
	      }
	
	      if (maxDate && maxDate < calendarDate) {
	        date = new Date(maxDate);
	      }
	
	      return date;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props5 = this.props,
	          style = _props5.style,
	          className = _props5.className,
	          pickerStyle = _props5.pickerStyle,
	          pickerClassName = _props5.pickerClassName,
	          inputStyle = _props5.inputStyle,
	          inputClassName = _props5.inputClassName,
	          textFieldStyle = _props5.textFieldStyle,
	          textFieldClassName = _props5.textFieldClassName,
	          label = _props5.label,
	          placeholder = _props5.placeholder,
	          icon = _props5.icon,
	          inline = _props5.inline,
	          displayMode = _props5.displayMode,
	          fullWidth = _props5.fullWidth,
	          lineDirection = _props5.lineDirection,
	          id = _props5.id,
	          disabled = _props5.disabled,
	          closeOnEsc = _props5.closeOnEsc,
	          renderNode = _props5.renderNode,
	          lastChild = _props5.lastChild,
	          block = _props5.block,
	          paddedBlock = _props5.paddedBlock,
	          active = _props5.active,
	          error = _props5.error,
	          floating = _props5.floating,
	          required = _props5.required,
	          leftIconStateful = _props5.leftIconStateful,
	          rightIcon = _props5.rightIcon,
	          rightIconStateful = _props5.rightIconStateful,
	          customSize = _props5.customSize,
	          errorText = _props5.errorText,
	          helpText = _props5.helpText,
	          helpOnFocus = _props5.helpOnFocus,
	          inlineIndicator = _props5.inlineIndicator,
	          ariaLabel = _props5['aria-label'],
	          isOpen = _props5.isOpen,
	          props = _objectWithoutProperties(_props5, ['style', 'className', 'pickerStyle', 'pickerClassName', 'inputStyle', 'inputClassName', 'textFieldStyle', 'textFieldClassName', 'label', 'placeholder', 'icon', 'inline', 'displayMode', 'fullWidth', 'lineDirection', 'id', 'disabled', 'closeOnEsc', 'renderNode', 'lastChild', 'block', 'paddedBlock', 'active', 'error', 'floating', 'required', 'leftIconStateful', 'rightIcon', 'rightIconStateful', 'customSize', 'errorText', 'helpText', 'helpOnFocus', 'inlineIndicator', 'aria-label', 'isOpen']);
	
	      delete props.value;
	      delete props.onChange;
	      delete props.visible;
	      delete props.readOnly;
	      delete props.onVisibilityToggle;
	      delete props.defaultValue;
	      delete props.defaultVisible;
	
	      // Delete deprecated
	      delete props.initiallyOpen;
	      delete props.adjustMinWidth;
	      delete props.nextIcon;
	      delete props.previousIcon;
	
	      var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	
	      var picker = _react2.default.createElement(_DatePicker2.default, _extends({}, this.state, props, {
	        icon: !!icon,
	        inline: inline,
	        style: pickerStyle,
	        className: pickerClassName,
	        displayMode: displayMode,
	        onCancelClick: this._handleCancelClick,
	        onOkClick: this._handleOkClick,
	        changeCalendarMode: this._changeCalendarMode,
	        onPreviousClick: this._previousMonth,
	        onNextClick: this._nextMonth,
	        onCalendarDateClick: this._setCalendarTempDate,
	        onCalendarYearClick: this._setCalendarTempYear
	      }));
	
	      var content = void 0;
	      if (inline) {
	        content = _react2.default.createElement(
	          _Collapse2.default,
	          { collapsed: !visible },
	          picker
	        );
	      } else {
	        content = _react2.default.createElement(
	          _DialogContainer2.default,
	          {
	            id: id + 'Dialog',
	            visible: visible,
	            onHide: this._handleCancelClick,
	            dialogClassName: 'md-dialog--picker',
	            contentClassName: 'md-dialog-content--picker',
	            'aria-label': ariaLabel,
	            closeOnEsc: closeOnEsc,
	            renderNode: renderNode,
	            lastChild: lastChild,
	            focusOnMount: false
	          },
	          picker
	        );
	      }
	
	      return _react2.default.createElement(
	        'div',
	        { style: style, className: (0, _classnames2.default)('md-picker-container', className), ref: this._setContainer },
	        _react2.default.createElement(_TextField2.default, {
	          id: id,
	          style: textFieldStyle,
	          className: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, textFieldClassName),
	          inputStyle: inputStyle,
	          inputClassName: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, inputClassName),
	          active: active || visible,
	          error: error,
	          floating: floating || visible,
	          required: required,
	          disabled: disabled,
	          leftIcon: icon,
	          leftIconStateful: leftIconStateful,
	          rightIcon: rightIcon,
	          rightIconStateful: rightIconStateful,
	          inlineIndicator: inlineIndicator,
	          block: block,
	          paddedBlock: paddedBlock,
	          fullWidth: fullWidth,
	          lineDirection: lineDirection,
	          customSize: customSize,
	          helpText: helpText,
	          helpOnFocus: helpOnFocus,
	          errorText: errorText,
	          label: label,
	          placeholder: placeholder,
	          onClick: this._toggleOpen,
	          onKeyDown: this._handleKeyDown,
	          value: this._getFormattedValue(this.props, this.state),
	          readOnly: true
	        }),
	        content
	      );
	    }
	  }]);
	
	  return DatePickerContainer;
	}(_react.PureComponent);
	
	DatePickerContainer.propTypes = {
	  /**
	   * An id for the text field in the date picker. This is require for a11u.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
	
	  /**
	   * An aria label for the dialog. This is required for a11y.
	   */
	  'aria-label': (0, _isRequiredForA11y2.default)(_propTypes2.default.string),
	
	  /**
	   * An optional style to apply to the date picker's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the date picker's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the date picker.
	   */
	  pickerStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the date picker.
	   */
	  pickerClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the input tag.
	   */
	  inputStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the input tag.
	   */
	  inputClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the text field's container.
	   */
	  textFieldStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the text field's container.
	   */
	  textFieldClassName: _propTypes2.default.string,
	
	  /**
	   * An optional icon to display with the date picker.
	   */
	  icon: _propTypes2.default.node,
	
	  /**
	   * Boolean if the date picker is open by default.
	   */
	  defaultVisible: _propTypes2.default.bool,
	
	  /**
	   * An optional label to be displayed in the date picker's text
	   * field.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * An optional placeholder to be displayed in the date picker's text field.
	   */
	  placeholder: _propTypes2.default.string,
	
	  /**
	   * The value of the date picker. This will make the date picker
	   * be a controlled component. This value should either be a
	   * formatted date string or a date object.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]), 'onChange', 'defaultValue'),
	
	  /**
	   * An optional default value to give for the date picker. This should
	   * either be a formatted date string or a date object.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),
	
	  /**
	   * An optional date to use when the calendar is opened for the first time.
	   * If this is omitted, it will either be the `defaultValue`, `value`, or
	   * today.
	   */
	  initialCalendarDate: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.instanceOf(Date)]),
	
	  /**
	   * An optional function to call when the selected date is changed
	   * by hitting the OK button. The newly formatted date string,
	   * the new Date object, and the change event will be given.
	   *
	   * `onChange(dateString, dateObject, event)`.
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * A function to format the dates since it should be formatted to the user's
	   * locale. This _should_ be the `Intl.DateTimeFormat` function. You
	   * can also create your own if you really wanted. Unadvisable though.
	   *
	   * See [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.
	   */
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	
	  /**
	   * The locales to use for formatting the date. This will default to using
	   * the user's language in the browser or `'en-US'` when server renering.
	   */
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	
	  /**
	   * The label to use for the ok button on the date picker.
	   */
	  okLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the ok button should be styled with the primary color.
	   */
	  okPrimary: _propTypes2.default.bool,
	
	  /**
	   * The label to use for the cancel button on the date picker.
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the cancel button should be styled with the primary color.
	   */
	  cancelPrimary: _propTypes2.default.bool,
	
	  /**
	   * The initial mode to open the calendar in.
	   */
	  defaultCalendarMode: _propTypes2.default.oneOf(['calendar', 'year']),
	
	  /**
	   * Any children used to render the previous icon button in the calendar.
	   */
	  previousIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className to use to render the previous icon button in the calendar.
	   */
	  previousIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children used to render the next icon button in the calendar.
	   */
	  nextIconChildren: _propTypes2.default.node,
	
	  /**
	   * The icon className to use to render the next icon button in the calendar.
	   */
	  nextIconClassName: _propTypes2.default.string,
	
	  /**
	   * An optional min date to use for the date picker. This will prevent
	   * any dates before this time to be chosen.
	   */
	  minDate: _propTypes2.default.instanceOf(Date),
	
	  /**
	   * An optional max date to use for the date picker. This will prevent
	   * any dates after this time to be chosen.
	   */
	  maxDate: function maxDate(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    var err = _propTypes2.default.instanceOf(Date).apply(undefined, [props, propName, component].concat(others));
	    if (err || !props.minDate || !props[propName]) {
	      return err;
	    }
	
	    var minDate = props.minDate,
	        maxDate = props.maxDate;
	
	    if (minDate > maxDate) {
	      return new Error('The min date: \'' + minDate + '\' is greater than the max date: \'' + maxDate + '\'');
	    }
	
	    return null;
	  },
	
	  /**
	   * Boolean if the date should automatically be selected when a user clicks
	   * on a new date instead of making them hit the ok button.
	   */
	  autoOk: _propTypes2.default.bool,
	
	  /**
	   * The number of years to display.
	   */
	  yearsDisplayed: _propTypes2.default.number,
	
	  /**
	   * Boolean if the date picker should be displayed inline instead of in a
	   * dialog.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * An optional force of the display mode of the date picker.
	   * This _should_ not really be used since there are media queries
	   * to use the correct mode based on device orientation.
	   */
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait']),
	
	  /**
	   * The DateTimeFormat options to apply to format the date.
	   */
	  formatOptions: _propTypes2.default.shape({
	    weekday: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    era: _propTypes2.default.oneOf(['narrow', 'short', 'long']),
	    year: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    month: _propTypes2.default.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long']),
	    day: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    hour: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    minute: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    second: _propTypes2.default.oneOf(['numeric', '2-digit']),
	    timeZoneName: _propTypes2.default.oneOf(['short', 'long'])
	  }),
	
	  /**
	   * Boolean if the text field for the Date Picker should be displayed as full width.
	   */
	  fullWidth: _propTypes2.default.bool,
	
	  /**
	   * The direction that the text field divider expands from when the text field
	   * in the date picker gains focus.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']),
	
	  /**
	   * An optional boolean if the time picker is current visible by dialog or inline.
	   * If this is set, the `onOpenToggle` function is required.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),
	
	  /**
	   * An optional function to call when the date picker is opened in either a dialog, or
	   * inline. The callback will include the next state.
	   *
	   * ```js
	   * onVisibilityChange(!visible, e);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,
	
	  /**
	   * Boolean if the time picker is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the dialog should be able to close if a keyboard user presses the escape key.
	   */
	  closeOnEsc: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the time is required.
	   *
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  required: _propTypes2.default.bool,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  block: _TextField2.default.propTypes.block,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  paddedBlock: _TextField2.default.propTypes.paddedBlock,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  active: _TextField2.default.propTypes.active,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  error: _TextField2.default.propTypes.error,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  floating: _TextField2.default.propTypes.floating,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  leftIconStateful: _TextField2.default.propTypes.leftIconStateful,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  rightIcon: _TextField2.default.propTypes.rightIcon,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  rightIconStateful: _TextField2.default.propTypes.rightIconStateful,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  customSize: _TextField2.default.propTypes.customSize,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  errorText: _TextField2.default.propTypes.errorText,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  helpText: _TextField2.default.propTypes.helpText,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  helpOnFocus: _TextField2.default.propTypes.helpOnFocus,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  inlineIndicator: _TextField2.default.propTypes.helpOnFocus,
	
	  /**
	   * An optional DOM Node to render the dialog into. The default is to render as the first child
	   * in the `body`.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the DatePicker should be read only. This will prevent the user from opening the picker
	   * and only display the current date in the text field.
	   */
	  readOnly: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead
	   * of the first.
	   */
	  lastChild: _propTypes2.default.bool,
	  previousIcon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `previousIconChildren` and `previousIconClassName` instead'),
	  nextIcon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use `nextIconChildren` and `nextIconClassName` instead'),
	  adjustMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'No longer valid for a text field'),
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  initialCalendarMode: (0, _deprecated2.default)(_propTypes2.default.oneOf(['calendar', 'year']), 'Use `defaultCalendarMode` instead'),
	  initialYearsDisplayed: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `yearsDisplayed` instead. I have not implemented infinite loading years')
	};
	DatePickerContainer.defaultProps = {
	  previousIconChildren: 'chevron_left',
	  nextIconChildren: 'chevron_right',
	  autoOk: false,
	  icon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'date_range'
	  ),
	  yearsDisplayed: 100,
	  defaultCalendarMode: 'calendar',
	  DateTimeFormat: _DateTimeFormat2.default, // eslint-disable-line object-shorthand
	  locales: typeof window !== 'undefined' ? window.navigator.userLanguage || window.navigator.language : 'en-US',
	  okLabel: 'Ok',
	  okPrimary: true,
	  cancelLabel: 'Cancel',
	  cancelPrimary: true,
	  closeOnEsc: true,
	  'aria-label': 'Pick a date'
	};
	exports.default = DatePickerContainer;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _PickerControl = __webpack_require__(64);
	
	var _PickerControl2 = _interopRequireDefault(_PickerControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable new-cap */
	
	
	/**
	 * The `DatePickerHeader` component is the component that holds the
	 * current year and the current date. It allows the user to switch
	 * between calendar and year picker mode.
	 */
	var DatePickerHeader = function (_PureComponent) {
	  _inherits(DatePickerHeader, _PureComponent);
	
	  function DatePickerHeader(props) {
	    _classCallCheck(this, DatePickerHeader);
	
	    var _this = _possibleConstructorReturn(this, (DatePickerHeader.__proto__ || Object.getPrototypeOf(DatePickerHeader)).call(this, props));
	
	    _this.state = _this._getFormattedDate(props);
	    _this._selectYear = _this._selectYear.bind(_this);
	    _this._selectCalendar = _this._selectCalendar.bind(_this);
	    return _this;
	  }
	
	  _createClass(DatePickerHeader, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _props = this.props,
	          DateTimeFormat = _props.DateTimeFormat,
	          locales = _props.locales,
	          calendarTempDate = _props.calendarTempDate,
	          changeCalendarMode = _props.changeCalendarMode;
	
	      if (DateTimeFormat !== nextProps.DateTimeFormat || locales !== nextProps.locales || calendarTempDate !== nextProps.calendarTempDate || changeCalendarMode !== nextProps.changeCalendarMode) {
	        this.setState(this._getFormattedDate(nextProps));
	      }
	    }
	  }, {
	    key: '_getFormattedDate',
	    value: function _getFormattedDate(_ref) {
	      var DateTimeFormat = _ref.DateTimeFormat,
	          locales = _ref.locales,
	          calendarTempDate = _ref.calendarTempDate;
	
	      return {
	        year: DateTimeFormat(locales, { year: 'numeric' }).format(calendarTempDate),
	        weekday: DateTimeFormat(locales, { weekday: 'short' }).format(calendarTempDate),
	        date: DateTimeFormat(locales, { month: 'short', day: '2-digit' }).format(calendarTempDate)
	      };
	    }
	  }, {
	    key: '_selectYear',
	    value: function _selectYear(e) {
	      this.props.changeCalendarMode('year', e);
	    }
	  }, {
	    key: '_selectCalendar',
	    value: function _selectCalendar(e) {
	      this.props.changeCalendarMode('calendar', e);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          year = _state.year,
	          weekday = _state.weekday,
	          date = _state.date;
	      var calendarMode = this.props.calendarMode;
	
	      return _react2.default.createElement(
	        'header',
	        { className: 'md-picker-header' },
	        _react2.default.createElement(
	          _PickerControl2.default,
	          { onClick: this._selectYear, active: calendarMode === 'year' },
	          _react2.default.createElement(
	            'h6',
	            { className: 'md-subheading-1' },
	            year
	          )
	        ),
	        _react2.default.createElement(
	          _PickerControl2.default,
	          { onClick: this._selectCalendar, active: calendarMode === 'calendar' },
	          _react2.default.createElement(
	            'h4',
	            { className: 'md-display-1' },
	            weekday + ',',
	            '\xA0'
	          ),
	          _react2.default.createElement(
	            'h4',
	            { className: 'md-display-1' },
	            date
	          )
	        )
	      );
	    }
	  }]);
	
	  return DatePickerHeader;
	}(_react.PureComponent);
	
	DatePickerHeader.propTypes = {
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  calendarMode: _propTypes2.default.oneOf(['calendar', 'year']).isRequired,
	  changeCalendarMode: _propTypes2.default.func.isRequired
	};
	exports.default = DatePickerHeader;

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _addHours = __webpack_require__(265);
	
	var _addHours2 = _interopRequireDefault(_addHours);
	
	var _PickerControl = __webpack_require__(64);
	
	var _PickerControl2 = _interopRequireDefault(_PickerControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This component displays a section for switching between the AM
	 * and PM time periods.
	 */
	var TimePeriods = function (_PureComponent) {
	  _inherits(TimePeriods, _PureComponent);
	
	  function TimePeriods(props) {
	    _classCallCheck(this, TimePeriods);
	
	    var _this = _possibleConstructorReturn(this, (TimePeriods.__proto__ || Object.getPrototypeOf(TimePeriods)).call(this, props));
	
	    _this._setAM = _this._setAM.bind(_this);
	    _this._setPM = _this._setPM.bind(_this);
	    return _this;
	  }
	
	  _createClass(TimePeriods, [{
	    key: '_setAM',
	    value: function _setAM() {
	      if (this.props.timePeriod !== 'AM') {
	        this.props.setTempTime((0, _addHours2.default)(this.props.tempTime, 12));
	      }
	    }
	  }, {
	    key: '_setPM',
	    value: function _setPM() {
	      if (this.props.timePeriod !== 'PM') {
	        this.props.setTempTime((0, _addHours2.default)(this.props.tempTime, -12));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var timePeriod = this.props.timePeriod;
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'md-time-periods' },
	        _react2.default.createElement(
	          _PickerControl2.default,
	          { onClick: this._setAM, active: timePeriod === 'AM' },
	          _react2.default.createElement(
	            'h6',
	            { className: 'md-time-period' },
	            'AM'
	          )
	        ),
	        _react2.default.createElement(
	          _PickerControl2.default,
	          { onClick: this._setPM, active: timePeriod === 'PM' },
	          _react2.default.createElement(
	            'h6',
	            { className: 'md-time-period' },
	            'PM'
	          )
	        )
	      );
	    }
	  }]);
	
	  return TimePeriods;
	}(_react.PureComponent);
	
	TimePeriods.propTypes = {
	  /**
	   * The current time for the time picker.
	   */
	  tempTime: _propTypes2.default.instanceOf(Date).isRequired,
	
	  /**
	   * A function to update the time for the time picker.
	   */
	  setTempTime: _propTypes2.default.func.isRequired,
	
	  /**
	   * The current time period.
	   */
	  timePeriod: _propTypes2.default.string.isRequired
	};
	exports.default = TimePeriods;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _ClockFace = __webpack_require__(210);
	
	var _ClockFace2 = _interopRequireDefault(_ClockFace);
	
	var _DialogFooter = __webpack_require__(34);
	
	var _DialogFooter2 = _interopRequireDefault(_DialogFooter);
	
	var _TimePickerHeader = __webpack_require__(220);
	
	var _TimePickerHeader2 = _interopRequireDefault(_TimePickerHeader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TimePicker` component is used to display a time picker
	 * in the `TimePickerContainer` component.
	 */
	var TimePicker = function (_PureComponent) {
	  _inherits(TimePicker, _PureComponent);
	
	  function TimePicker(props) {
	    _classCallCheck(this, TimePicker);
	
	    var _this = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));
	
	    _this._updateTime = _this._updateTime.bind(_this);
	    return _this;
	  }
	
	  /**
	   * Takes in the new time (number o'clock or minutes), updates the temp time
	   * with that new time, and then calls the setTempTime prop.
	   */
	
	
	  _createClass(TimePicker, [{
	    key: '_updateTime',
	    value: function _updateTime(newTime) {
	      var timePart = newTime;
	      var _props = this.props,
	          tempTime = _props.tempTime,
	          setTempTime = _props.setTempTime,
	          timeMode = _props.timeMode,
	          timePeriod = _props.timePeriod;
	
	      var time = new Date(tempTime);
	      if (timeMode === 'hour') {
	        var isAM = timePeriod === 'AM';
	        var is12 = timePart === 12;
	        if (timePeriod && isAM && is12) {
	          timePart = 0;
	        } else if (timePeriod && !isAM && !is12) {
	          timePart += 12;
	        }
	
	        time.setHours(timePart);
	      } else {
	        time.setMinutes(timePart);
	      }
	
	      setTempTime(time);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _cn;
	
	      var _props2 = this.props,
	          okLabel = _props2.okLabel,
	          okPrimary = _props2.okPrimary,
	          onOkClick = _props2.onOkClick,
	          cancelLabel = _props2.cancelLabel,
	          cancelPrimary = _props2.cancelPrimary,
	          onCancelClick = _props2.onCancelClick,
	          style = _props2.style,
	          className = _props2.className,
	          setTimeMode = _props2.setTimeMode,
	          setTempTime = _props2.setTempTime,
	          timeMode = _props2.timeMode,
	          tempTime = _props2.tempTime,
	          hours = _props2.hours,
	          minutes = _props2.minutes,
	          timePeriod = _props2.timePeriod,
	          displayMode = _props2.displayMode,
	          inline = _props2.inline,
	          icon = _props2.icon;
	
	
	      var hoursInt = parseInt(hours, 10);
	      var minutesInt = parseInt(minutes.replace(/[^0-9]/g, ''), 10);
	      var actions = [{
	        key: 'cancel',
	        onClick: onCancelClick,
	        primary: cancelPrimary,
	        secondary: !cancelPrimary,
	        label: cancelLabel
	      }, {
	        key: 'ok',
	        onClick: onOkClick,
	        primary: okPrimary,
	        secondary: !okPrimary,
	        label: okLabel
	      }];
	
	      return _react2.default.createElement(
	        'div',
	        {
	          style: style,
	          className: (0, _classnames2.default)('md-picker md-picker--time', (_cn = {}, _defineProperty(_cn, 'md-picker--' + displayMode, displayMode), _defineProperty(_cn, 'md-picker--inline', inline), _defineProperty(_cn, 'md-picker--inline-icon', inline && icon), _cn), className)
	        },
	        _react2.default.createElement(_TimePickerHeader2.default, {
	          tempTime: tempTime,
	          timeMode: timeMode,
	          setTimeMode: setTimeMode,
	          setTempTime: setTempTime,
	          hours: hours,
	          minutes: minutes,
	          timePeriod: timePeriod
	        }),
	        _react2.default.createElement(
	          'div',
	          { className: 'md-picker-content-container' },
	          _react2.default.createElement(
	            'div',
	            { className: 'md-picker-content md-picker-content--clock' },
	            _react2.default.createElement(_ClockFace2.default, {
	              time: timeMode === 'hour' ? hoursInt : minutesInt,
	              minutes: timeMode === 'minute',
	              onChange: this._updateTime,
	              timePeriod: timePeriod
	            })
	          ),
	          _react2.default.createElement(_DialogFooter2.default, { actions: actions })
	        )
	      );
	    }
	  }]);
	
	  return TimePicker;
	}(_react.PureComponent);
	
	TimePicker.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  okLabel: _propTypes2.default.node.isRequired,
	  okPrimary: _propTypes2.default.bool.isRequired,
	  onOkClick: _propTypes2.default.func.isRequired,
	  cancelLabel: _propTypes2.default.node.isRequired,
	  cancelPrimary: _propTypes2.default.bool.isRequired,
	  onCancelClick: _propTypes2.default.func.isRequired,
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	  icon: _propTypes2.default.bool,
	  inline: _propTypes2.default.bool,
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait']),
	
	  /**
	   * A function that will switch the state from hour to minute.
	   */
	  setTimeMode: _propTypes2.default.func.isRequired,
	
	  /**
	   * A function that will update the time for the TimePicker before
	   * the user selects ok. This function will be given a new Date object
	   * with a modified time.
	   */
	  setTempTime: _propTypes2.default.func.isRequired,
	
	  /**
	   * The current display mode of the time picker.
	   */
	  timeMode: _propTypes2.default.oneOf(['hour', 'minute']).isRequired,
	
	  /**
	   * The current time as a date object that is being displayed in the
	   * time picker.
	   */
	  tempTime: _propTypes2.default.instanceOf(Date).isRequired,
	
	  /**
	   * A string that is a representation of the hours in the user's locale.
	   */
	  hours: _propTypes2.default.string.isRequired,
	
	  /**
	   * A string that is a representation of the minutes in the user's locale.
	   * This will also include any separator the locale uses.
	   *
	   * Example: ':15' in '3:15 PM' for 'en-US'
	   */
	  minutes: _propTypes2.default.string.isRequired,
	
	  /**
	   * An optional time period if a user's locale uses it.
	   */
	  timePeriod: _propTypes2.default.string
	};
	exports.default = TimePicker;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _keyCodes = __webpack_require__(6);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _handleWindowClickListeners = __webpack_require__(38);
	
	var _handleWindowClickListeners2 = _interopRequireDefault(_handleWindowClickListeners);
	
	var _handleKeyboardAccessibility = __webpack_require__(37);
	
	var _handleKeyboardAccessibility2 = _interopRequireDefault(_handleKeyboardAccessibility);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _DateTimeFormat = __webpack_require__(115);
	
	var _DateTimeFormat2 = _interopRequireDefault(_DateTimeFormat);
	
	var _formatTime = __webpack_require__(116);
	
	var _formatTime2 = _interopRequireDefault(_formatTime);
	
	var _extractTimeParts = __webpack_require__(266);
	
	var _extractTimeParts2 = _interopRequireDefault(_extractTimeParts);
	
	var _DialogContainer = __webpack_require__(58);
	
	var _DialogContainer2 = _interopRequireDefault(_DialogContainer);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _TextField = __webpack_require__(30);
	
	var _TextField2 = _interopRequireDefault(_TextField);
	
	var _Collapse = __webpack_require__(17);
	
	var _Collapse2 = _interopRequireDefault(_Collapse);
	
	var _TimePicker = __webpack_require__(218);
	
	var _TimePicker2 = _interopRequireDefault(_TimePicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-shadow */
	
	
	/**
	 * The `TimePickerContainer` component is a wrapper for the main `TimePicker` component
	 * to manage the state and _logic_ for rendering the `TimePicker`. This component will
	 * either render inline or in a `Dialog` depending if the `inline` prop is set
	 * to `true`.
	 *
	 * NOTE: This component is actually exported as `TimePicker` when using the `import { member }` syntax.
	 * The following two lines are equivalent:
	 *
	 * ```js
	 * import { TimePicker } from 'react-md/lib/Pickers';
	 * import TimePicker from 'react-md/lib/Pickers/TimePickerContainer';
	 * ```
	 */
	var TimePickerContainer = function (_PureComponent) {
	  _inherits(TimePickerContainer, _PureComponent);
	
	  function TimePickerContainer(props) {
	    _classCallCheck(this, TimePickerContainer);
	
	    var _this = _possibleConstructorReturn(this, (TimePickerContainer.__proto__ || Object.getPrototypeOf(TimePickerContainer)).call(this, props));
	
	    var initialDate = void 0;
	    if (props.defaultValue) {
	      initialDate = new Date(props.defaultValue);
	    } else if (props.value) {
	      initialDate = new Date(props.value);
	    } else {
	      initialDate = new Date();
	    }
	
	    var visible = typeof props.initiallyOpen !== 'undefined' ? props.initiallyOpen : !!props.defaultVisible;
	
	    _this.state = _extends({
	      visible: visible
	    }, _this._getTimeParts(initialDate, props), {
	      value: props.defaultValue,
	      time: initialDate,
	      timeMode: props.initialTimeMode || props.defaultTimeMode,
	      tempTime: initialDate
	    });
	
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._toggleOpen = _this._toggleOpen.bind(_this);
	    _this._closeOnEsc = _this._closeOnEsc.bind(_this);
	    _this._handleOutsideClick = _this._handleOutsideClick.bind(_this);
	    _this._getTextFieldValue = _this._getTextFieldValue.bind(_this);
	    _this._setTimeMode = _this._setTimeMode.bind(_this);
	    _this._setTempTime = _this._setTempTime.bind(_this);
	    _this._handleOkClick = _this._handleOkClick.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleCancelClick = _this._handleCancelClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(TimePickerContainer, [{
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if ((0, _getField2.default)(this.props, this.state, 'value') !== (0, _getField2.default)(nextProps, nextState, 'value')) {
	        this.setState(this._getTimeParts((0, _getField2.default)(nextProps, nextState, 'value'), nextProps));
	      } else if (this.state.tempValue !== nextState.tempTime) {
	        this.setState(this._getTimeParts(nextState.tempTime, nextProps));
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _props = this.props,
	          inline = _props.inline,
	          isOpen = _props.isOpen;
	
	      var visible = typeof isOpen !== 'undefined' ? isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	      var pVisible = typeof prevProps.isOpen !== 'undefined' ? prevProps.isOpen : (0, _getField2.default)(prevProps, prevState, 'visible');
	
	      if (visible === pVisible) {
	        return;
	      }
	
	      if (visible) {
	        if (inline) {
	          (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, true);
	          window.addEventListener('keydown', this._closeOnEsc);
	        }
	      } else if (inline) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	        window.removeEventListener('keydown', this._closeOnEsc);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	      if (visible && this.props.inline) {
	        (0, _handleWindowClickListeners2.default)(this._handleOutsideClick, false);
	        window.removeEventListener('keydown', this._closeOnEsc);
	      }
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      this._container = container;
	    }
	  }, {
	    key: '_getTimeParts',
	    value: function _getTimeParts(date, props) {
	      return (0, _extractTimeParts2.default)(props.DateTimeFormat, props.locales, date);
	    }
	  }, {
	    key: '_closeOnEsc',
	    value: function _closeOnEsc(e) {
	      if ((e.which || e.keyCode) === _keyCodes.ESC) {
	        this._handleCancelClick(e);
	      }
	    }
	  }, {
	    key: '_handleOutsideClick',
	    value: function _handleOutsideClick(e) {
	      if (this._container && !this._container.contains(e.target)) {
	        this._handleCancelClick(e);
	      }
	    }
	  }, {
	    key: '_toggleOpen',
	    value: function _toggleOpen(e) {
	      if (this.props.disabled || this.props.readOnly) {
	        return;
	      }
	
	      var visible = !(typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible'));
	
	      if (this.props.onVisibilityChange) {
	        this.props.onVisibilityChange(visible, e);
	      }
	
	      if (typeof this.props.isOpen === 'undefined' && typeof this.props.visible === 'undefined') {
	        this.setState({ visible: visible });
	      }
	    }
	  }, {
	    key: '_setTimeMode',
	    value: function _setTimeMode(timeMode) {
	      if (this.state.timeMode === timeMode) {
	        return;
	      }
	
	      this.setState({ timeMode: timeMode });
	    }
	  }, {
	    key: '_setTempTime',
	    value: function _setTempTime(time) {
	      if (this.state.tempTime === time) {
	        return;
	      }
	
	      this.setState({ tempTime: time });
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      (0, _handleKeyboardAccessibility2.default)(e, this._toggleOpen, true, true);
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB && this.state.active) {
	        this.setState({ active: false });
	      }
	    }
	  }, {
	    key: '_handleOkClick',
	    value: function _handleOkClick(e) {
	      var _props2 = this.props,
	          onVisibilityChange = _props2.onVisibilityChange,
	          onChange = _props2.onChange,
	          DateTimeFormat = _props2.DateTimeFormat,
	          locales = _props2.locales;
	
	      var value = new Date(this.state.tempTime);
	      if (onChange) {
	        onChange((0, _formatTime2.default)(DateTimeFormat, locales, value), value, e);
	      }
	
	      if (onVisibilityChange) {
	        onVisibilityChange(false, e);
	      }
	
	      var state = void 0;
	      if (typeof this.props.value === 'undefined') {
	        state = { value: value };
	      }
	
	      if (typeof this.props.isOpen === 'undefined' && typeof this.props.visible === 'undefined') {
	        state = state || {};
	        state.visible = false;
	      }
	
	      if (state) {
	        this.setState(state);
	      }
	    }
	  }, {
	    key: '_handleCancelClick',
	    value: function _handleCancelClick(e) {
	      if (this.props.onVisibilityChange) {
	        this.props.onVisibilityChange(false, e);
	      }
	
	      var state = { visible: false, tempTime: this.state.time };
	      if (typeof this.props.isOpen !== 'undefined' || typeof this.props.visible !== 'undefined') {
	        delete state.visible;
	      }
	
	      this.setState(state);
	    }
	  }, {
	    key: '_getTextFieldValue',
	    value: function _getTextFieldValue(props, state) {
	      var DateTimeFormat = props.DateTimeFormat,
	          locales = props.locales;
	
	      var value = (0, _getField2.default)(props, state, 'value');
	      if (!value) {
	        return '';
	      } else if (value instanceof Date) {
	        return (0, _formatTime2.default)(DateTimeFormat, locales, value);
	      } else {
	        // currently don't support value of string
	        return value;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          timeMode = _state.timeMode,
	          tempTime = _state.tempTime,
	          hours = _state.hours,
	          minutes = _state.minutes,
	          timePeriod = _state.timePeriod;
	
	      var _props3 = this.props,
	          style = _props3.style,
	          className = _props3.className,
	          pickerStyle = _props3.pickerStyle,
	          pickerClassName = _props3.pickerClassName,
	          inputStyle = _props3.inputStyle,
	          inputClassName = _props3.inputClassName,
	          textFieldStyle = _props3.textFieldStyle,
	          textFieldClassName = _props3.textFieldClassName,
	          id = _props3.id,
	          disabled = _props3.disabled,
	          label = _props3.label,
	          placeholder = _props3.placeholder,
	          icon = _props3.icon,
	          inline = _props3.inline,
	          displayMode = _props3.displayMode,
	          fullWidth = _props3.fullWidth,
	          lineDirection = _props3.lineDirection,
	          closeOnEsc = _props3.closeOnEsc,
	          renderNode = _props3.renderNode,
	          lastChild = _props3.lastChild,
	          block = _props3.block,
	          paddedBlock = _props3.paddedBlock,
	          active = _props3.active,
	          error = _props3.error,
	          floating = _props3.floating,
	          required = _props3.required,
	          leftIconStateful = _props3.leftIconStateful,
	          rightIcon = _props3.rightIcon,
	          rightIconStateful = _props3.rightIconStateful,
	          customSize = _props3.customSize,
	          errorText = _props3.errorText,
	          helpText = _props3.helpText,
	          helpOnFocus = _props3.helpOnFocus,
	          inlineIndicator = _props3.inlineIndicator,
	          ariaLabel = _props3['aria-label'],
	          props = _objectWithoutProperties(_props3, ['style', 'className', 'pickerStyle', 'pickerClassName', 'inputStyle', 'inputClassName', 'textFieldStyle', 'textFieldClassName', 'id', 'disabled', 'label', 'placeholder', 'icon', 'inline', 'displayMode', 'fullWidth', 'lineDirection', 'closeOnEsc', 'renderNode', 'lastChild', 'block', 'paddedBlock', 'active', 'error', 'floating', 'required', 'leftIconStateful', 'rightIcon', 'rightIconStateful', 'customSize', 'errorText', 'helpText', 'helpOnFocus', 'inlineIndicator', 'aria-label']);
	
	      delete props.value;
	      delete props.onVisibilityChange;
	      delete props.onChange;
	      delete props.readOnly;
	      delete props.defaultValue;
	      delete props.defaultVisible;
	      delete props.defaultTimeMode;
	
	      // Delete deprecated
	      delete props.isOpen;
	      delete props.initialTimeMode;
	      delete props.initiallyOpen;
	
	      var visible = typeof this.props.isOpen !== 'undefined' ? this.props.isOpen : (0, _getField2.default)(this.props, this.state, 'visible');
	
	      var picker = _react2.default.createElement(_TimePicker2.default, _extends({}, props, {
	        inline: inline,
	        icon: !!icon,
	        tempTime: tempTime,
	        timeMode: timeMode,
	        hours: hours,
	        minutes: minutes,
	        timePeriod: timePeriod,
	        style: pickerStyle,
	        className: pickerClassName,
	        displayMode: displayMode,
	        onOkClick: this._handleOkClick,
	        onCancelClick: this._handleCancelClick,
	        setTimeMode: this._setTimeMode,
	        setTempTime: this._setTempTime
	      }));
	
	      var content = void 0;
	      if (inline) {
	        content = _react2.default.createElement(
	          _Collapse2.default,
	          { collapsed: !visible },
	          picker
	        );
	      } else {
	        content = _react2.default.createElement(
	          _DialogContainer2.default,
	          {
	            id: id + 'Dialog',
	            visible: visible,
	            onHide: this._handleCancelClick,
	            dialogClassName: 'md-dialog--picker',
	            contentClassName: 'md-dialog-content--picker',
	            'aria-label': ariaLabel,
	            closeOnEsc: closeOnEsc,
	            lastChild: lastChild,
	            renderNode: renderNode,
	            focusOnMount: false
	          },
	          picker
	        );
	      }
	
	      return _react2.default.createElement(
	        'div',
	        { style: style, className: (0, _classnames2.default)('md-picker-container', className), ref: this._setContainer },
	        _react2.default.createElement(_TextField2.default, {
	          id: id,
	          style: textFieldStyle,
	          className: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, textFieldClassName),
	          inputStyle: inputStyle,
	          inputClassName: (0, _classnames2.default)({ 'md-pointer--hover': !disabled }, inputClassName),
	          active: active || visible,
	          error: error,
	          floating: floating || visible,
	          required: required,
	          disabled: disabled,
	          leftIcon: icon,
	          leftIconStateful: leftIconStateful,
	          rightIcon: rightIcon,
	          rightIconStateful: rightIconStateful,
	          inlineIndicator: inlineIndicator,
	          block: block,
	          paddedBlock: paddedBlock,
	          fullWidth: fullWidth,
	          lineDirection: lineDirection,
	          customSize: customSize,
	          helpText: helpText,
	          helpOnFocus: helpOnFocus,
	          errorText: errorText,
	          label: label,
	          placeholder: placeholder,
	          onClick: this._toggleOpen,
	          onKeyDown: this._handleKeyDown,
	          value: this._getTextFieldValue(this.props, this.state),
	          readOnly: true
	        }),
	        content
	      );
	    }
	  }]);
	
	  return TimePickerContainer;
	}(_react.PureComponent);
	
	TimePickerContainer.propTypes = {
	  /**
	   * An id for the text field in the time picker. This is require for a11u.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
	
	  /**
	   * An aria-label to apply to the dialog when it has been opened. This is required for
	   * a11y.
	   */
	  'aria-label': (0, _isRequiredForA11y2.default)(_propTypes2.default.string),
	
	  /**
	   * An optional style to apply to the time picker's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the time picker's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the time picker.
	   */
	  pickerStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the time picker.
	   */
	  pickerClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the input tag.
	   */
	  inputStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the input tag.
	   */
	  inputClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the text field's container.
	   */
	  textFieldStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the text field's container.
	   */
	  textFieldClassName: _propTypes2.default.string,
	
	  /**
	   * An optional icon to display with the time picker.
	   */
	  icon: _propTypes2.default.node,
	
	  /**
	   * Boolean if the time picker is open by default.
	   */
	  defaultVisible: _propTypes2.default.bool,
	
	  /**
	   * An optional label to be displayed in the time picker's text
	   * field.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * An optional placeholder to be displayed in the time picker's text field.
	   */
	  placeholder: _propTypes2.default.string,
	
	  /**
	   * The value of the time picker. This will make the time picker
	   * be a controlled component.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.instanceOf(Date), 'onChange', 'defaultValue'),
	
	  /**
	   * An optional function to call when the selected date is changed
	   * by hitting the OK button. The newly formatted time string,
	   * the new Date object, and the change event will be given.
	   *
	   * `onChange(timeString, dateObject, event)`.
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * An optional default value to give for the year picker.
	   */
	  defaultValue: _propTypes2.default.instanceOf(Date),
	
	  /**
	   * A function to format the dates since it should be formatted to the user's
	   * locale. This _should_ be the `Intl.DateTimeFormat` function. You
	   * can also create your own if you really wanted. Unadvisable though.
	   *
	   * See [intl-polyfill](https://github.com/andyearnshaw/Intl.js/) for more info.
	   */
	  DateTimeFormat: _propTypes2.default.func.isRequired,
	
	  /**
	   * The locales to use for formatting the date. This will default to using
	   * the user's language in the browser or `'en-US'` when server renering.
	   */
	  locales: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
	
	  /**
	   * The label to use for the ok button on the year picker.
	   */
	  okLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the ok button should be styled with the primary color.
	   */
	  okPrimary: _propTypes2.default.bool,
	
	  /**
	   * The label to use for the cancel button on the year picker.
	   */
	  cancelLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the cancel button should be styled with the primary color.
	   */
	  cancelPrimary: _propTypes2.default.bool,
	
	  /**
	   * The default mode to open the time picker in.
	   */
	  defaultTimeMode: _propTypes2.default.oneOf(['hour', 'minute']),
	
	  /**
	   * Boolean if the date should automatically be selected when a user clicks
	   * on a new date instead of making them hit the ok button.
	   */
	  autoOk: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the date picker should be displayed inline instead of in a
	   * dialog.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * An optional force of the display mode of the date picker.
	   * This _should_ not really be used since there are media queries
	   * to use the correct mode based on device orientation.
	   */
	  displayMode: _propTypes2.default.oneOf(['landscape', 'portrait']),
	
	  /**
	   * Boolean if the text field for the Time Picker should be displayed as full width.
	   */
	  fullWidth: _propTypes2.default.bool,
	
	  /**
	   * The direction that the text field divider expands from when the text field
	   * in the date picker gains focus.
	   */
	  lineDirection: _propTypes2.default.oneOf(['left', 'center', 'right']),
	
	  /**
	   * An optional boolean if the time picker is current visible by dialog or inline.
	   * If this is set, the `onVisibilityChange` function is required.
	   */
	  visible: (0, _controlled2.default)(_propTypes2.default.bool, 'onVisibilityChange', 'defaultVisible'),
	
	  /**
	   * An optional function to call when the date picker is opened in either a dialog, or
	   * inline. The callback will include the next state.
	   *
	   * ```js
	   * onVisibilityChange(!visible, e);
	   * ```
	   */
	  onVisibilityChange: _propTypes2.default.func,
	
	  /**
	   * Boolean if the time picker is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the dialog should be able to close if a keyboard user presses the escape key.
	   */
	  closeOnEsc: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the time is required.
	   *
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  required: _propTypes2.default.bool,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  block: _TextField2.default.propTypes.block,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  paddedBlock: _TextField2.default.propTypes.paddedBlock,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  active: _TextField2.default.propTypes.active,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  error: _TextField2.default.propTypes.error,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  floating: _TextField2.default.propTypes.floating,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  leftIconStateful: _TextField2.default.propTypes.leftIconStateful,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  rightIcon: _TextField2.default.propTypes.rightIcon,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  rightIconStateful: _TextField2.default.propTypes.rightIconStateful,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  customSize: _TextField2.default.propTypes.customSize,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  errorText: _TextField2.default.propTypes.errorText,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  helpText: _TextField2.default.propTypes.helpText,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  helpOnFocus: _TextField2.default.propTypes.helpOnFocus,
	
	  /**
	   * @see [TextField](/components/text-fields?tab=1)
	   */
	  inlineIndicator: _TextField2.default.propTypes.helpOnFocus,
	
	  /**
	   * An optional DOM Node to render the dialog into. The default is to render as the first child
	   * in the `body`.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the dialog should be rendered as the last child of the `renderNode` or `body` instead
	   * of the first.
	   */
	  lastChild: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the TimePicker should be read only. This will prevent the user from opening the picker
	   * and only display the current date in the text field.
	   */
	  readOnly: _propTypes2.default.bool,
	
	  isOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `visible` instead'),
	  initiallyOpen: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use `defaultVisible` instead'),
	  initialTimeMode: (0, _deprecated2.default)(_propTypes2.default.oneOf(['hour', 'minute']), 'Use `defaultTimeMode` instead')
	};
	TimePickerContainer.defaultProps = {
	  defaultTimeMode: 'hour',
	  icon: _react2.default.createElement(
	    _FontIcon2.default,
	    null,
	    'access_time'
	  ),
	  DateTimeFormat: _DateTimeFormat2.default, // eslint-disable-line object-shorthand
	  locales: typeof window !== 'undefined' ? window.navigator.userLanguage || window.navigator.language : 'en-US',
	  okLabel: 'Ok',
	  okPrimary: true,
	  cancelLabel: 'Cancel',
	  cancelPrimary: true,
	  closeOnEsc: true,
	  'aria-label': 'Select a time'
	};
	exports.default = TimePickerContainer;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _TimePeriods = __webpack_require__(217);
	
	var _TimePeriods2 = _interopRequireDefault(_TimePeriods);
	
	var _PickerControl = __webpack_require__(64);
	
	var _PickerControl2 = _interopRequireDefault(_PickerControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TimePickerHeader` component is used for rendering the
	 * current time for the `TimePicker` as well as switching between
	 * the different views for the time picker.
	 */
	var TimePickerHeader = function (_PureComponent) {
	  _inherits(TimePickerHeader, _PureComponent);
	
	  function TimePickerHeader(props) {
	    _classCallCheck(this, TimePickerHeader);
	
	    var _this = _possibleConstructorReturn(this, (TimePickerHeader.__proto__ || Object.getPrototypeOf(TimePickerHeader)).call(this, props));
	
	    _this._setHour = _this._setHour.bind(_this);
	    _this._setMinute = _this._setMinute.bind(_this);
	    return _this;
	  }
	
	  _createClass(TimePickerHeader, [{
	    key: '_setHour',
	    value: function _setHour() {
	      this.props.setTimeMode('hour');
	    }
	  }, {
	    key: '_setMinute',
	    value: function _setMinute() {
	      this.props.setTimeMode('minute');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          timeMode = _props.timeMode,
	          hours = _props.hours,
	          minutes = _props.minutes,
	          timePeriod = _props.timePeriod,
	          setTempTime = _props.setTempTime,
	          tempTime = _props.tempTime;
	
	      var timePeriods = void 0;
	      if (timePeriod) {
	        timePeriods = _react2.default.createElement(_TimePeriods2.default, { tempTime: tempTime, setTempTime: setTempTime, timePeriod: timePeriod });
	      }
	
	      return _react2.default.createElement(
	        'header',
	        { className: 'md-picker-header md-text-right' },
	        _react2.default.createElement(
	          _PickerControl2.default,
	          { onClick: this._setHour, active: timeMode === 'hour' },
	          _react2.default.createElement(
	            'h4',
	            { className: 'md-display-3' },
	            hours
	          )
	        ),
	        _react2.default.createElement(
	          _PickerControl2.default,
	          { onClick: this._setMinute, active: timeMode === 'minute' },
	          _react2.default.createElement(
	            'h4',
	            { className: 'md-display-3' },
	            minutes
	          )
	        ),
	        timePeriods
	      );
	    }
	  }]);
	
	  return TimePickerHeader;
	}(_react.PureComponent);
	
	TimePickerHeader.propTypes = {
	  /**
	   * The current time of the time picker.
	   */
	  tempTime: _propTypes2.default.instanceOf(Date).isRequired,
	
	  /**
	   * The current time type that is being changed.
	   */
	  timeMode: _propTypes2.default.oneOf(['hour', 'minute']).isRequired,
	
	  /**
	   * A function to update the time mode.
	   */
	  setTimeMode: _propTypes2.default.func.isRequired,
	
	  /**
	   * A function to update the time for the time picker.
	   */
	  setTempTime: _propTypes2.default.func.isRequired,
	
	  /**
	   * A formatted hours string for the user's locale. This
	   * would be '3' for en-US if the time was '3:15'
	   */
	  hours: _propTypes2.default.string.isRequired,
	
	  /**
	   * A formatted minutes string for the user's locale.
	   * This would be ':15' for en-US if the time was '3:15'.
	   */
	  minutes: _propTypes2.default.string.isRequired,
	
	  /**
	   * An optional time period to use for locales that use
	   * 12 hour clocks and AM/PM.
	   */
	  timePeriod: _propTypes2.default.string
	};
	exports.default = TimePickerHeader;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This is a component for rendering a year in the Date Picker's Year picker
	 * list.
	 */
	var Year = function (_PureComponent) {
	  _inherits(Year, _PureComponent);
	
	  function Year(props) {
	    _classCallCheck(this, Year);
	
	    var _this = _possibleConstructorReturn(this, (Year.__proto__ || Object.getPrototypeOf(Year)).call(this, props));
	
	    _this.state = { desktopActive: false };
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._setActive = _this._setActive.bind(_this);
	    _this._setInactive = _this._setInactive.bind(_this);
	    _this._setActiveFocus = _this._setActiveFocus.bind(_this);
	    return _this;
	  }
	
	  _createClass(Year, [{
	    key: '_setActiveFocus',
	    value: function _setActiveFocus(btn) {
	      if (btn && this.props.active) {
	        btn.focus();
	      }
	    }
	  }, {
	    key: '_setActive',
	    value: function _setActive() {
	      this.setState({ desktopActive: true });
	    }
	  }, {
	    key: '_setInactive',
	    value: function _setInactive() {
	      this.setState({ desktopActive: false });
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      this.props.onClick(this.props.year, e);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var desktopActive = this.state.desktopActive;
	      var _props = this.props,
	          active = _props.active,
	          className = _props.className,
	          year = _props.year;
	
	      return _react2.default.createElement(
	        'button',
	        {
	          type: 'button',
	          ref: this._setActiveFocus,
	          className: (0, _classnames2.default)('md-btn md-pointer--hover md-full-width md-year', {
	            'md-text': !active && !desktopActive,
	            'md-text--theme-primary': active || desktopActive,
	            'md-year--active': active
	          }, className),
	          onClick: this._handleClick
	        },
	        year
	      );
	    }
	  }]);
	
	  return Year;
	}(_react.PureComponent);
	
	Year.propTypes = {
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool.isRequired,
	  onClick: _propTypes2.default.func.isRequired,
	  year: _propTypes2.default.number.isRequired
	};
	exports.default = Year;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _Year = __webpack_require__(221);
	
	var _Year2 = _interopRequireDefault(_Year);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `YearPicker` component is the Year view in a `DatePicker`. This
	 * will display a list of years to select from within the given range.
	 */
	var YearPicker = function (_PureComponent) {
	  _inherits(YearPicker, _PureComponent);
	
	  function YearPicker(props) {
	    _classCallCheck(this, YearPicker);
	
	    var _this = _possibleConstructorReturn(this, (YearPicker.__proto__ || Object.getPrototypeOf(YearPicker)).call(this, props));
	
	    _this.state = _this._getYearRange(props);
	    _this._setContainer = _this._setContainer.bind(_this);
	    return _this;
	  }
	
	  _createClass(YearPicker, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.yearsDisplayed !== nextProps.yearsDisplayed) {
	        this.setState(this._getFullYear(nextProps));
	      }
	    }
	
	    /**
	     * Gets the current start and end years for the year picker.
	     *
	     * @param {Object} props - The current props to extract the year range from.
	     * @return {Object} an object containign the start and end years
	     */
	
	  }, {
	    key: '_getYearRange',
	    value: function _getYearRange(_ref) {
	      var minDate = _ref.minDate,
	          maxDate = _ref.maxDate,
	          yearsDisplayed = _ref.yearsDisplayed,
	          calendarTempDate = _ref.calendarTempDate;
	
	      var year = calendarTempDate.getFullYear();
	      var range = !minDate && !maxDate ? parseInt(yearsDisplayed / 2, 10) : yearsDisplayed;
	
	      var startYear = void 0;
	      var endYear = void 0;
	      if (minDate && maxDate) {
	        startYear = minDate.getFullYear();
	        endYear = maxDate.getFullYear();
	      } else if (!minDate && !maxDate) {
	        startYear = year - range;
	        endYear = year + range;
	        if (yearsDisplayed % 2 === 0) {
	          endYear -= 1;
	        }
	      } else if (!maxDate) {
	        startYear = minDate.getFullYear();
	        endYear = startYear + yearsDisplayed - 1;
	      } else {
	        endYear = maxDate.getFullYear();
	        startYear = endYear - yearsDisplayed + 1;
	      }
	
	      return { startYear: startYear, endYear: endYear };
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      if (container === null) {
	        return;
	      }
	
	      var offsetHeight = container.offsetHeight,
	          offsetWidth = container.offsetWidth;
	
	      var _container$querySelec = container.querySelector('.md-year--active'),
	          top = _container$querySelec.offsetTop,
	          height = _container$querySelec.offsetHeight;
	
	      // Portrait seems to be 3/4 of the way while landscape is about 1/2
	
	
	      if (offsetHeight > offsetWidth) {
	        container.scrollTop = top - offsetHeight * 3 / 4;
	      } else {
	        container.scrollTop = top - offsetHeight / 2 + height / 2;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          startYear = _state.startYear,
	          endYear = _state.endYear;
	
	
	      var currentYear = this.props.calendarTempDate.getFullYear();
	      var years = [];
	      for (var year = startYear; year <= endYear; year++) {
	        years.push(_react2.default.createElement(_Year2.default, {
	          key: year,
	          year: year,
	          active: year === currentYear,
	          onClick: this.props.onCalendarYearClick
	        }));
	      }
	
	      return _react2.default.createElement(
	        'section',
	        { className: 'md-picker-content md-picker-content--year', ref: this._setContainer },
	        _react2.default.createElement(
	          'ol',
	          { className: 'md-years' },
	          years
	        )
	      );
	    }
	  }]);
	
	  return YearPicker;
	}(_react.PureComponent);
	
	YearPicker.propTypes = {
	  calendarTempDate: _propTypes2.default.instanceOf(Date).isRequired,
	  onCalendarYearClick: _propTypes2.default.func.isRequired,
	  yearsDisplayed: _propTypes2.default.number.isRequired,
	  minDate: _propTypes2.default.instanceOf(Date),
	  maxDate: _propTypes2.default.instanceOf(Date)
	};
	exports.default = YearPicker;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TimePicker = exports.DatePicker = undefined;
	
	var _DatePickerContainer = __webpack_require__(215);
	
	var _DatePickerContainer2 = _interopRequireDefault(_DatePickerContainer);
	
	var _TimePickerContainer = __webpack_require__(219);
	
	var _TimePickerContainer2 = _interopRequireDefault(_TimePickerContainer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.DatePicker = _DatePickerContainer2.default;
	exports.TimePicker = _TimePickerContainer2.default;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _between = __webpack_require__(39);
	
	var _between2 = _interopRequireDefault(_between);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ROATE_DISTANCE = 360 * 1.75;
	var BASE_SIZE = 24; // font-icon font size
	
	/**
	 * The `CircularProgress` component is used to give visual feedback while your app
	 * is loading.
	 *
	 * There are two different types of circular progress bars: `Determinate` and `Indeterminate`.
	 *
	 * A `Determinate` circular progress bar should be used when you want to keep track of the current
	 * progress. An example would be downloading a file.
	 *
	 * An `Indeterminate` circular progress bar should be used when you can not keep track of the progress
	 * yourself. An example would be waiting for some API call to complete.
	 */
	
	var CircularProgress = function (_PureComponent) {
	  _inherits(CircularProgress, _PureComponent);
	
	  function CircularProgress() {
	    _classCallCheck(this, CircularProgress);
	
	    return _possibleConstructorReturn(this, (CircularProgress.__proto__ || Object.getPrototypeOf(CircularProgress)).apply(this, arguments));
	  }
	
	  _createClass(CircularProgress, [{
	    key: 'render',
	
	    /* eslint-disable max-len */
	    value: function render() {
	      var _props = this.props,
	          scale = _props.scale,
	          style = _props.style,
	          className = _props.className,
	          value = _props.value,
	          determinateDashoffset = _props.determinateDashoffset,
	          centered = _props.centered,
	          props = _objectWithoutProperties(_props, ['scale', 'style', 'className', 'value', 'determinateDashoffset', 'centered']);
	
	      var isDeterminate = typeof value === 'number';
	      var circleStyle = void 0;
	      var svgStyle = style;
	      if (isDeterminate) {
	        var rotate = 'rotate3d(0, 0, 1, ' + ROATE_DISTANCE / 100 * value + 'deg)';
	        circleStyle = {
	          strokeDashoffset: determinateDashoffset - determinateDashoffset / 100 * value
	        };
	
	        svgStyle = Object.assign({}, style, {
	          WebkitTransform: (0, _classnames2.default)(style.WebkitTransform, rotate),
	          MozTransform: (0, _classnames2.default)(style.MozTransform, rotate),
	          transform: (0, _classnames2.default)(style.transform, rotate)
	        });
	      }
	
	      var accessibilityProps = {
	        role: 'progressbar',
	        'aria-valuemin': 0,
	        'aria-valuemax': 100
	      };
	
	      if (isDeterminate) {
	        accessibilityProps['aria-valuenow'] = value;
	      }
	
	      return _react2.default.createElement(
	        'svg',
	        _extends({}, props, accessibilityProps, {
	          style: svgStyle,
	          className: (0, _classnames2.default)('md-progress md-progress--circular', {
	            'md-block-centered': centered,
	            'md-progress--circular-determinate': isDeterminate,
	            'md-progress--circular-indeterminate': !isDeterminate
	          }, className),
	          width: scale * BASE_SIZE,
	          height: scale * BASE_SIZE,
	          viewBox: '0 0 66 66'
	        }),
	        _react2.default.createElement('circle', {
	          className: (0, _classnames2.default)('md-circular-progress-path', {
	            'md-circular-progress-path--animated': !isDeterminate
	          }),
	          strokeWidth: '6',
	          strokeLinecap: 'round',
	          style: circleStyle,
	          cx: '33',
	          cy: '33',
	          r: '30'
	        })
	      );
	    }
	  }]);
	
	  return CircularProgress;
	}(_react.PureComponent);
	
	CircularProgress.propTypes = {
	  /**
	   * The `id` prop is required for accessibility concerns.
	   * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)
	   *
	   * > If the progressbar is describing the loading progress of a particular region of a page, the author
	   * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the
	   * region until it is finished loading. It is not possible for the user to alter the value of a progressbar
	   * because it is always readonly.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /* eslint-enable max-len */
	
	  /**
	   * A style object to apply to the svg. If this is a determinate `CircularProgress`,
	   * the `transform` (and vendor prefixes) styles will be merged with the current
	   * progress rotation.
	   */
	  style: _propTypes2.default.object.isRequired,
	
	  /**
	   * An optional className to apply to the svg.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The current value of the progress. If this value is defined, it will
	   * be converted to a determinate circular progress. The progress will not
	   * advance unless this value changes.
	   *
	   * This value should also be a number between 0 and 100.
	   */
	  value: (0, _between2.default)(_propTypes2.default.number, 0, 100),
	
	  /**
	   * The scale for the circular progress.
	   */
	  scale: _propTypes2.default.number.isRequired,
	
	  /**
	   * You probably don't want to update this. I'm not good at svg. This should
	   * match the scss variable `$md-circular-progress-stroke-dashoffset`.
	   */
	  determinateDashoffset: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the the progress should be centered in it's container.
	   */
	  centered: _propTypes2.default.bool
	};
	CircularProgress.defaultProps = {
	  style: {},
	  scale: 1,
	  determinateDashoffset: 187,
	  centered: true
	};
	exports.default = CircularProgress;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _between = __webpack_require__(39);
	
	var _between2 = _interopRequireDefault(_between);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * There are 3 different types of linear progress bars: `Determinate`,
	 * `Indeterminate`, and `Query Indeterminate`.
	 *
	 * A `Determinate` linear progress bar should be used when you can keep track of the
	 * progress and have a percentage complete you can work with. An example would be
	 * uploading/downloading a file.
	 *
	 * An `Indeterminate` linear progress bar should be used when you can not keep track
	 * of the progess yourself. An example might be waiting for an API call to complete.
	 *
	 * A `Query Indeterminate` linear progress bar is used when you are combining
	 * `Indeterminate` and `Determinate`. A Linear Progress component can be displayed
	 * as a query indeterminate progress bar by adding the prop `query={true}` to the
	 * component. Until a progress value is given, it will display the query linear
	 * progress animation. Afterwards, it will start the determinate animation of where
	 * you manually keep updating the value of the progress.
	 */
	var LinearProgress = function (_PureComponent) {
	  _inherits(LinearProgress, _PureComponent);
	
	  function LinearProgress() {
	    _classCallCheck(this, LinearProgress);
	
	    return _possibleConstructorReturn(this, (LinearProgress.__proto__ || Object.getPrototypeOf(LinearProgress)).apply(this, arguments));
	  }
	
	  _createClass(LinearProgress, [{
	    key: 'render',
	
	    /* eslint-disable max-len */
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          value = _props.value,
	          query = _props.query,
	          centered = _props.centered,
	          props = _objectWithoutProperties(_props, ['className', 'value', 'query', 'centered']);
	
	      var isDeterminate = typeof value === 'number';
	
	      var accessibilityProps = {
	        role: 'progressbar',
	        'aria-valuemin': 0,
	        'aria-valuemax': 100
	      };
	
	      var style = void 0;
	      if (isDeterminate) {
	        style = { width: value + '%' };
	        accessibilityProps['aria-valuenow'] = value;
	      }
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-progress md-progress--linear', { 'md-block-centered': centered }, className)
	        }),
	        _react2.default.createElement('div', _extends({}, accessibilityProps, {
	          style: style,
	          className: (0, _classnames2.default)('md-progress--linear-active', {
	            'md-progress--linear-query': query,
	            'md-progress--linear-determinate': isDeterminate,
	            'md-progress--linear-indeterminate': !isDeterminate
	          })
	        }))
	      );
	    }
	  }]);
	
	  return LinearProgress;
	}(_react.PureComponent);
	
	LinearProgress.propTypes = {
	  /**
	   * The `id` prop is required for accessibility concerns.
	   * [Progress Bar Role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role)
	   *
	   * > If the progressbar is describing the loading progress of a particular region of a page, the author
	   * __SHOULD__ use aria-describedby to point to the status, and set the aria-busy attribute to true on the
	   * region until it is finished loading. It is not possible for the user to alter the value of a progressbar
	   * because it is always readonly.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /* eslint-enable max-len */
	  /**
	   * An optional className to apply to the linear progress container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The current value of the progress. If this value is defined, it will
	   * be converted to a determinate circular progress. The progress will not
	   * advance unless this value changes.
	   *
	   * This value should also be a number between 0 and 100.
	   */
	  value: (0, _between2.default)(_propTypes2.default.number, 0, 100),
	
	  /**
	   * Boolean if this should be a query indeterminate progress bar.
	   */
	  query: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the Linear Progress should be centered. This
	   * will only work if the `max-width` style is set.
	   */
	  centered: _propTypes2.default.bool
	};
	LinearProgress.defaultProps = {
	  query: false
	};
	exports.default = LinearProgress;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CircularProgress = exports.LinearProgress = undefined;
	
	var _LinearProgress2 = __webpack_require__(225);
	
	var _LinearProgress3 = _interopRequireDefault(_LinearProgress2);
	
	var _CircularProgress2 = __webpack_require__(224);
	
	var _CircularProgress3 = _interopRequireDefault(_CircularProgress2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.LinearProgress = _LinearProgress3.default;
	exports.CircularProgress = _CircularProgress3.default;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	var _IconSeparator = __webpack_require__(26);
	
	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _TextFieldDivider = __webpack_require__(111);
	
	var _TextFieldDivider2 = _interopRequireDefault(_TextFieldDivider);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Field = function (_PureComponent) {
	  _inherits(Field, _PureComponent);
	
	  function Field(props) {
	    _classCallCheck(this, Field);
	
	    var _this = _possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).call(this, props));
	
	    _this.state = { droppingClassName: null };
	    _this._transitionNewValue = _this._transitionNewValue.bind(_this);
	    return _this;
	  }
	
	  _createClass(Field, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.value !== nextProps.value) {
	        this._transitionNewValue();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	    }
	  }, {
	    key: '_transitionNewValue',
	    value: function _transitionNewValue() {
	      var _this2 = this;
	
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	
	      this._timeout = setTimeout(function () {
	        _this2._timeout = setTimeout(function () {
	          _this2._timeout = null;
	
	          _this2.setState({ droppingClassName: null });
	        }, 300);
	
	        _this2.setState({ droppingClassName: _this2.state.droppingClassName + ' md-drop-enter-active ' });
	      }, _CSSTransitionGroupTick2.default);
	
	      this.setState({ droppingClassName: 'md-drop-enter' });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var droppingClassName = this.state.droppingClassName;
	
	      var _props = this.props,
	          id = _props.id,
	          name = _props.name,
	          value = _props.value,
	          active = _props.active,
	          below = _props.below,
	          style = _props.style,
	          className = _props.className,
	          label = _props.label,
	          disabled = _props.disabled,
	          placeholder = _props.placeholder,
	          activeLabel = _props.activeLabel,
	          iconChildren = _props.iconChildren,
	          iconClassName = _props.iconClassName,
	          lineDirection = _props.lineDirection,
	          required = _props.required,
	          error = _props.error,
	          toolbar = _props.toolbar,
	          props = _objectWithoutProperties(_props, ['id', 'name', 'value', 'active', 'below', 'style', 'className', 'label', 'disabled', 'placeholder', 'activeLabel', 'iconChildren', 'iconClassName', 'lineDirection', 'required', 'error', 'toolbar']);
	
	      var divider = void 0;
	      if (!below && !toolbar) {
	        divider = _react2.default.createElement(_TextFieldDivider2.default, {
	          key: 'text-divider',
	          active: active,
	          error: error,
	          lineDirection: lineDirection,
	          className: 'md-divider--select-field'
	        });
	      }
	
	      return _react2.default.createElement(
	        _AccessibleFakeInkedButton2.default,
	        _extends({}, props, {
	          role: 'listbox',
	          disabled: disabled,
	          component: _Paper2.default,
	          zDepth: below && active ? 1 : 0,
	          inkDisabled: !below,
	          style: style,
	          className: (0, _classnames2.default)('md-select-field', {
	            'md-text': activeLabel,
	            'md-text--secondary': !activeLabel && placeholder,
	            'md-text--disabled': disabled
	          }, className)
	        }),
	        _react2.default.createElement(
	          _IconSeparator2.default,
	          {
	            label: activeLabel || (label && active || !label) && placeholder || '',
	            labelClassName: droppingClassName,
	            className: (0, _classnames2.default)('md-text-field', {
	              'md-select-field--text-field': !below,
	              'md-select-field--btn': below,
	              'md-text-field--margin': !below && !label,
	              'md-text-field--floating-margin': label,
	              'md-text-field--toolbar': toolbar && !below
	            })
	          },
	          _react2.default.createElement(
	            _FontIcon2.default,
	            { iconClassName: iconClassName },
	            iconChildren
	          )
	        ),
	        divider,
	        _react2.default.createElement('input', {
	          key: 'value',
	          type: 'hidden',
	          id: id,
	          name: name,
	          value: value,
	          required: required
	        })
	      );
	    }
	  }]);
	
	  return Field;
	}(_react.PureComponent);
	
	Field.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  active: _propTypes2.default.bool,
	  below: _propTypes2.default.bool,
	  label: _propTypes2.default.node,
	  placeholder: _propTypes2.default.string,
	  iconChildren: _propTypes2.default.node,
	  iconClassName: _propTypes2.default.string,
	  activeLabel: _propTypes2.default.node,
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  name: _propTypes2.default.string,
	  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  lineDirection: _TextFieldDivider2.default.propTypes.lineDirection,
	  disabled: _propTypes2.default.bool,
	  required: _propTypes2.default.bool,
	  error: _propTypes2.default.bool,
	  toolbar: _propTypes2.default.bool
	};
	exports.default = Field;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _SelectField = __webpack_require__(65);
	
	var _SelectField2 = _interopRequireDefault(_SelectField);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _SelectField2.default;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _SelectionControl = __webpack_require__(29);
	
	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Checkbox` component is used for the selection of multiple options from a set.
	 */
	var Checkbox = function (_PureComponent) {
	  _inherits(Checkbox, _PureComponent);
	
	  function Checkbox() {
	    _classCallCheck(this, Checkbox);
	
	    return _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).apply(this, arguments));
	  }
	
	  _createClass(Checkbox, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          checkedIconChildren = _props.checkedIconChildren,
	          checkedIconClassName = _props.checkedIconClassName,
	          uncheckedIconChildren = _props.uncheckedIconChildren,
	          uncheckedIconClassName = _props.uncheckedIconClassName,
	          props = _objectWithoutProperties(_props, ['checkedIconChildren', 'checkedIconClassName', 'uncheckedIconChildren', 'uncheckedIconClassName']);
	
	      return _react2.default.createElement(_SelectionControl2.default, _extends({
	        type: 'checkbox',
	        checkedCheckboxIconChildren: checkedIconChildren,
	        checkedCheckboxIconClassName: checkedIconClassName,
	        uncheckedCheckboxIconChildren: uncheckedIconChildren,
	        uncheckedCheckboxIconClassName: uncheckedIconClassName,
	        __superSecreteProp: true
	      }, props));
	    }
	  }]);
	
	  return Checkbox;
	}(_react.PureComponent);
	
	Checkbox.propTypes = {
	  /**
	   * An id to use with the checkbox. This is used for accessibility and so that the label
	   * triggers the checkbox toggle.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
	
	  /**
	   * An optional style to apply to the checkbox's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the checkbox's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A label to display with the checkbox. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * Boolean if the label should appear before the checkbox icon.
	   */
	  labelBefore: _propTypes2.default.bool,
	
	  /**
	   * A name to use for the `Checkbox`. This is required for accessibility. If the checkbox is
	   * part of a group, it is recommended to make this a string ending in `[]` so that the
	   * value can be found from `document.querySelector('input[name="someName[]"]').value`.
	   */
	  name: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * Boolean if the `Checkbox` is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when the `checked` state of the `Checkbox` changes.
	   * The callback will incude the new checked state and the changeEvent.
	   *
	   * ```js
	   * onChange(changeEvent.target.checked, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * An optional value for the `Checkbox`. It is recommended to use a value though.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * Boolean if the `Checkbox` is checked by default.
	   */
	  defaultChecked: _propTypes2.default.bool,
	
	  /**
	   * A boolean if the `Checkbox` is currently checked. This will required the `onChange` prop
	   * to be defined.
	   */
	  checked: (0, _controlled2.default)(_propTypes2.default.bool, 'onChange', 'defaultChecked'),
	
	  /**
	   * Boolean if the `Checkbox` should be displayed inline.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * Any children to use for the checked `FontIcon` of the `Checkbox`.
	   */
	  checkedIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use for the checked `FontIcon` of the `Checkbox`.
	   */
	  checkedIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children to use for the unchecked `FontIcon` of the `Checkbox`.
	   */
	  uncheckedIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use for the unchecked `FontIcon` of the `Checkbox`.
	   */
	  uncheckedIconClassName: _propTypes2.default.string,
	
	  checkedIcon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `checkedIconChildren` and `checkedIconClassName` props instead'),
	  uncheckedIcon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `uncheckedIconChildren` and `uncheckedIconClassName` props instead')
	};
	Checkbox.defaultProps = {
	  checkedIconChildren: 'check_box',
	  uncheckedIconChildren: 'check_box_outline_blank'
	};
	exports.default = Checkbox;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _SelectionControl = __webpack_require__(29);
	
	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Radio` component is used for the selection of a single option from a set. Unfortunately
	 * the `Radio` component must always be controlled because of the `FontIcon` toggles and how
	 * the `radio` input type works. It is recommended to use the `SelectionControlGroup` component
	 * to manage the `radio`.
	 */
	var Radio = function (_PureComponent) {
	  _inherits(Radio, _PureComponent);
	
	  function Radio() {
	    _classCallCheck(this, Radio);
	
	    return _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).apply(this, arguments));
	  }
	
	  _createClass(Radio, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          checkedIconChildren = _props.checkedIconChildren,
	          checkedIconClassName = _props.checkedIconClassName,
	          uncheckedIconChildren = _props.uncheckedIconChildren,
	          uncheckedIconClassName = _props.uncheckedIconClassName,
	          props = _objectWithoutProperties(_props, ['checkedIconChildren', 'checkedIconClassName', 'uncheckedIconChildren', 'uncheckedIconClassName']);
	
	      return _react2.default.createElement(_SelectionControl2.default, _extends({
	        type: 'radio',
	        checkedRadioIconChildren: checkedIconChildren,
	        checkedRadioIconClassName: checkedIconClassName,
	        uncheckedRadioIconChildren: uncheckedIconChildren,
	        uncheckedRadioIconClassName: uncheckedIconClassName,
	        __superSecreteProp: true
	      }, props));
	    }
	  }]);
	
	  return Radio;
	}(_react.PureComponent);
	
	Radio.propTypes = {
	  /**
	   * An id to use with the radio. This is used for accessibility and so that the label
	   * triggers the radio toggle.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
	
	  /**
	   * An optional style to apply to the radio's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the radio's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A label to display with the radio. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node.isRequired,
	
	  /**
	   * Boolean if the label should appear before the radio icon.
	   */
	  labelBefore: _propTypes2.default.bool,
	
	  /**
	   * A name to use for the `Radio`. This is required for accessibility.
	   */
	  name: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * Boolean if the `Radio` is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * A function to call when the `Radio` triggers the `change` event. The `onChange` callback
	   * will include the current value of the checked `radio` and the change event.
	   *
	   * ```js
	   * onChange(changeEvent.target.value, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * The value for the `Radio` component.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]).isRequired,
	
	  /**
	   * A boolean if the `Radio` is currently checked.
	   */
	  checked: _propTypes2.default.bool.isRequired,
	
	  /**
	   * Boolean if the `Radio` should be displayed inline.
	   */
	  inline: _propTypes2.default.bool,
	
	  /**
	   * Any children to use for the checked `FontIcon` of the `Radio`.
	   */
	  checkedIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use for the checked `FontIcon` of the `Radio`.
	   */
	  checkedIconClassName: _propTypes2.default.string,
	
	  /**
	   * Any children to use for the unchecked `FontIcon` of the `Radio`.
	   */
	  uncheckedIconChildren: _propTypes2.default.node,
	
	  /**
	   * An icon className to use for the unchecked `FontIcon` of the `Radio`.
	   */
	  uncheckedIconClassName: _propTypes2.default.string,
	
	  checkedIcon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `checkedIconChildren` and `checkedIconClassName` props instead.'),
	  uncheckedIcon: (0, _deprecated2.default)(_propTypes2.default.node, 'Use the `uncheckedIconChildren` and `uncheckedIconClassName` props instead.')
	};
	Radio.defaultProps = {
	  checkedIconChildren: 'radio_button_checked',
	  uncheckedIconChildren: 'radio_button_unchecked'
	};
	exports.default = Radio;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _SelectionControlGroup = __webpack_require__(104);
	
	var _SelectionControlGroup2 = _interopRequireDefault(_SelectionControlGroup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-unused-vars, no-shadow */
	
	
	// This will still work, but generate a lot of warnings
	
	/**
	 * The `RadioGroup` component is a state manager for the `Radio` component.
	 * It will automatically inject the name, an onChange function, and
	 * determine whether a radio is checked.
	 *
	 * This is just a simple wrapper to reduce some prop redundancy.
	 */
	var RadioGroup = function (_PureComponent) {
	  _inherits(RadioGroup, _PureComponent);
	
	  function RadioGroup() {
	    _classCallCheck(this, RadioGroup);
	
	    return _possibleConstructorReturn(this, (RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).apply(this, arguments));
	  }
	
	  _createClass(RadioGroup, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          props = _objectWithoutProperties(_props, ['children']);
	
	      delete props.id;
	      delete props.defaultValue;
	
	      var _props2 = this.props,
	          id = _props2.id,
	          defaultValue = _props2.defaultValue;
	
	      if (!id) {
	        id = props.name + 'RadiosUniquePlease';
	      }
	
	      if (typeof props.value === 'undefined') {
	        if (typeof defaultValue === 'undefined') {
	          defaultValue = _react.Children.map(children, function (_ref) {
	            var value = _ref.props.value;
	            return value;
	          })[0];
	        }
	      }
	
	      var controls = _react.Children.map(children, function (radio) {
	        var props = Object.assign({}, radio.props);
	        delete props.checkedIcon;
	        delete props.uncheckedIcon;
	        delete props.checkedIconChildren;
	        delete props.checkedIconClassName;
	        delete props.uncheckedIconChildren;
	        delete props.uncheckedIconClassName;
	        return _extends({}, props);
	      });
	      return _react2.default.createElement(_SelectionControlGroup2.default, _extends({}, props, { id: id, defaultValue: defaultValue, type: 'radio', controls: controls }));
	    }
	  }]);
	
	  return RadioGroup;
	}(_react.PureComponent);
	
	RadioGroup.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  defaultValue: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.arrayOf(_propTypes2.default.node).isRequired,
	  inline: _propTypes2.default.bool,
	  onChange: _propTypes2.default.func,
	  name: _propTypes2.default.string,
	  value: _propTypes2.default.string,
	
	  _deprecated: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `SelectionControlGroup` component instead')
	};
	exports.default = RadioGroup;

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _SelectionControl = __webpack_require__(29);
	
	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Switch = function (_PureComponent) {
	  _inherits(Switch, _PureComponent);
	
	  function Switch() {
	    _classCallCheck(this, Switch);
	
	    return _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).apply(this, arguments));
	  }
	
	  _createClass(Switch, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          toggled = _props.toggled,
	          defaultToggled = _props.defaultToggled,
	          props = _objectWithoutProperties(_props, ['toggled', 'defaultToggled']);
	
	      if (typeof toggled !== 'undefined' && typeof props.checked === 'undefined') {
	        props.checked = toggled;
	      }
	
	      if (typeof defaultToggled !== 'undefined' && typeof props.defaultChecked === 'undefined') {
	        props.defaultChecked = defaultToggled;
	      }
	
	      return _react2.default.createElement(_SelectionControl2.default, _extends({ type: 'switch' }, props, { __superSecreteProp: true }));
	    }
	  }]);
	
	  return Switch;
	}(_react.PureComponent);
	
	Switch.propTypes = {
	  /**
	   * An id to use with the switch. This is used for accessibility and so that the label
	   * triggers the switch toggle.
	   */
	  id: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
	
	  /**
	   * An optional style to apply to the switch's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the switch's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * A label to display with the switch. This is required for accessibility and triggering
	   * the toggle.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * Boolean if the label should appear before the switch.
	   */
	  labelBefore: _propTypes2.default.bool,
	
	  /**
	   * A name to use for the `Switch`. This is required for accessibility since behind the scenes
	   * the `Switch` is renders as an `<input type="checkbox" />`.
	   */
	  name: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * Boolean if the `Switch` is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when the `checked` state of the `Switch` changes.
	   * The callback will incude the new checked state and the changeEvent.
	   *
	   * ```js
	   * onChange(changeEvent.target.checked, changeEvent);
	   * ```
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * An optional value for the `Switch`. It is recommended to use a value though.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * Boolean if the `Switch` is checked by default.
	   */
	  defaultChecked: _propTypes2.default.bool,
	
	  /**
	   * A boolean if the `Switch` is currently checked. This will required the `onChange` prop
	   * to be defined.
	   */
	  checked: (0, _controlled2.default)(_propTypes2.default.bool, 'onChange', 'defaultChecked'),
	
	  defaultToggled: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `defaultChecked` prop instead'),
	  toggled: (0, _deprecated2.default)(_propTypes2.default.bool, 'Use the `checked` prop instead')
	};
	exports.default = Switch;

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var disabledInteractions = ['mouse'];
	
	/**
	 * This is the `Thumb` for the switch. The `ink` in the Thumb is only active on touch and keyboard
	 * interactions, so the `AccessibleFakeInkButton` does not work for this case.
	 *
	 * This component really just is used for custom inkage.
	 */
	
	var SwitchThumb = function (_PureComponent) {
	  _inherits(SwitchThumb, _PureComponent);
	
	  function SwitchThumb() {
	    _classCallCheck(this, SwitchThumb);
	
	    return _possibleConstructorReturn(this, (SwitchThumb.__proto__ || Object.getPrototypeOf(SwitchThumb)).apply(this, arguments));
	  }
	
	  _createClass(SwitchThumb, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          disabled = _props.disabled,
	          checked = _props.checked,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['disabled', 'checked', 'className']);
	
	      return _react2.default.createElement(_AccessibleFakeInkedButton2.default, _extends({}, props, {
	        disabled: disabled,
	        disabledInteractions: disabledInteractions,
	        inkContainerClassName: 'md-ink-container--2x',
	        className: (0, _classnames2.default)('md-switch-thumb', {
	          'md-switch-thumb--disabled': disabled,
	          'md-switch-thumb--on': checked,
	          'md-switch-thumb--off': !checked
	        }, className)
	      }));
	    }
	  }]);
	
	  return SwitchThumb;
	}(_react.PureComponent);
	
	SwitchThumb.propTypes = {
	  className: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  checked: _propTypes2.default.bool,
	  onClick: _propTypes2.default.func
	};
	exports.default = SwitchThumb;

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _SwitchThumb = __webpack_require__(233);
	
	var _SwitchThumb2 = _interopRequireDefault(_SwitchThumb);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var SwitchTrack = function (_PureComponent) {
	  _inherits(SwitchTrack, _PureComponent);
	
	  function SwitchTrack() {
	    _classCallCheck(this, SwitchTrack);
	
	    return _possibleConstructorReturn(this, (SwitchTrack.__proto__ || Object.getPrototypeOf(SwitchTrack)).apply(this, arguments));
	  }
	
	  _createClass(SwitchTrack, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          disabled = _props.disabled,
	          checked = _props.checked,
	          className = _props.className,
	          props = _objectWithoutProperties(_props, ['disabled', 'checked', 'className']);
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, {
	          className: (0, _classnames2.default)('md-switch-track', {
	            'md-pointer--hover': !disabled,
	            'md-switch-track--disabled': disabled,
	            'md-switch-track--on': checked,
	            'md-switch-track--off': !checked
	          }, className)
	        }),
	        _react2.default.createElement(_SwitchThumb2.default, { disabled: disabled, checked: checked, onClick: props.onClick })
	      );
	    }
	  }]);
	
	  return SwitchTrack;
	}(_react.PureComponent);
	
	SwitchTrack.propTypes = {
	  className: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  checked: _propTypes2.default.bool
	};
	exports.default = SwitchTrack;

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Switch = exports.RadioGroup = exports.Radio = exports.Checkbox = exports.SelectionControlGroup = exports.SelectionControl = undefined;
	
	var _SelectionControl = __webpack_require__(29);
	
	var _SelectionControl2 = _interopRequireDefault(_SelectionControl);
	
	var _SelectionControlGroup2 = __webpack_require__(104);
	
	var _SelectionControlGroup3 = _interopRequireDefault(_SelectionControlGroup2);
	
	var _Checkbox2 = __webpack_require__(229);
	
	var _Checkbox3 = _interopRequireDefault(_Checkbox2);
	
	var _Radio2 = __webpack_require__(230);
	
	var _Radio3 = _interopRequireDefault(_Radio2);
	
	var _RadioGroup2 = __webpack_require__(231);
	
	var _RadioGroup3 = _interopRequireDefault(_RadioGroup2);
	
	var _Switch2 = __webpack_require__(232);
	
	var _Switch3 = _interopRequireDefault(_Switch2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _SelectionControl2.default;
	exports.SelectionControl = _SelectionControl2.default;
	exports.SelectionControlGroup = _SelectionControlGroup3.default;
	exports.Checkbox = _Checkbox3.default;
	exports.Radio = _Radio3.default;
	exports.RadioGroup = _RadioGroup3.default;
	exports.Switch = _Switch3.default;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _Drawer = __webpack_require__(60);
	
	var _Drawer2 = _interopRequireDefault(_Drawer);
	
	var _componentDeprecated = __webpack_require__(18);
	
	var _componentDeprecated2 = _interopRequireDefault(_componentDeprecated);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Sidebar = function (_PureComponent) {
	  _inherits(Sidebar, _PureComponent);
	
	  function Sidebar() {
	    _classCallCheck(this, Sidebar);
	
	    return _possibleConstructorReturn(this, (Sidebar.__proto__ || Object.getPrototypeOf(Sidebar)).apply(this, arguments));
	  }
	
	  _createClass(Sidebar, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          isOpen = _props.isOpen,
	          header = _props.header,
	          overlay = _props.overlay,
	          children = _props.children,
	          onOverlayClick = _props.onOverlayClick,
	          align = _props.align,
	          items = _props.items,
	          fixed = _props.fixed,
	          props = _objectWithoutProperties(_props, ['isOpen', 'header', 'overlay', 'children', 'onOverlayClick', 'align', 'items', 'fixed']);
	
	      delete props.responsive;
	
	      return _react2.default.createElement(
	        _Drawer2.default,
	        _extends({}, props, {
	          visible: isOpen,
	          onVisibilityChange: onOverlayClick,
	          navItems: items,
	          position: align,
	          overflay: overlay,
	          header: header,
	          inline: !fixed
	        }),
	        children
	      );
	    }
	  }]);
	
	  return Sidebar;
	}(_react.PureComponent);
	
	Sidebar.propTypes = {
	  deprecated: (0, _componentDeprecated2.default)('All the functionality and responsiveness of a `Sidebar` can be handled by the `Drawer` instead.' + ' Switch to the `Drawer` component instead.'),
	
	  /**
	   * Boolean if the overlay should appear when opened.
	   */
	  overlay: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the sidebar is visible and open.
	   */
	  isOpen: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the sidebar is fixed to the side of the page.
	   */
	  fixed: _propTypes2.default.bool,
	
	  /**
	   * Boolean if sidebar should be responsive.
	   */
	  responsive: _propTypes2.default.bool,
	
	  /**
	   * An optional header to display above the children or list items.
	   */
	  header: _propTypes2.default.node,
	
	  /**
	   * Any children to display after the generated list of items.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The transition name to use for the overlay.
	   */
	  transitionName: _propTypes2.default.string,
	
	  /**
	   * The enter timeout for the overlay transition.
	   */
	  transitionEnterTimeout: _propTypes2.default.number,
	
	  /**
	   * The leave timeout for the overlay transition.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number,
	
	  /**
	   * An optional function to call when the overlay is clicked.
	   * This should normally close the sidebar.
	   */
	  onOverlayClick: _propTypes2.default.func,
	
	  /**
	   * The position to align the sidebar of the screen to.
	   */
	  align: _propTypes2.default.oneOf(['left', 'right']),
	
	  /**
	   * A list of item props to convert into `ListItem`, `Divider`, or
	   * `Subheader` components.
	   *
	   * ##### Item Descriptions
	   */
	  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	    /**
	     * Boolean if this item is a divider.
	     */
	    divider: _propTypes2.default.bool,
	
	    /**
	     * Boolean if this item is a subheader.
	     */
	    subheader: _propTypes2.default.bool,
	
	    /**
	     * The primary text to display in a `ListItem` or a `Subheader`.
	     */
	    primaryText: _propTypes2.default.node
	  }))
	};
	Sidebar.defaultProps = {
	  align: 'left'
	};
	exports.default = Sidebar;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Sidebar = __webpack_require__(236);
	
	var _Sidebar2 = _interopRequireDefault(_Sidebar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Sidebar2.default;

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DiscreteValue = function (_PureComponent) {
	  _inherits(DiscreteValue, _PureComponent);
	
	  function DiscreteValue() {
	    _classCallCheck(this, DiscreteValue);
	
	    return _possibleConstructorReturn(this, (DiscreteValue.__proto__ || Object.getPrototypeOf(DiscreteValue)).apply(this, arguments));
	  }
	
	  _createClass(DiscreteValue, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          discrete = _props.discrete,
	          dragging = _props.dragging,
	          thumbLeft = _props.thumbLeft,
	          active = _props.active,
	          value = _props.value,
	          valuePrecision = _props.valuePrecision,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'discrete', 'dragging', 'thumbLeft', 'active', 'value', 'valuePrecision']);
	
	      if (!discrete || !active) {
	        return null;
	      }
	
	      var valueStr = value.toFixed(valuePrecision);
	      if (valuePrecision > 0) {
	        var _valueStr$split = valueStr.split('.'),
	            _valueStr$split2 = _slicedToArray(_valueStr$split, 2),
	            w = _valueStr$split2[0],
	            d = _valueStr$split2[1];
	
	        if (parseInt(d, 10) === 0) {
	          valueStr = w;
	        }
	      }
	      return _react2.default.createElement(
	        'span',
	        _extends({}, props, {
	          style: Object.assign({}, style, { left: thumbLeft }),
	          className: (0, _classnames2.default)('md-slider-discrete-value', className, {
	            'md-slider-discrete-value--dragging': dragging
	          })
	        }),
	        valueStr
	      );
	    }
	  }]);
	
	  return DiscreteValue;
	}(_react.PureComponent);
	
	DiscreteValue.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  discrete: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  value: _propTypes2.default.number.isRequired,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  valuePrecision: _propTypes2.default.number.isRequired
	};
	exports.default = DiscreteValue;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _keyCodes = __webpack_require__(6);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _isValidClick = __webpack_require__(67);
	
	var _isValidClick2 = _interopRequireDefault(_isValidClick);
	
	var _calculateValueDistance = __webpack_require__(272);
	
	var _calculateValueDistance2 = _interopRequireDefault(_calculateValueDistance);
	
	var _isWithinStep = __webpack_require__(273);
	
	var _isWithinStep2 = _interopRequireDefault(_isWithinStep);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _SliderLabel = __webpack_require__(240);
	
	var _SliderLabel2 = _interopRequireDefault(_SliderLabel);
	
	var _Track = __webpack_require__(243);
	
	var _Track2 = _interopRequireDefault(_Track);
	
	var _TextField = __webpack_require__(30);
	
	var _TextField2 = _interopRequireDefault(_TextField);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Slider` component is used to let users select a value from a continuous
	 * or discrete range of values by moving the slider thumb.
	 *
	 * When the user has finished dragging the Slider or increments the value by using
	 * the edit field/keyboard arrows, the value will be rounded to the nearest `step`.
	 */
	var Slider = function (_PureComponent) {
	  _inherits(Slider, _PureComponent);
	
	  function Slider(props) {
	    _classCallCheck(this, Slider);
	
	    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));
	
	    var min = props.min,
	        max = props.max,
	        step = props.step;
	
	    var scale = Math.abs(max - min) / step;
	
	    var value = typeof props.value !== 'undefined' ? props.value : props.defaultValue;
	
	    if (typeof value === 'undefined') {
	      value = min;
	    }
	
	    var distance = _this._calcDistance(value, min, max);
	    var thumbLeft = _this._calcLeft(distance);
	    var trackFillWidth = distance + '%';
	
	    if (typeof props.value !== 'undefined') {
	      value = undefined;
	    }
	
	    var trackWidth = void 0;
	    if (props.label && !props.editable && !props.leftIcon && !props.rightIcon) {
	      trackWidth = '100%';
	    }
	
	    _this.state = {
	      value: value,
	      scale: scale,
	      distance: distance,
	      thumbLeft: thumbLeft,
	      trackWidth: trackWidth,
	      trackFillWidth: trackFillWidth,
	      active: false,
	      dragging: false,
	      maskInked: false
	    };
	    _this._dragAdded = false;
	
	    _this._focusThumb = _this._focusThumb.bind(_this);
	    _this._updatePosition = _this._updatePosition.bind(_this);
	    _this._handleDragStart = _this._handleDragStart.bind(_this);
	    _this._handleDragMove = _this._handleDragMove.bind(_this);
	    _this._handleDragEnd = _this._handleDragEnd.bind(_this);
	    _this._handleFocus = _this._handleFocus.bind(_this);
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleIncrement = _this._handleIncrement.bind(_this);
	    _this._handleTextFieldChange = _this._handleTextFieldChange.bind(_this);
	    _this._blurOnOutsideClick = _this._blurOnOutsideClick.bind(_this);
	    _this._calcTrackWidth = _this._calcTrackWidth.bind(_this);
	    _this._animateDiscreteInk = _this._animateDiscreteInk.bind(_this);
	    _this._setTrack = _this._setTrack.bind(_this);
	    _this._setField = _this._setField.bind(_this);
	    _this._setNode = _this._setNode.bind(_this);
	    return _this;
	  }
	
	  _createClass(Slider, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _props = this.props,
	          leftIcon = _props.leftIcon,
	          rightIcon = _props.rightIcon,
	          label = _props.label,
	          min = _props.min,
	          max = _props.max,
	          step = _props.step;
	
	      if (leftIcon !== nextProps.leftIcon || rightIcon !== nextProps.rightIcon || label !== nextProps.label) {
	        this._calcTrackWidth(nextProps);
	      }
	
	      if (min !== nextProps.min || max !== nextProps.max || step !== nextProps.step) {
	        this.setState({ scale: Math.abs(nextProps.max - nextProps.min) / nextProps.step });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _state = this.state,
	          active = _state.active,
	          manualIncrement = _state.manualIncrement;
	
	      var fn = window[(active ? 'add' : 'remove') + 'EventListener'];
	      if (active !== prevState.active) {
	        fn('click', this._blurOnOutsideClick);
	
	        if (active) {
	          this._focusThumb();
	        }
	      }
	
	      var addDrag = active && !manualIncrement;
	      fn = window[(addDrag ? 'add' : 'remove') + 'EventListener'];
	      if (this._dragAdded !== addDrag) {
	        fn('mousemove', this._handleDragMove);
	        fn('mouseup', this._handleDragEnd);
	        fn('touchmove', this._handleDragMove);
	        fn('touchend', this._handleDragEnd);
	
	        this._dragAdded = addDrag;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var rm = window.removeEventListener;
	      rm('mousemove', this._handleMouseMove);
	      rm('mouseup', this._handleMouseUp);
	      rm('touchmove', this._handleDragMove);
	      rm('touchend', this._handleDragEnd);
	      rm('click', this._blurOnOutsideClick);
	
	      if (this._inkTimeout) {
	        clearTimeout(this._inkTimeout);
	      }
	
	      if (this._focusTimeout) {
	        clearTimeout(this._focusTimeout);
	      }
	    }
	
	    /**
	     * Gets the `left` position for the thumb based on the value given.
	     *
	     * @param {number} value - The current value.
	     * @return {string} the `calc` string.
	     */
	
	  }, {
	    key: '_calcLeft',
	    value: function _calcLeft(value) {
	      return 'calc(' + value + '% - 6px)';
	    }
	  }, {
	    key: '_calcDistance',
	    value: function _calcDistance(value, min, max) {
	      return Math.max(0, Math.min(100, (value - min) / (max - min) * 100));
	    }
	
	    /**
	     * Checks if the target is within the text field container.
	     *
	     * @param {Object} target - The event target.
	     * @return {Boolean} true if the target is in the text field.
	     */
	
	  }, {
	    key: '_isTextField',
	    value: function _isTextField(target) {
	      return this._textField && this._textField.contains(target);
	    }
	
	    /**
	     * Checks if a classList does not contain all the *bad* class names.
	     *
	     * @param {function} classList - The classList to check.
	     * @return {Boolean} true if the classList does not contain any of the *bad* class names.
	     */
	
	  }, {
	    key: '_isValidClassList',
	    value: function _isValidClassList(classList) {
	      var invalid = false;
	      ['md-slider-label', 'md-slider-ind', 'md-icon'].some(function (cl) {
	        invalid = classList.contains(cl);
	        return invalid;
	      });
	
	      return !invalid;
	    }
	
	    /**
	     * Updates the slider's thumb position and the slider's track fill width based
	     * on the thumb's current x position on the screen.
	     *
	     * The slider distance will be *noralized* when:
	     *  - The user does a quick jump
	     *  - The user stops dragging with the mouse
	     *  - The user drops dragging with touch
	     *
	     * If the position is not *normalized*, the `onDragChange` prop will be called
	     * with the new distance percentage, the value, and the move event.
	     *
	     * The `onChange` function will always be called.
	     *
	     * @param {Object} e - The current event to extract an x location from
	     * @param {bool} normalize - Boolean if the distance should be normalized
	     *    to the current scale of the slider.
	     */
	
	  }, {
	    key: '_updatePosition',
	    value: function _updatePosition(e, normalize) {
	      var x = (e.changedTouches ? e.changedTouches[0] : e).clientX;
	      var scale = this.state.scale;
	      var _props2 = this.props,
	          onChange = _props2.onChange,
	          onDragChange = _props2.onDragChange,
	          min = _props2.min,
	          max = _props2.max,
	          step = _props2.step;
	
	      var _calculateValueDistan = (0, _calculateValueDistance2.default)(x, this._track.offsetWidth, this._track.getBoundingClientRect().left, scale, step, min, max, normalize),
	          value = _calculateValueDistan.value,
	          distance = _calculateValueDistan.distance;
	
	      var isNewValue = (0, _getField2.default)(this.props, this.state, 'value') !== value;
	      if (onChange && isNewValue) {
	        onChange(value, e);
	      }
	
	      if (!normalize && onDragChange && (isNewValue || this.state.distance !== distance)) {
	        onDragChange(distance, value, e);
	      }
	
	      var state = {
	        value: value,
	        active: true,
	        distance: distance,
	        manualIncrement: false,
	        dragging: !normalize,
	        thumbLeft: this._calcLeft(distance),
	        trackFillWidth: distance + '%'
	      };
	
	      if (e.type === 'touchend' || e.type === 'mousedown') {
	        state.maskInked = false;
	      }
	
	      if (typeof this.props.value !== 'undefined') {
	        delete state.value;
	      }
	
	      this.setState(state);
	    }
	
	    /**
	     * This will either allow a user to start dragging the slider or quickly
	     * jump to a new value on the slider if the slider is not disabled.
	     *
	     * This will handle the `touchstart` and `mousedown` events.
	     *
	     * @param {Object} e - The touchstart or mousedown event.
	     */
	
	  }, {
	    key: '_handleDragStart',
	    value: function _handleDragStart(e) {
	      if (e.type === 'mousedown' && this.props.onMouseDown) {
	        this.props.onMouseDown(e);
	      } else if (e.type === 'touchstart' && this.props.onTouchStart) {
	        this.props.onTouchStart(e);
	      }
	
	      if (this.props.disabled || e.type === 'mousedown' && !(0, _isValidClick2.default)(e, 'mousedown') || e.target.className.match(/text-field/)) {
	        return;
	      }
	
	      var classList = e.target.classList;
	
	      var isDiscreteValue = classList.contains('md-slider-discrete-value');
	      if (classList.contains('md-slider-thumb') || isDiscreteValue) {
	        // Prevents text highlighting while dragging.
	        e.preventDefault();
	        this.setState({ dragging: true, active: true, manualIncrement: false, maskInked: false });
	      } else if (!this._isTextField(e.target) && this._isValidClassList(classList)) {
	        this._updatePosition(e, true);
	      }
	    }
	  }, {
	    key: '_setNode',
	    value: function _setNode(node) {
	      this._node = (0, _reactDom.findDOMNode)(node);
	    }
	  }, {
	    key: '_setTrack',
	    value: function _setTrack(track) {
	      this._track = (0, _reactDom.findDOMNode)(track);
	    }
	  }, {
	    key: '_setField',
	    value: function _setField(field) {
	      this._field = (0, _reactDom.findDOMNode)(field);
	      this._calcTrackWidth(this.props);
	    }
	  }, {
	    key: '_handleDragMove',
	    value: function _handleDragMove(e) {
	      if (this.props.disabled || !this.state.dragging) {
	        return;
	      }
	
	      // Stops the text highlighting while dragging
	      e.preventDefault();
	
	      this._updatePosition(e, false);
	    }
	  }, {
	    key: '_handleDragEnd',
	    value: function _handleDragEnd(e) {
	      if (!this.state.dragging || this.props.disabled || e.type === 'mouseup' && !(0, _isValidClick2.default)(e)) {
	        return;
	      }
	
	      this._updatePosition(e, true);
	    }
	
	    /**
	     * This will set the active state of the slider to false if the user
	     * clicks outside of the slider's container.
	     *
	     * @param {Object} e - The window's click event.
	     */
	
	  }, {
	    key: '_blurOnOutsideClick',
	    value: function _blurOnOutsideClick(e) {
	      if (this.state.dragging && !this.state.manualIncrement || this.props.disabled) {
	        return;
	      }
	
	      if (!this._node.contains(e.target)) {
	        this.setState({ active: false, maskInked: false });
	      }
	    }
	
	    /**
	     * Updates the slider with the `step` prop and calls the `onChange`
	     * function with the new value.
	     *
	     * @param {number} incrementedValue - The newly incremented value of the slider.
	     * @param {Object} e - Either the text field's change event, mouse down event, or
	     *    touch start event.
	     * @param {bool} disableTransition - Boolean if the jump's transition should be disabled.
	     */
	
	  }, {
	    key: '_handleIncrement',
	    value: function _handleIncrement(incrementedValue, e, disableTransition) {
	      var _props3 = this.props,
	          onChange = _props3.onChange,
	          min = _props3.min,
	          max = _props3.max,
	          discrete = _props3.discrete;
	
	
	      var value = Math.max(min, Math.min(max, incrementedValue));
	      var distance = this._calcDistance(value, min, max);
	
	      if (onChange) {
	        onChange(value, e);
	      }
	
	      var state = {
	        distance: distance,
	        manualIncrement: true,
	        thumbLeft: this._calcLeft(distance),
	        trackFillWidth: distance + '%',
	        dragging: Math.abs(this.state.distance - distance) < 2 && disableTransition
	      };
	
	      if (typeof this.props.value === 'undefined') {
	        state.value = value;
	      }
	
	      if (e.type === 'keydown' && !discrete) {
	        state.maskInked = true;
	      }
	
	      this.setState(state);
	    }
	  }, {
	    key: '_handleTextFieldChange',
	    value: function _handleTextFieldChange(newValue, e) {
	      this._handleIncrement(newValue, e, false);
	    }
	
	    /**
	     * This will increment the Slider's value by the `step` prop. if the left or
	     * right key arrow is pressed.
	     *
	     * @param {Object} e - the keydown event.
	     */
	
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      var key = e.which || e.keyCode;
	      var _props4 = this.props,
	          min = _props4.min,
	          max = _props4.max,
	          step = _props4.step,
	          disabled = _props4.disabled;
	
	      if (disabled) {
	        return;
	      }
	
	      if (key === _keyCodes.TAB) {
	        this.setState({ active: false, maskInked: false });
	        return;
	      } else if (key !== _keyCodes.LEFT && key !== _keyCodes.RIGHT) {
	        return;
	      }
	
	      var nextValue = (0, _getField2.default)(this.props, this.state, 'value');
	      nextValue = Math.max(min, Math.min((key === _keyCodes.LEFT ? -step : step) + nextValue, max));
	
	      this._handleIncrement(nextValue, e, true);
	    }
	
	    /**
	     * This function will animate the discrete Slider's ink if it gains focus
	     * by a tab event.
	     *
	     * @param {Object} e - the key up event.
	     */
	
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      if ((e.which || e.keyCode) !== _keyCodes.TAB) {
	        return;
	      }
	
	      if (this.props.discrete) {
	        this._animateDiscreteInk();
	      }
	
	      this.setState({ maskInked: true });
	    }
	  }, {
	    key: '_handleFocus',
	    value: function _handleFocus() {
	      this.setState({ active: true });
	    }
	
	    /**
	     * For some reason the width of the track gets set to 0 if the `Slider` has a label and
	     * does not include the `leftIcon`, `rightIcon`, and is not `editable` OR it is
	     * `editable` and does not include the `leftIcon`. All other cases the width works
	     * correctly.
	     *
	     * This function just checks these things, and sets the width accordingly.
	     */
	
	  }, {
	    key: '_calcTrackWidth',
	    value: function _calcTrackWidth(props) {
	      var editable = props.editable,
	          leftIcon = props.leftIcon,
	          rightIcon = props.rightIcon,
	          inputWidth = props.inputWidth,
	          label = props.label;
	
	
	      if (!label) {
	        this.setState({ trackWidth: null });
	        return;
	      }
	
	      var trackWidth = null;
	      if (!leftIcon && !rightIcon && !editable) {
	        trackWidth = '100%';
	      } else if (editable && !leftIcon) {
	        var cs = window.getComputedStyle(this._textField);
	        var pl = parseInt(cs.getPropertyValue('padding-left'), 10);
	        var ml = parseInt(cs.getPropertyValue('margin-left'), 10);
	
	        trackWidth = pl + ml + inputWidth;
	      }
	
	      if (trackWidth) {
	        this.setState({ trackWidth: trackWidth });
	      }
	    }
	
	    /**
	     * The ink for a Discrete slider is only visible for a short time on initial
	     * focus. This function will handle the in/out transitions.
	     */
	
	  }, {
	    key: '_animateDiscreteInk',
	    value: function _animateDiscreteInk() {
	      var _this2 = this;
	
	      var wait = this.props.discreteInkTransitionTime;
	      if (this._inkTimeout) {
	        clearTimeout(this._inkTimeout);
	      }
	
	      this._inkTimeout = setTimeout(function () {
	        _this2.setState({ leaving: true, maskInked: false });
	
	        _this2._inkTimeout = setTimeout(function () {
	          _this2._inkTimeout = null;
	          _this2.setState({ leaving: false });
	        }, wait);
	      }, wait);
	    }
	
	    /**
	     * This is a helper function for focusing the Slider's thumb comopnent. There
	     * is a short delay because the body sometimes gets focused immediately after
	     * if there is no timeout..
	     */
	
	  }, {
	    key: '_focusThumb',
	    value: function _focusThumb() {
	      var _this3 = this;
	
	      if (this._focusTimeout) {
	        clearTimeout(this._focusTimeout);
	      }
	
	      this._focusTimeout = setTimeout(function () {
	        _this3._focusTimeout = null;
	        if (!_this3._thumb) {
	          _this3._thumb = _this3._node.querySelector('.md-slider-thumb');
	        }
	
	        _this3._thumb.focus();
	      }, 100);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state2 = this.state,
	          dragging = _state2.dragging,
	          active = _state2.active,
	          thumbLeft = _state2.thumbLeft,
	          trackFillWidth = _state2.trackFillWidth,
	          maskInked = _state2.maskInked,
	          trackWidth = _state2.trackWidth,
	          scale = _state2.scale,
	          distance = _state2.distance;
	
	      var _props5 = this.props,
	          id = _props5.id,
	          min = _props5.min,
	          max = _props5.max,
	          disabled = _props5.disabled,
	          className = _props5.className,
	          trackStyle = _props5.trackStyle,
	          trackClassName = _props5.trackClassName,
	          thumbStyle = _props5.thumbStyle,
	          thumbClassName = _props5.thumbClassName,
	          discreteValueStyle = _props5.discreteValueStyle,
	          discreteValueClassName = _props5.discreteValueClassName,
	          label = _props5.label,
	          editable = _props5.editable,
	          step = _props5.step,
	          inputWidth = _props5.inputWidth,
	          leftIcon = _props5.leftIcon,
	          rightIcon = _props5.rightIcon,
	          discrete = _props5.discrete,
	          discreteTicks = _props5.discreteTicks,
	          tickWidth = _props5.tickWidth,
	          valuePrecision = _props5.valuePrecision,
	          props = _objectWithoutProperties(_props5, ['id', 'min', 'max', 'disabled', 'className', 'trackStyle', 'trackClassName', 'thumbStyle', 'thumbClassName', 'discreteValueStyle', 'discreteValueClassName', 'label', 'editable', 'step', 'inputWidth', 'leftIcon', 'rightIcon', 'discrete', 'discreteTicks', 'tickWidth', 'valuePrecision']);
	
	      delete props.value;
	      delete props.onChange;
	      delete props.onDragChange;
	      delete props.discreteInkTransitionTime;
	
	      // delete deprecated
	      delete props.stepPrecision;
	
	      var value = (0, _getField2.default)(this.props, this.state);
	      var rightChildren = rightIcon;
	      if (editable) {
	        rightChildren = _react2.default.createElement(_TextField2.default, {
	          id: id + 'Editor',
	          ref: this._setField,
	          type: 'number',
	          value: value,
	          inputClassName: 'md-slider-editor',
	          style: { width: inputWidth },
	          onChange: this._handleTextFieldChange,
	          step: step
	        });
	      }
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, {
	          ref: this._setNode,
	          className: (0, _classnames2.default)('md-slider-container', className, {
	            'md-pointer--hover': !disabled
	          }),
	          onMouseDown: this._handleDragStart,
	          onTouchStart: this._handleDragStart
	        }),
	        _react2.default.createElement(
	          _SliderLabel2.default,
	          { htmlFor: id },
	          label
	        ),
	        _react2.default.createElement('input', {
	          id: id,
	          type: 'range',
	          className: 'md-slider-input',
	          readOnly: true,
	          min: min,
	          max: max,
	          value: value,
	          disabled: disabled
	        }),
	        leftIcon,
	        _react2.default.createElement(_Track2.default, {
	          ref: this._setTrack,
	          style: Object.assign({}, trackStyle, { width: trackWidth }),
	          className: (0, _classnames2.default)(trackClassName, {
	            'md-slider-track--ind-left': leftIcon,
	            'md-slider-track--ind-right': rightIcon
	          }),
	          thumbStyle: thumbStyle,
	          thumbClassName: thumbClassName,
	          discreteValueStyle: discreteValueStyle,
	          discreteValueClassName: discreteValueClassName,
	          active: active,
	          dragging: dragging,
	          disabled: disabled,
	          thumbLeft: thumbLeft,
	          trackFillWidth: trackFillWidth,
	          on: !disabled && distance > 0,
	          off: distance === 0,
	          maskInked: maskInked,
	          onThumbKeyUp: this._handleKeyUp,
	          onThumbKeyDown: this._handleKeyDown,
	          onThumbFocus: this._handleFocus,
	          discrete: discrete,
	          tickWidth: tickWidth,
	          discreteTicks: discreteTicks,
	          valuePrecision: valuePrecision,
	          step: step,
	          scale: scale,
	          value: value
	        }),
	        rightChildren
	      );
	    }
	  }]);
	
	  return Slider;
	}(_react.PureComponent);
	
	Slider.propTypes = {
	  /**
	   * An id to use for the `Slider`. This is required if the `label` prop
	   * is defined.
	   */
	  id: function id(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    if (typeof props.label === 'undefined') {
	      return _propTypes2.default.string.apply(_propTypes2.default, [props, propName, component].concat(others));
	    }
	
	    return (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])).apply(undefined, [props, propName, component].concat(others));
	  },
	
	  /**
	   * An optional style to apply to the slider's container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the slider's container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the slider's thumb.
	   */
	  thumbStyle: _propTypes2.default.object,
	
	  /**
	   * An optionl className to apply to the slider's thumb.
	   */
	  thumbClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the slider's track.
	   */
	  trackStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the slider's track.
	   */
	  trackClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the slider's track fill.
	   */
	  trackFillStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the slider's track fill.
	   */
	  trackFillClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to a discrete slider's value.
	   */
	  discreteValueStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to a discrete slider's value.
	   */
	  discreteValueClassName: _propTypes2.default.string,
	
	  /**
	   * The default value for the slider. This number must be between the min and max values if
	   * defined. If this is undefined, it's value will be set to the min value.
	   */
	  defaultValue: _propTypes2.default.number,
	
	  /**
	   * The min value for the slider. The min and max values must be on the same
	   * side of 0. It is currently invalid to have a range from negative to positive.
	   */
	  min: function min(props, propName, component) {
	    for (var _len2 = arguments.length, others = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      others[_key2 - 3] = arguments[_key2];
	    }
	
	    var _PropTypes$number;
	
	    var err = (_PropTypes$number = _propTypes2.default.number).isRequired.apply(_PropTypes$number, [props, propName, component].concat(others));
	    if (!err) {
	      var min = props[propName];
	      var name = void 0;
	      if (min > props.value) {
	        name = 'value';
	      } else if (typeof props.defaultValue !== 'undefined' && min > props.defaultValue) {
	        name = 'defaultValue';
	      }
	
	      if (name) {
	        err = new Error('The \'' + propName + '\' prop must be less than or equal to the \'' + name + '\' prop for the \'' + component + '\' but ' + ('received: \'min: ' + min + '\' and \'' + name + ': ' + props[name] + '\''));
	      } else if (min < 0 && props.max > 0) {
	        err = new Error('The \'' + component + '\' is unable to have a range spanning from negative to positive. The range ' + 'must either be all negative or all postive.');
	      }
	    }
	
	    return err;
	  },
	
	  /**
	   * The max value for the slider. The max value must be greater than the min value
	   * and the min and max values must be on the same side of 0. It is currently
	   * invalid to have a range from negative to positive.
	   */
	  max: function max(props, propName, component) {
	    for (var _len3 = arguments.length, others = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
	      others[_key3 - 3] = arguments[_key3];
	    }
	
	    var _PropTypes$number2;
	
	    var err = (_PropTypes$number2 = _propTypes2.default.number).isRequired.apply(_PropTypes$number2, [props, propName, component].concat(others));
	    if (!err) {
	      var max = props[propName];
	      var name = void 0;
	      if (max < props.value) {
	        name = 'value';
	      } else if (max < props.defaultValue) {
	        name = 'defaultValue';
	      }
	
	      if (name) {
	        err = new Error('The \'' + propName + '\' prop must be greater than or equal to the \'' + name + '\' prop for the \'' + component + '\' but ' + ('received: \'' + propName + ': ' + max + '\' and \'' + name + ': ' + props[name] + '\''));
	      }
	    }
	
	    return err;
	  },
	
	  /**
	   * Boolean if the slider is disabled.
	   */
	  disabled: _propTypes2.default.bool,
	
	  /**
	   * An optional value for the slider. This will make the component controlled
	   * and require the `onChange` function.
	   */
	  value: (0, _controlled2.default)(_propTypes2.default.number, 'onChange'),
	
	  /**
	   * This is called when the slider's value gets updated. The value can be updated
	   * by one of the following:
	   *
	   * - Clicking a section of the slider
	   * - Dragging the slider with the mouse
	   * - Touching a section of the slider.
	   * - Dragging the slider with touch
	   * - Using the text field to update the value either by typing or incrementing
	   * - Using the left or right arrow keys to increment/decrement the value.
	   *
	   * The callback for this function is as follows:
	   *
	   * ```js
	   * onChange(value, event);
	   * ```
	   *
	   * where the event can either be:
	   * - a touch start event
	   * - a touch move event
	   * - a touch end event
	   * - a mouse down event
	   * - a mouse move event
	   * - a mouse up event
	   * - a key up event
	   * - a key down event
	   */
	  onChange: _propTypes2.default.func,
	
	  /**
	   * This is only called when the user is dragging the slider with either
	   * the mouse or touch. Probably not really usefull. It just includes the
	   * new drag percentage while the `onChange` does not.
	   *
	   * The callback for this function is defined as:
	   *
	   * ```js
	   * onDragChange(dragPercentage, value, (touchMove || mouseMove) event);
	   * ```
	   */
	  onDragChange: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the slider's container has
	   * the mousedown event.
	   */
	  onMouseDown: _propTypes2.default.func,
	
	  /**
	   * An optional function to call when the slider's container has
	   * the touchstart event.
	   */
	  onTouchStart: _propTypes2.default.func,
	
	  /**
	   * An optional icon or letter to place to the left of the slider.
	   * if you want to use a non-font icon or a letter, use the `md-slider-ind`
	   * className on your element.
	   */
	  leftIcon: _propTypes2.default.element,
	
	  /**
	   * An optional icon or letter to place to the right of the slider.
	   * if you want to use a non-font icon or a letter, use the `md-slider-ind`
	   * className on your element.
	   *
	   * > NOTE: This can not be used if the `editable` prop is true.
	   */
	  rightIcon: _propTypes2.default.element,
	
	  /**
	   * An optional label to display above the slider. If this prop
	   * is set, then an `id` must also be given.
	   */
	  label: _propTypes2.default.node,
	
	  /**
	   * The incremental amount when the user hits left or right with the
	   * keyboard arrows, or the user hits the up or down buttons in the
	   * editable number text field. This number must be a number between
	   * 0 and 1 or a whole number above 1.
	   */
	  step: function step(props, propName, component) {
	    for (var _len4 = arguments.length, others = Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
	      others[_key4 - 3] = arguments[_key4];
	    }
	
	    var _PropTypes$number3;
	
	    var err = (_PropTypes$number3 = _propTypes2.default.number).isRequired.apply(_PropTypes$number3, [props, propName, component].concat(others));
	    if (!err) {
	      var step = props[propName];
	      if (step <= 0) {
	        err = new Error('The \'' + propName + '\' for the \'' + component + '\' must be a number greater than 0. The ' + ('current value is \'' + step + '\'.'));
	      } else {
	        var valueDefined = typeof props.value !== 'undefined';
	        var defaultDefined = typeof props.defaultValue !== 'undefined';
	        var value = props.value;
	        if (!valueDefined) {
	          value = defaultDefined ? props.defaultValue : props.min;
	        }
	
	        var name = void 0;
	        if (!(0, _isWithinStep2.default)(value, step)) {
	          if (valueDefined) {
	            name = 'value';
	          } else if (defaultDefined) {
	            name = 'defaultValue';
	          } else {
	            name = 'min';
	          }
	        }
	
	        if (name) {
	          err = new Error('The \'' + name + '\' prop on \'' + component + '\' should be a number divisible by the ' + ('\'' + propName + '\' prop. The current value is \'' + props[name] + '\' and the \'' + propName + '\' ') + ('is \'' + step + '\'.'));
	        }
	      }
	    }
	
	    return err;
	  },
	
	  /**
	   * Boolean if the Slider should be editable. This will place a number text field
	   * to the right of the slider. If this prop is set to `true`, the `rightIcon`
	   * prop can not be set.
	   */
	  editable: function editable(props, propName, component) {
	    for (var _len5 = arguments.length, others = Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {
	      others[_key5 - 3] = arguments[_key5];
	    }
	
	    var _PropTypes$bool;
	
	    if (typeof props[propName] === 'undefined') {
	      return null;
	    }
	
	    var err = (_PropTypes$bool = _propTypes2.default.bool).isRequired.apply(_PropTypes$bool, [props, propName, component].concat(others));
	    if (!err && typeof props.rightIcon !== 'undefined') {
	      err = new Error('The \'' + component + '\' is unable to be \'editable\' and include a \'rightIcon\'.');
	    }
	
	    return err;
	  },
	
	  /**
	   * The width for the number text field when the Slider is editable.
	   */
	  inputWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	
	  /**
	   * Boolean if the slider should be discrete. This will update the slider to include a
	   * _balloon_ with the current value inside. It will also not allow the `Slider` to be
	   * editable.
	   */
	  discrete: function discrete(props, propName, component) {
	    for (var _len6 = arguments.length, others = Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
	      others[_key6 - 3] = arguments[_key6];
	    }
	
	    if (typeof props[propName] === 'undefined') {
	      return null;
	    }
	
	    var err = _propTypes2.default.bool.apply(_propTypes2.default, [props, propName, component].concat(others));
	    if (!err && typeof props.editable !== 'undefined') {
	      err = new Error('The \'' + component + '\' cannot be \'discrete\' and \'editable\'. Please choose one.');
	    }
	
	    return err;
	  },
	
	  /**
	   * The width of each tick for a discrete slider with ticks. This can either be a number
	   * which gets converted to `px`, or a valid css unit.
	   */
	  tickWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	
	  /**
	   * This is number divisible by the total number of values included in the Slider. Every
	   * value that is divisible by this number will include a tick mark. It is common recommended
	   * to have this equal to the `step` prop.
	   *
	   * This prop is completely optional.
	   */
	  discreteTicks: function discreteTicks(props, propName, component) {
	    for (var _len7 = arguments.length, others = Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {
	      others[_key7 - 3] = arguments[_key7];
	    }
	
	    if (typeof props[propName] === 'undefined') {
	      return null;
	    }
	
	    var err = _propTypes2.default.number.apply(_propTypes2.default, [props, propName, component].concat(others));
	    if (!err) {
	      var min = props.min,
	          max = props.max,
	          step = props.step;
	
	      var range = Math.abs(max - min);
	
	      if (range / props[propName] % 1 !== 0) {
	        err = new Error('The \'' + propName + '\' must be a number divisible by the range set by the \'min\' and ' + ('\'max\' props. The current range is \'' + range + '\' by including the min: \'' + min + '\' and ') + ('max: \'' + max + '\' values. The current value of \'' + propName + '\' is \'' + props[propName] + '\'.'));
	      } else if (props[propName] % step !== 0) {
	        err = new Error('The \'step\' prop must be a number divisible by the \'' + propName + '\'. It is common to have ' + ('them as the same value. The current \'step\' is \'' + step + '\' and the \'' + propName + '\' is \'' + props[propName] + '\'.'));
	      }
	    }
	
	    return err;
	  },
	
	  /**
	   * The transition time for a discrete Slider's keyboard focus ink. This should match the
	   * `md-slider-discrete-ink-transition-time` value in your SCSS. This is used because
	   * the ink is only visible temporarily for a discrete slider when keyboard focusing.
	   */
	  discreteInkTransitionTime: _propTypes2.default.number.isRequired,
	
	  /**
	   * The precision that the value should be rounded to when the Slider is updated. This
	   * needs to be a whole number greater than or equal to 0.
	   */
	  valuePrecision: function valuePrecision(props, propName, component) {
	    for (var _len8 = arguments.length, others = Array(_len8 > 3 ? _len8 - 3 : 0), _key8 = 3; _key8 < _len8; _key8++) {
	      others[_key8 - 3] = arguments[_key8];
	    }
	
	    var _PropTypes$number4;
	
	    var err = (_PropTypes$number4 = _propTypes2.default.number).isRequired.apply(_PropTypes$number4, [props, propName, component].concat(others));
	    if (!err) {
	      var precision = props[propName];
	
	      if (precision % 1 !== 0 || precision < 0) {
	        err = new Error('The \'' + propName + '\' must be a positive whole number or 0 on the \'' + component + '\'. ' + ('The current \'' + propName + '\' is \'' + precision + '\''));
	      }
	    }
	
	    return err;
	  },
	
	  stepPrecision: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `step` and `valuePreceision` instead')
	};
	Slider.defaultProps = {
	  min: 0,
	  max: 100,
	  step: 1,
	  inputWidth: 40,
	  tickWidth: 6,
	  discreteInkTransitionTime: 300,
	  valuePrecision: 0
	};
	exports.default = Slider;

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This is just the label component for the slider. It will
	 * return null if there are no children to display.
	 */
	var SliderLabel = function (_PureComponent) {
	  _inherits(SliderLabel, _PureComponent);
	
	  function SliderLabel() {
	    _classCallCheck(this, SliderLabel);
	
	    return _possibleConstructorReturn(this, (SliderLabel.__proto__ || Object.getPrototypeOf(SliderLabel)).apply(this, arguments));
	  }
	
	  _createClass(SliderLabel, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          htmlFor = _props.htmlFor,
	          props = _objectWithoutProperties(_props, ['children', 'className', 'htmlFor']);
	
	      if (!children) {
	        return null;
	      }
	
	      return _react2.default.createElement(
	        'label',
	        _extends({}, props, {
	          htmlFor: htmlFor,
	          className: (0, _classnames2.default)('md-slider-label md-text', className)
	        }),
	        children
	      );
	    }
	  }]);
	
	  return SliderLabel;
	}(_react.PureComponent);
	
	SliderLabel.propTypes = {
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  htmlFor: function htmlFor(props, propName, component) {
	    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      others[_key - 3] = arguments[_key];
	    }
	
	    var _PropTypes$string;
	
	    if (typeof props.children === 'undefined') {
	      return null;
	    }
	
	    return (_PropTypes$string = _propTypes2.default.string).isRequired.apply(_PropTypes$string, [props, propName, component].concat(others));
	  }
	};
	exports.default = SliderLabel;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _AccessibleFakeButton = __webpack_require__(45);
	
	var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Thumb` component is the little ball for the slider.
	 */
	var Thumb = function (_PureComponent) {
	  _inherits(Thumb, _PureComponent);
	
	  function Thumb() {
	    _classCallCheck(this, Thumb);
	
	    return _possibleConstructorReturn(this, (Thumb.__proto__ || Object.getPrototypeOf(Thumb)).apply(this, arguments));
	  }
	
	  _createClass(Thumb, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          on = _props.on,
	          off = _props.off,
	          active = _props.active,
	          disabled = _props.disabled,
	          dragging = _props.dragging,
	          thumbLeft = _props.thumbLeft,
	          discrete = _props.discrete,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'on', 'off', 'active', 'disabled', 'dragging', 'thumbLeft', 'discrete']);
	
	      return _react2.default.createElement(_AccessibleFakeButton2.default, _extends({
	        disabled: disabled
	      }, props, {
	        style: Object.assign({}, style, { left: thumbLeft }),
	        className: (0, _classnames2.default)('md-slider-thumb', className, {
	          'md-slider-thumb--active': active,
	          'md-slider-thumb--dragging': dragging,
	          'md-slider-thumb--disabled': disabled,
	          'md-slider-thumb--on': on,
	          'md-slider-thumb--continuous-off': !discrete && off,
	          'md-slider-thumb--discrete': discrete,
	          'md-slider-thumb--discrete-on': discrete && active && on,
	          'md-slider-thumb--discrete-off': discrete && !disabled && off,
	          'md-slider-thumb--discrete-active': discrete && active,
	          'md-slider-thumb--discrete-active-off': discrete && active && off
	        })
	      }));
	    }
	  }]);
	
	  return Thumb;
	}(_react.PureComponent);
	
	Thumb.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  on: _propTypes2.default.bool,
	  off: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  discrete: _propTypes2.default.bool
	};
	exports.default = Thumb;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `ThumbMask` component is used for either:
	 *
	 *  - rendering the ink behind the `Thumb` component when the `Thumb`
	 *  has keyboard focus or touch focus
	 *  - rendering a underlay to make the `Track` look broken for disabled
	 *  Sliders.
	 */
	var ThumbMask = function (_PureComponent) {
	  _inherits(ThumbMask, _PureComponent);
	
	  function ThumbMask() {
	    _classCallCheck(this, ThumbMask);
	
	    return _possibleConstructorReturn(this, (ThumbMask.__proto__ || Object.getPrototypeOf(ThumbMask)).apply(this, arguments));
	  }
	
	  _createClass(ThumbMask, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          thumbLeft = _props.thumbLeft,
	          disabled = _props.disabled,
	          dragging = _props.dragging,
	          maskInked = _props.maskInked,
	          discrete = _props.discrete,
	          leaving = _props.leaving,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'thumbLeft', 'disabled', 'dragging', 'maskInked', 'discrete', 'leaving']);
	
	      return _react2.default.createElement('span', _extends({}, props, {
	        style: Object.assign({}, style, { left: thumbLeft }),
	        className: (0, _classnames2.default)('md-slider-thumb md-slider-thumb--mask', className, {
	          'md-slider-thumb--dragging': dragging,
	          'md-slider-thumb--mask-inked': maskInked,
	          'md-slider-thumb--mask-disabled': disabled,
	          'md-slider-thumb--discrete-mask-inked': maskInked && discrete,
	          'md-slider-thumb--discrete-mask-leaving': discrete && leaving
	        })
	      }));
	    }
	  }]);
	
	  return ThumbMask;
	}(_react.PureComponent);
	
	ThumbMask.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  disabled: _propTypes2.default.bool,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  maskInked: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  discrete: _propTypes2.default.bool,
	  leaving: _propTypes2.default.bool
	};
	exports.default = ThumbMask;

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _updateUnit = __webpack_require__(275);
	
	var _updateUnit2 = _interopRequireDefault(_updateUnit);
	
	var _TrackFill = __webpack_require__(244);
	
	var _TrackFill2 = _interopRequireDefault(_TrackFill);
	
	var _Thumb = __webpack_require__(241);
	
	var _Thumb2 = _interopRequireDefault(_Thumb);
	
	var _ThumbMask = __webpack_require__(242);
	
	var _ThumbMask2 = _interopRequireDefault(_ThumbMask);
	
	var _DiscreteValue = __webpack_require__(238);
	
	var _DiscreteValue2 = _interopRequireDefault(_DiscreteValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var half = function half(w) {
	  return w / 2;
	};
	
	/**
	 * The `Track` component is used for showing the current state of the slider.
	 * It will render the `TrackFill`, `Thumb`, and `ThumbMask` components.
	 */
	
	var Track = function (_PureComponent) {
	  _inherits(Track, _PureComponent);
	
	  function Track() {
	    _classCallCheck(this, Track);
	
	    return _possibleConstructorReturn(this, (Track.__proto__ || Object.getPrototypeOf(Track)).apply(this, arguments));
	  }
	
	  _createClass(Track, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          on = _props.on,
	          off = _props.off,
	          active = _props.active,
	          disabled = _props.disabled,
	          dragging = _props.dragging,
	          className = _props.className,
	          thumbLeft = _props.thumbLeft,
	          trackFillWidth = _props.trackFillWidth,
	          trackFillStyle = _props.trackFillStyle,
	          trackFillClassName = _props.trackFillClassName,
	          discreteValueStyle = _props.discreteValueStyle,
	          discreteValueClassName = _props.discreteValueClassName,
	          maskInked = _props.maskInked,
	          maskLeaving = _props.maskLeaving,
	          thumbStyle = _props.thumbStyle,
	          thumbClassName = _props.thumbClassName,
	          discrete = _props.discrete,
	          onThumbFocus = _props.onThumbFocus,
	          onThumbKeyUp = _props.onThumbKeyUp,
	          onThumbKeyDown = _props.onThumbKeyDown,
	          value = _props.value,
	          tickWidth = _props.tickWidth,
	          discreteTicks = _props.discreteTicks,
	          scale = _props.scale,
	          step = _props.step,
	          valuePrecision = _props.valuePrecision,
	          props = _objectWithoutProperties(_props, ['on', 'off', 'active', 'disabled', 'dragging', 'className', 'thumbLeft', 'trackFillWidth', 'trackFillStyle', 'trackFillClassName', 'discreteValueStyle', 'discreteValueClassName', 'maskInked', 'maskLeaving', 'thumbStyle', 'thumbClassName', 'discrete', 'onThumbFocus', 'onThumbKeyUp', 'onThumbKeyDown', 'value', 'tickWidth', 'discreteTicks', 'scale', 'step', 'valuePrecision']);
	
	      var ticks = [];
	      if (typeof discreteTicks !== 'undefined' && !disabled && discrete) {
	        var amt = scale / (discreteTicks / step);
	        var offset = (0, _updateUnit2.default)(tickWidth, half, 'px');
	        var inc = 100 / amt;
	
	        for (var i = 0; i <= amt; i++) {
	          var left = i * inc + '%';
	          var width = tickWidth;
	          if (i === 0 || i === amt) {
	            width = (0, _updateUnit2.default)(tickWidth, half);
	          } else {
	            left = 'calc(' + left + ' - ' + offset + ')';
	          }
	
	          ticks.push(_react2.default.createElement('span', {
	            key: 'tick-' + i,
	            className: 'md-slider-discrete-tick',
	            style: { left: left, width: width }
	          }));
	        }
	      }
	
	      return _react2.default.createElement(
	        'div',
	        _extends({}, props, { className: (0, _classnames2.default)('md-slider-track', className) }),
	        ticks,
	        _react2.default.createElement(_TrackFill2.default, {
	          style: trackFillStyle,
	          className: trackFillClassName,
	          disabled: disabled,
	          dragging: dragging,
	          trackFillWidth: trackFillWidth
	        }),
	        _react2.default.createElement(_Thumb2.default, {
	          style: thumbStyle,
	          className: thumbClassName,
	          on: on,
	          off: off,
	          disabled: disabled,
	          dragging: dragging,
	          active: active,
	          thumbLeft: thumbLeft,
	          onFocus: onThumbFocus,
	          onKeyUp: onThumbKeyUp,
	          onKeyDown: onThumbKeyDown,
	          discrete: discrete
	        }),
	        _react2.default.createElement(_DiscreteValue2.default, {
	          style: discreteValueStyle,
	          className: discreteValueClassName,
	          discrete: discrete,
	          dragging: dragging,
	          active: active,
	          value: value,
	          thumbLeft: thumbLeft,
	          valuePrecision: valuePrecision
	        }),
	        _react2.default.createElement(_ThumbMask2.default, {
	          dragging: dragging,
	          disabled: disabled,
	          thumbLeft: thumbLeft,
	          maskInked: maskInked,
	          discrete: discrete,
	          leaving: maskLeaving
	        })
	      );
	    }
	  }]);
	
	  return Track;
	}(_react.PureComponent);
	
	Track.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  thumbStyle: _propTypes2.default.object,
	  thumbClassName: _propTypes2.default.string,
	  trackFillStyle: _propTypes2.default.object,
	  trackFillClassName: _propTypes2.default.string,
	  discreteValueStyle: _propTypes2.default.object,
	  discreteValueClassName: _propTypes2.default.string,
	  on: _propTypes2.default.bool,
	  off: _propTypes2.default.bool,
	  active: _propTypes2.default.bool,
	  dragging: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  thumbLeft: _propTypes2.default.string.isRequired,
	  trackFillWidth: _propTypes2.default.string.isRequired,
	  value: _propTypes2.default.number.isRequired,
	  discrete: _propTypes2.default.bool,
	  maskInked: _propTypes2.default.bool,
	  maskLeaving: _propTypes2.default.bool,
	  onThumbKeyUp: _propTypes2.default.func.isRequired,
	  onThumbKeyDown: _propTypes2.default.func.isRequired,
	  onThumbFocus: _propTypes2.default.func.isRequired,
	  scale: _propTypes2.default.number,
	  step: _propTypes2.default.number,
	  discreteTicks: _propTypes2.default.number,
	  tickWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  valuePrecision: _propTypes2.default.number.isRequired
	};
	exports.default = Track;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TrackFill` component is used for showing a colored bar
	 * within the `Track` component to show the `Slider`'s position.
	 *
	 * If the `Slider` is disabled, this will just return null.
	 */
	var TrackFill = function (_PureComponent) {
	  _inherits(TrackFill, _PureComponent);
	
	  function TrackFill() {
	    _classCallCheck(this, TrackFill);
	
	    return _possibleConstructorReturn(this, (TrackFill.__proto__ || Object.getPrototypeOf(TrackFill)).apply(this, arguments));
	  }
	
	  _createClass(TrackFill, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          trackFillWidth = _props.trackFillWidth,
	          dragging = _props.dragging,
	          disabled = _props.disabled,
	          props = _objectWithoutProperties(_props, ['style', 'className', 'trackFillWidth', 'dragging', 'disabled']);
	
	      if (disabled) {
	        return null;
	      }
	
	      return _react2.default.createElement('hr', _extends({}, props, {
	        style: Object.assign({}, style, { width: trackFillWidth }),
	        className: (0, _classnames2.default)('md-slider-track-fill', className, {
	          'md-slider-track-fill--dragging': dragging
	        })
	      }));
	    }
	  }]);
	
	  return TrackFill;
	}(_react.PureComponent);
	
	TrackFill.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  dragging: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  trackFillWidth: _propTypes2.default.string.isRequired
	};
	exports.default = TrackFill;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Slider = __webpack_require__(239);
	
	var _Slider2 = _interopRequireDefault(_Slider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Slider2.default;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	var _isInvalidAnimate = __webpack_require__(105);
	
	var _isInvalidAnimate2 = _interopRequireDefault(_isInvalidAnimate);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Snackbar = function (_PureComponent) {
	  _inherits(Snackbar, _PureComponent);
	
	  function Snackbar(props) {
	    _classCallCheck(this, Snackbar);
	
	    var _this = _possibleConstructorReturn(this, (Snackbar.__proto__ || Object.getPrototypeOf(Snackbar)).call(this, props));
	
	    _this._clearTimeout = _this._clearTimeout.bind(_this);
	    _this._handleClick = _this._handleClick.bind(_this);
	    _this._handleAutohide = _this._handleAutohide.bind(_this);
	    _this._handleWindowBlur = _this._handleWindowBlur.bind(_this);
	    _this._handleWindowFocus = _this._handleWindowFocus.bind(_this);
	    return _this;
	  }
	
	  _createClass(Snackbar, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          fab = _props.fab,
	          multiline = _props.multiline,
	          onAppear = _props.toast.onAppear;
	
	      if (onAppear) {
	        onAppear();
	      }
	
	      if (!fab || (0, _isInvalidAnimate2.default)(fab)) {
	        return;
	      }
	
	      this._fab = fab.getComposedComponent().getComposedComponent();
	      this._fab._animateForSnackbar(multiline);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._handleAutohide();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._clearTimeout();
	
	      if (this._eventType === 'focus') {
	        window.removeEventListener('focus', this._handleWindowFocus);
	      } else if (this._eventType === 'blur') {
	        window.removeEventListener('blur', this._handleWindowBlur);
	      }
	    }
	  }, {
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      var _props2 = this.props,
	          onDismiss = _props2.onDismiss,
	          action = _props2.toast.action,
	          leaveTimeout = _props2.leaveTimeout,
	          multiline = _props2.multiline;
	
	      if (typeof action.onClick === 'function') {
	        action.onClick(e);
	      }
	
	      if (this._fab) {
	        this._fab._animateForSnackbar(multiline, leaveTimeout);
	      }
	
	      onDismiss();
	    }
	  }, {
	    key: '_clearTimeout',
	    value: function _clearTimeout() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	        this._timeout = null;
	      }
	    }
	  }, {
	    key: '_handleAutohide',
	    value: function _handleAutohide() {
	      var _this2 = this;
	
	      var _props3 = this.props,
	          autohide = _props3.autohide,
	          autohideTimeout = _props3.autohideTimeout,
	          onDismiss = _props3.onDismiss,
	          multiline = _props3.multiline,
	          leaveTimeout = _props3.leaveTimeout;
	
	      if (!autohide) {
	        return;
	      }
	
	      window.addEventListener('blur', this._handleWindowBlur);
	      this._eventType = 'blur';
	      this._timeout = setTimeout(function () {
	        _this2._timeout = null;
	        _this2._eventType = null;
	
	        window.removeEventListener('blur', _this2._handleWindowBlur);
	
	        if (_this2._fab) {
	          _this2._fab._animateForSnackbar(multiline, leaveTimeout);
	        }
	
	        onDismiss();
	      }, autohideTimeout || this.state.toast);
	    }
	  }, {
	    key: '_handleWindowBlur',
	    value: function _handleWindowBlur() {
	      this._clearTimeout();
	      window.removeEventListener('blur', this._handleWindowBlur);
	      window.addEventListener('focus', this._handleWindowFocus);
	      this._eventType = 'focus';
	    }
	  }, {
	    key: '_handleWindowFocus',
	    value: function _handleWindowFocus() {
	      window.removeEventListener('focus', this._handleWindowFocus);
	      this._eventType = null;
	      this._handleAutohide();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props4 = this.props,
	          className = _props4.className,
	          toast = _props4.toast,
	          multiline = _props4.multiline,
	          props = _objectWithoutProperties(_props4, ['className', 'toast', 'multiline']);
	
	      delete props.id;
	      delete props.fab;
	      delete props.onDismiss;
	      delete props.autohide;
	      delete props.autohideTimeout;
	      delete props.leaveTimeout;
	      var text = toast.text,
	          action = toast.action;
	      var id = this.props.id;
	
	
	      var Component = 'p';
	      if (action) {
	        Component = 'section';
	        text = _react2.default.createElement(
	          'p',
	          { className: 'md-snackbar--toast md-snackbar--action' },
	          text
	        );
	
	        var btnProps = {
	          flat: true,
	          onClick: this._handleClick,
	          label: action,
	          secondary: true,
	          className: 'md-btn--snackbar'
	        };
	
	        if (typeof action !== 'string') {
	          btnProps = Object.assign(btnProps, action, {
	            className: (0, _classnames2.default)(btnProps.className, action.className),
	            onClick: this._handleClick
	          });
	        }
	
	        action = _react2.default.createElement(_Button2.default, btnProps);
	      }
	
	      if (!id) {
	        id = 'snackbarAlert' + (action ? 'Dialog' : '');
	      }
	
	      var role = 'alert' + (action ? 'dialog' : '');
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          id: id,
	          role: role,
	          className: (0, _classnames2.default)('md-snackbar', {
	            'md-snackbar--multiline': multiline,
	            'md-snackbar--toast': !action
	          }, className)
	        }),
	        text,
	        action
	      );
	    }
	  }]);
	
	  return Snackbar;
	}(_react.PureComponent);
	
	Snackbar.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node,
	  onDismiss: _propTypes2.default.func.isRequired,
	  toast: _propTypes2.default.shape({
	    text: _propTypes2.default.node.isRequired,
	    action: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.shape({
	      label: _propTypes2.default.node.isRequired,
	      onClick: _propTypes2.default.func
	    })]),
	    onAppear: _propTypes2.default.func
	  }).isRequired,
	  multiline: _propTypes2.default.bool,
	  autohide: _propTypes2.default.bool,
	  autohideTimeout: _propTypes2.default.number,
	  fab: _propTypes2.default.object,
	  leaveTimeout: _propTypes2.default.number.isRequired
	};
	exports.default = Snackbar;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _CSSTransitionGroup = __webpack_require__(25);
	
	var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);
	
	var _deprecated = __webpack_require__(5);
	
	var _deprecated2 = _interopRequireDefault(_deprecated);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	var _isInvalidAnimate = __webpack_require__(105);
	
	var _isInvalidAnimate2 = _interopRequireDefault(_isInvalidAnimate);
	
	var _Portal = __webpack_require__(27);
	
	var _Portal2 = _interopRequireDefault(_Portal);
	
	var _Snackbar = __webpack_require__(246);
	
	var _Snackbar2 = _interopRequireDefault(_Snackbar);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CHAINED_TOAST_DELAY = 50;
	
	/**
	 * The `Snackbar` component is used for displaying a concise and small message to the user about
	 * an operation performed.
	 *
	 * > The main component for the `Snackbar` is actually named the `SnackbarContainer`, so you need
	 * to make sure the import is `react-md/lib/Snackbars` or `react-md/lib/Snackbars/SnackbarContainer`.
	 * The first import is preferable.
	 */
	
	var SnackbarContainer = function (_PureComponent) {
	  _inherits(SnackbarContainer, _PureComponent);
	
	  function SnackbarContainer(props) {
	    _classCallCheck(this, SnackbarContainer);
	
	    var _this = _possibleConstructorReturn(this, (SnackbarContainer.__proto__ || Object.getPrototypeOf(SnackbarContainer)).call(this, props));
	
	    var visible = !!props.toasts.length;
	    _this.state = {
	      visible: visible,
	      toast: null
	    };
	
	    _this._isMultiline = _this._isMultiline.bind(_this);
	    _this._initAndToast = _this._initAndToast.bind(_this);
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._createSwapTimer = _this._createSwapTimer.bind(_this);
	    _this._createLeaveTimer = _this._createLeaveTimer.bind(_this);
	    return _this;
	  }
	
	  _createClass(SnackbarContainer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var toasts = this.props.toasts;
	
	      if (toasts.length) {
	        this._initAndToast(toasts[0]);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _nextProps$toasts = _slicedToArray(nextProps.toasts, 1),
	          toast = _nextProps$toasts[0];
	
	      var _props$toasts = _slicedToArray(this.props.toasts, 1),
	          prevToast = _props$toasts[0];
	
	      if (toast === prevToast || toast === this.state.toast) {
	        return;
	      }
	
	      if (!toast) {
	        this._createLeaveTimer();
	      } else if (!this.state.visible) {
	        this._initAndToast(toast);
	      } else {
	        this._createSwapTimer(toast);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._initTimeout) {
	        clearTimeout(this._initTimeout);
	      }
	
	      if (this._leaveTimeout) {
	        clearTimeout(this._leaveTimeout);
	      }
	
	      if (this._swapTimeout) {
	        clearTimeout(this._swapTimeout);
	      }
	
	      if (this._dismissTimeout) {
	        clearTimeout(this._dismissTimeout);
	      }
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      this._container = (0, _reactDom.findDOMNode)(container);
	    }
	
	    /**
	     * This function takes in a new toast object and checks if the message will span
	     * multiple lines of text by creating the new snackbar before the `Snackbar` component
	     * gets made, checking the height of the message, and then removing the temporary
	     * snackbar.
	     */
	
	  }, {
	    key: '_isMultiline',
	    value: function _isMultiline(toast) {
	      var container = this._container;
	      if (container === null) {
	        return false;
	      }
	
	      var message = document.createElement('p');
	      message.classList.add('md-snackbar--toast');
	      message.innerHTML = toast.text;
	
	      var snackbar = void 0;
	      if (toast.action) {
	        message.classList.add('md-snackbar--action');
	
	        snackbar = document.createElement('section');
	        snackbar.className = 'md-snackbar';
	        snackbar.appendChild(message);
	
	        var action = document.createElement('button');
	        action.innerHTML = typeof toast.action === 'string' ? toast.action : toast.action.label;
	        action.className = 'md-btn md-btn--flat md-btn--text md-btn--snackbar';
	        snackbar.appendChild(action);
	      } else {
	        snackbar = message;
	      }
	
	      // Only style we really want from the .md-snackbar
	      snackbar.style.maxWidth = '568px';
	
	      container.appendChild(snackbar);
	      var multiline = message.offsetHeight > 20;
	      container.removeChild(snackbar);
	
	      return multiline;
	    }
	  }, {
	    key: '_initAndToast',
	    value: function _initAndToast(toast) {
	      var _this2 = this;
	
	      this._initTimeout = setTimeout(function () {
	        _this2._initTimeout = null;
	
	        _this2.setState({ toast: toast, multiline: _this2._isMultiline(toast) });
	      }, _CSSTransitionGroupTick2.default);
	
	      this.setState({ visible: true });
	    }
	  }, {
	    key: '_createLeaveTimer',
	    value: function _createLeaveTimer() {
	      var _this3 = this;
	
	      var time = this.props.transitionLeaveTimeout;
	
	      this._leaveTimeout = setTimeout(function () {
	        _this3._leaveTimeout = null;
	
	        _this3.setState({ visible: false });
	      }, time + _CSSTransitionGroupTick2.default);
	
	      this.setState({ toast: null });
	    }
	  }, {
	    key: '_createSwapTimer',
	    value: function _createSwapTimer(toast) {
	      var _this4 = this;
	
	      this._swapTimeout = setTimeout(function () {
	        _this4._swapTimeout = null;
	
	        _this4.setState({ toast: toast, multiline: _this4._isMultiline(toast) });
	      }, this.props.transitionLeaveTimeout + CHAINED_TOAST_DELAY);
	
	      this.setState({ toast: null });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          visible = _state.visible,
	          toast = _state.toast,
	          multiline = _state.multiline;
	
	      var _props = this.props,
	          transitionName = _props.transitionName,
	          transitionEnterTimeout = _props.transitionEnterTimeout,
	          transitionLeaveTimeout = _props.transitionLeaveTimeout,
	          dismiss = _props.dismiss,
	          onDismiss = _props.onDismiss,
	          lastChild = _props.lastChild,
	          props = _objectWithoutProperties(_props, ['transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'dismiss', 'onDismiss', 'lastChild']);
	
	      delete props.toasts;
	      delete props.renderNode;
	      var renderNode = (0, _getField2.default)(this.props, this.context, 'renderNode');
	
	      var snackbar = void 0;
	      if (toast) {
	        snackbar = _react2.default.createElement(_Snackbar2.default, _extends({}, props, {
	          key: 'snackbar',
	          leaveTimeout: transitionLeaveTimeout,
	          toast: toast,
	          multiline: multiline,
	          onDismiss: onDismiss || dismiss
	        }));
	      }
	
	      return _react2.default.createElement(
	        _Portal2.default,
	        { visible: visible, renderNode: renderNode, lastChild: lastChild },
	        _react2.default.createElement(
	          _CSSTransitionGroup2.default,
	          {
	            ref: this._setContainer,
	            key: 'container',
	            className: 'md-snackbar-container',
	            transitionName: transitionName,
	            transitionEnterTimeout: transitionEnterTimeout,
	            transitionLeaveTimeout: transitionLeaveTimeout
	          },
	          snackbar
	        )
	      );
	    }
	  }]);
	
	  return SnackbarContainer;
	}(_react.PureComponent);
	
	SnackbarContainer.propTypes = {
	  /**
	   * An id for the Snackbar once a toast has been added and is visible. This is a recommended
	   * prop for accessibility concerns. If it is ommitted, the id will become `'snackbarAlert'`
	   * when there is no action on the toast, or `'snackbarAlertDialog'` when there is an action
	   * on the toast.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional style to apply to the snackbar once it appears.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the snackbar once it appears.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An immutable controlled queue of toasts that should appear in the snackbar.
	   * The snackbar will always display the first toast in this list. When the user has
	   * either clicked the action of the toast, or the `autohideTimeout` has been reached,
	   * the `onDismiss` function will be called. The `onDismiss` function should remove the
	   * the first toast and return a new list of remaining toasts.
	   *
	   * ```js
	   * let toasts = [];
	   * const onDismiss = () => {
	   *   const [, ...remainingToasts] = toasts;
	   *   toasts = remainingToasts;
	   * };
	   * ```
	   */
	  toasts: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	    /**
	     * The text to display in the toast.
	     */
	    text: _propTypes2.default.node.isRequired,
	
	    /**
	     * An optional action to take. If this value is a string, the `label` for the
	     * button will be this value, Otherwise, all the keys in the action object will
	     * be applied to the `Button`.
	     */
	    action: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.shape({
	      onClick: _propTypes2.default.func,
	      label: _propTypes2.default.node.isRequired
	    })])
	  })).isRequired,
	
	  /**
	   * A function to call that will dismiss a toast. This will automatically be bound to
	   * any toast that has an `action` and it will also be called when the `autohideTimeout`
	   * has been reached.
	   */
	  onDismiss: _propTypes2.default.func.isRequired,
	
	  /**
	   * Boolean if the snackbar's toasts should automatically be dismissed after the
	   * `autohideTimeout` has been reached.
	   */
	  autohide: _propTypes2.default.bool,
	
	  /**
	   * The amount of time before the snackbar should be dequeued and the next toast
	   * should be displayed.
	   */
	  autohideTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The transition name to use for the snackbar appearing and disappearing.
	   */
	  transitionName: _propTypes2.default.string.isRequired,
	
	  /**
	   * The transition time for the snackbar to enter. This should match the `$md-snackbar-transition-time`
	   * sass variable.
	   */
	  transitionEnterTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * The transition time for the snackbar to leave. This should match the `$md-snackbar-transition-time`
	   * sass variable.
	   */
	  transitionLeaveTimeout: _propTypes2.default.number.isRequired,
	
	  /**
	   * When the app contains a floating action button that is fixed to the bottom of the screen,
	   * you should set this to be a ref of the floating action button. When a snackbar appears,
	   * the FAB will be moved to not overlay the snackbar.
	   */
	  fab: function fab(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	
	    if (!propValue) {
	      return null;
	    }
	
	    if (propType !== 'object' || typeof propValue.render !== 'function' || (0, _isInvalidAnimate2.default)(propValue)) {
	      var componentNameSafe = componentName || '<<anonymous>>';
	      var propFullNameSafe = propFullName || propName;
	      return new Error('Invalid ' + location + ' `' + propFullNameSafe + '` supplied to `' + componentNameSafe + '`, expected a ' + 'ref to a floating `Button` component. This should not be a DOMElement from `findDOMNode` but instead ' + 'the React ref object.');
	    }
	
	    return null;
	  },
	
	  /**
	   * An optional DOM node to render the Snackbar in. If this is omitted, it will render as the first
	   * child in the `body`.
	   */
	  renderNode: _propTypes2.default.object,
	
	  /**
	   * Boolean if the snackbar should render as the last child in the `renderNode` or `body` instead of
	   * as the first.
	   */
	  lastChild: _propTypes2.default.bool,
	  dismiss: (0, _deprecated2.default)(_propTypes2.default.func, 'Use `onDismiss` instead')
	};
	SnackbarContainer.defaultProps = {
	  autohide: true,
	  toasts: [],
	  autohideTimeout: 3000,
	  transitionName: 'md-snackbar',
	  transitionEnterTimeout: 300,
	  transitionLeaveTimeout: 300
	};
	SnackbarContainer.contextTypes = {
	  renderNode: _propTypes2.default.object
	};
	exports.default = SnackbarContainer;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _SnackbarContainer = __webpack_require__(247);
	
	var _SnackbarContainer2 = _interopRequireDefault(_SnackbarContainer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _SnackbarContainer2.default;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _oneRequired = __webpack_require__(121);
	
	var _oneRequired2 = _interopRequireDefault(_oneRequired);
	
	var _AccessibleFakeInkedButton = __webpack_require__(12);
	
	var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `Tab` component is used for rendering a single tab in the `Tabs` component.
	 * It can opionally have either a `label`, an `icon` or both.
	 */
	var Tab = function (_PureComponent) {
	  _inherits(Tab, _PureComponent);
	
	  function Tab(props) {
	    _classCallCheck(this, Tab);
	
	    var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this, props));
	
	    _this._handleClick = _this._handleClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(Tab, [{
	    key: '_handleClick',
	    value: function _handleClick(e) {
	      if (this.props.onClick) {
	        this.props.onClick(this.props.index, this.props.id, this.props.controlsId, this.props.children, e);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          id = _props.id,
	          controlsId = _props.controlsId,
	          className = _props.className,
	          active = _props.active,
	          props = _objectWithoutProperties(_props, ['id', 'controlsId', 'className', 'active']);
	
	      delete props.index;
	      delete props.icon;
	      delete props.label;
	
	      var _props2 = this.props,
	          icon = _props2.icon,
	          label = _props2.label;
	
	      if (icon) {
	        var iconEl = _react.Children.only(icon);
	        icon = (0, _react.cloneElement)(icon, {
	          className: (0, _classnames2.default)('md-icon--tab', iconEl.props.className)
	        });
	      }
	
	      if ((0, _react.isValidElement)(label)) {
	        var labelEl = _react.Children.only(label);
	        label = (0, _react.cloneElement)(label, {
	          className: (0, _classnames2.default)('md-tab-label', labelEl.props.className)
	        });
	      } else {
	        label = _react2.default.createElement(
	          'div',
	          { className: 'md-tab-label' },
	          label
	        );
	      }
	      return _react2.default.createElement(
	        _AccessibleFakeInkedButton2.default,
	        _extends({}, props, {
	          id: id,
	          role: 'tab',
	          onClick: this._handleClick,
	          className: (0, _classnames2.default)('md-tab', {
	            'md-tab--active': active,
	            'md-tab--inactive': !active,
	            'md-tab--icon': label && icon
	          }, className),
	          'aria-controls': controlsId,
	          'aria-selected': active
	        }),
	        icon,
	        label
	      );
	    }
	  }]);
	
	  return Tab;
	}(_react.PureComponent);
	
	Tab.propTypes = {
	  /**
	   * An id for the tab. This is required for a11y. If you use the `Tabs` component, this
	   * will automatically be generated for you and injected into this component.
	   */
	  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An id for a `TabPanel` that holds the children from this tab. This is required for a11y.
	   * If you use the `Tabs` component, this will automatically be generated for you and injected
	   * into this component.
	   */
	  controlsId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The component to render as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * Any children to display once the tab has been selected.
	   */
	  children: _propTypes2.default.node,
	
	  /**
	   * An optional icon to display in the tab. This can either be used alone, or it
	   * will be placed above the `label` if both are given.
	   */
	  icon: _propTypes2.default.element,
	
	  /**
	   * An optional label to display in the tab. This can either be used alone, or it
	   * will be placed below the `icon` if both are given.
	   */
	  label: (0, _oneRequired2.default)(_propTypes2.default.node, 'icon'),
	
	  /**
	   * An optional function to call when the tab is clicked. The callback includes this tab's index,
	   * id, controlsId, children, and finally click event. All the additional parameters are included
	   * if you are not using the `TabsContainer` component. The `id` and `controlsId` are mainly passed
	   * for accessibility.
	   *
	   * ```js
	   * onClick(index, id, controlsId, children, event);
	   * ```
	   */
	  onClick: _propTypes2.default.func,
	
	  /**
	   * Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically
	   * injected.
	   */
	  active: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically
	   * injected.
	   */
	  index: _propTypes2.default.number
	};
	Tab.defaultProps = {
	  component: 'li'
	};
	exports.default = Tab;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactMotion = __webpack_require__(147);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TabIndicator = function (_PureComponent) {
	  _inherits(TabIndicator, _PureComponent);
	
	  function TabIndicator() {
	    _classCallCheck(this, TabIndicator);
	
	    return _possibleConstructorReturn(this, (TabIndicator.__proto__ || Object.getPrototypeOf(TabIndicator)).apply(this, arguments));
	  }
	
	  _createClass(TabIndicator, [{
	    key: 'render',
	    value: function render() {
	      var visible = this.props.visible;
	
	      return _react2.default.createElement(
	        _reactMotion.Motion,
	        {
	          style: {
	            x: (0, _reactMotion.spring)(this.props.offset),
	            width: (0, _reactMotion.spring)(this.props.width),
	            height: (0, _reactMotion.spring)(visible ? 2 : 0)
	          }
	        },
	        function (_ref) {
	          var x = _ref.x,
	              height = _ref.height,
	              width = _ref.width;
	
	          var transform = 'translate3d(' + x + 'px, 0, 0)';
	          return _react2.default.createElement('span', {
	            style: {
	              height: height,
	              width: width,
	              WebkitTransform: transform,
	              MozTransform: transform,
	              msTransform: transform,
	              transform: transform
	            },
	            className: 'md-tab-indicator'
	          });
	        }
	      );
	    }
	  }]);
	
	  return TabIndicator;
	}(_react.PureComponent);
	
	TabIndicator.propTypes = {
	  offset: _propTypes2.default.number.isRequired,
	  width: _propTypes2.default.number.isRequired,
	  visible: _propTypes2.default.bool
	};
	exports.default = TabIndicator;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Button = __webpack_require__(10);
	
	var _Button2 = _interopRequireDefault(_Button);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TabOverflowButton = function (_PureComponent) {
	  _inherits(TabOverflowButton, _PureComponent);
	
	  function TabOverflowButton() {
	    _classCallCheck(this, TabOverflowButton);
	
	    return _possibleConstructorReturn(this, (TabOverflowButton.__proto__ || Object.getPrototypeOf(TabOverflowButton)).apply(this, arguments));
	  }
	
	  _createClass(TabOverflowButton, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          left = _props.left,
	          icon = _props.icon,
	          props = _objectWithoutProperties(_props, ['left', 'icon']);
	
	      return _react2.default.createElement(_Button2.default, _extends({}, props, {
	        icon: true,
	        className: (0, _classnames2.default)('md-icon--inherit md-btn--tab-overflow', {
	          'md-btn--tab-overflow-left': left,
	          'md-btn--tab-overflow-right': !left,
	          'md-btn--tab-overflow-icon': icon
	        })
	      }));
	    }
	  }]);
	
	  return TabOverflowButton;
	}(_react.PureComponent);
	
	TabOverflowButton.propTypes = {
	  left: _propTypes2.default.bool,
	  icon: _propTypes2.default.bool
	};
	exports.default = TabOverflowButton;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _isRequiredForA11y = __webpack_require__(8);
	
	var _isRequiredForA11y2 = _interopRequireDefault(_isRequiredForA11y);
	
	var _media = __webpack_require__(114);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _TabIndicator = __webpack_require__(250);
	
	var _TabIndicator2 = _interopRequireDefault(_TabIndicator);
	
	var _IconSeparator = __webpack_require__(26);
	
	var _IconSeparator2 = _interopRequireDefault(_IconSeparator);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	var _MenuTab = __webpack_require__(108);
	
	var _MenuTab2 = _interopRequireDefault(_MenuTab);
	
	var _TabOverflowButton = __webpack_require__(251);
	
	var _TabOverflowButton2 = _interopRequireDefault(_TabOverflowButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MOBILE_PADDING = 72;
	var DESKTOP_PADDING = 80;
	var MOBILE_TAB_MIN_WIDTH = 72;
	var DESKTOP_TAB_MIN_WIDTH = 160;
	
	/**
	 * The `Tabs` component is used to manage the state of which tab is currently active.
	 */
	
	var Tabs = function (_PureComponent) {
	  _inherits(Tabs, _PureComponent);
	
	  function Tabs(props) {
	    _classCallCheck(this, Tabs);
	
	    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));
	
	    var defaultTabIndex = typeof props.activeTabIndex === 'undefined' ? props.defaultTabIndex : props.activeTabIndex;
	    var mobile = typeof window !== 'undefined' ? _this._isMobile(props) : props.defaultMedia !== 'desktop';
	    var indicatorWidth = mobile ? MOBILE_TAB_MIN_WIDTH : DESKTOP_TAB_MIN_WIDTH;
	    _this.state = {
	      indicatorWidth: indicatorWidth,
	      indicatorOffset: indicatorWidth * defaultTabIndex,
	      indicatorVisible: true,
	      overflowIndex: 0
	    };
	
	    if (typeof props.activeTabIndex === 'undefined') {
	      _this.state.activeTabIndex = defaultTabIndex;
	    }
	
	    _this._setContainer = _this._setContainer.bind(_this);
	    _this._positionElements = _this._positionElements.bind(_this);
	    _this._scrollActiveIntoView = _this._scrollActiveIntoView.bind(_this);
	    _this._handleTabChange = _this._handleTabChange.bind(_this);
	    _this._nextIndexes = _this._nextIndexes.bind(_this);
	    _this._showNextTabs = _this._showNextTabs.bind(_this);
	    _this._showPreviousTabs = _this._showPreviousTabs.bind(_this);
	    _this._mapToOverflowTabProps = _this._mapToOverflowTabProps.bind(_this);
	    return _this;
	  }
	
	  _createClass(Tabs, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      window.addEventListener('resize', this._positionElements);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.activeTabIndex !== nextProps.activeTabIndex) {
	        this.setState(_extends({}, this._calcIndicatorPosition(this._container, 0, nextProps.activeTabIndex, this.state.overflowAtIndex)), this._scrollActiveIntoView);
	      } else if (!this._shouldAlign(nextProps) && this._shouldAlign(this.props)) {
	        this.setState({ paddingLeft: null });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _this2 = this;
	
	      if (this._shouldAlign(this.props) && this.state.overflowAtIndex !== prevState.overflowAtIndex) {
	        var paddingLeft = this._calcPaddingLeft(this._container, this.state.mobile);
	        // Have to wait for the overflow menus to appear, then wop
	        /* eslint-disable react/no-did-update-set-state */
	        this.setState({ paddingLeft: paddingLeft });
	      } else {
	        (function () {
	          var labels = _react.Children.map(_react.Children.toArray(_this2.props.children), function (_ref) {
	            var label = _ref.props.label;
	            return label;
	          });
	          var prevLabels = _react.Children.map(_react.Children.toArray(prevProps.children), function (_ref2) {
	            var label = _ref2.props.label;
	            return label;
	          });
	          if (labels.length !== prevLabels.length || labels.filter(function (_, i) {
	            return labels[i] !== prevLabels[i];
	          }).length) {
	            _this2.setState(_extends({}, _this2._calcIndicatorPosition(_this2._container, 0, _this2.props.activeTabIndex, _this2.state.overflowAtIndex)), _this2._scrollActiveIntoView);
	          }
	        })();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      window.removeEventListener('resize', this._positionElements);
	    }
	  }, {
	    key: '_shouldAlign',
	    value: function _shouldAlign(props) {
	      return typeof props.alignToKeyline === 'boolean' ? props.alignToKeyline : _react.Children.toArray(props.children).filter(function (child) {
	        return !!child;
	      }).length > 3;
	    }
	  }, {
	    key: '_isMobile',
	    value: function _isMobile(props) {
	      var min = props.desktopMinWidth;
	
	      return typeof window !== 'undefined' && !window.matchMedia('screen and (min-width: ' + min + 'px)').matches;
	    }
	  }, {
	    key: '_calcPaddingLeft',
	    value: function _calcPaddingLeft(container, mobile) {
	      var mediaPadding = mobile ? MOBILE_PADDING : DESKTOP_PADDING;
	      var tab = container.querySelector('.md-tab');
	
	      var _tab$querySelector = tab.querySelector('.md-tab-label'),
	          labelOffset = _tab$querySelector.offsetLeft;
	
	      return mediaPadding - labelOffset;
	    }
	  }, {
	    key: '_calcOverflowIndex',
	    value: function _calcOverflowIndex(container) {
	      var paddingLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	      var menu = arguments[2];
	
	      var containerWidth = container.offsetWidth;
	      var overflowIndex = 0;
	      if (containerWidth < container.scrollWidth) {
	        (function () {
	          var tabs = Array.prototype.slice.call(container.querySelectorAll('.md-tab'));
	          var totalWidth = 0;
	          tabs.some(function (tab, i) {
	            overflowIndex = i;
	            totalWidth += tab.offsetWidth;
	
	            return totalWidth > containerWidth;
	          });
	        })();
	      }
	
	      return Math.max(0, overflowIndex - (menu ? 1 : 0));
	    }
	  }, {
	    key: '_calcIndicatorPosition',
	    value: function _calcIndicatorPosition(container) {
	      var paddingLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	      var activeTabIndex = arguments[2];
	      var overflowAtIndex = arguments[3];
	
	      var activeItem = void 0;
	      if (typeof activeTabIndex === 'number') {
	        if (overflowAtIndex > 0 && activeTabIndex >= overflowAtIndex) {
	          activeItem = container.querySelector('.md-menu--tab');
	        } else {
	          activeItem = container.querySelectorAll('.md-tab')[activeTabIndex];
	        }
	      } else {
	        activeItem = container.querySelector('.md-tab--active');
	      }
	
	      if (!activeItem) {
	        return { indicatorVisible: false };
	      }
	
	      var _activeItem = activeItem,
	          indicatorWidth = _activeItem.offsetWidth,
	          indicatorOffset = _activeItem.offsetLeft;
	
	      return {
	        indicatorWidth: indicatorWidth,
	        indicatorOffset: indicatorOffset + paddingLeft,
	        indicatorVisible: !overflowAtIndex || overflowAtIndex > activeTabIndex
	      };
	    }
	  }, {
	    key: '_setContainer',
	    value: function _setContainer(container) {
	      this._container = (0, _reactDom.findDOMNode)(container);
	      this._positionElements(this._container !== null);
	    }
	  }, {
	    key: '_positionElements',
	    value: function _positionElements(initialRender) {
	      initialRender = typeof initialRender === 'boolean' && initialRender;
	      if (!this._container) {
	        return;
	      }
	
	      var _props = this.props,
	          centered = _props.centered,
	          overflowMenu = _props.overflowMenu;
	
	      var mobile = this._isMobile(this.props);
	
	      var paddingLeft = void 0;
	      if (!centered && this._shouldAlign(this.props)) {
	        paddingLeft = this._calcPaddingLeft(this._container, mobile);
	      }
	
	      var overflowAtIndex = void 0;
	      if (!mobile) {
	        overflowAtIndex = this._calcOverflowIndex(this._container, paddingLeft, overflowMenu);
	      }
	
	      var indicatorPosition = this._calcIndicatorPosition(this._container, initialRender ? paddingLeft : 0);
	
	      this.setState(_extends({ mobile: mobile, paddingLeft: paddingLeft, overflowAtIndex: overflowAtIndex }, indicatorPosition), this._scrollActiveIntoView);
	    }
	  }, {
	    key: '_scrollActiveIntoView',
	    value: function _scrollActiveIntoView() {
	      var _this3 = this;
	
	      if (!this._container || !this.state.mobile) {
	        return;
	      }
	
	      var active = this._container.querySelector('.md-tab--active');
	      if (!active) {
	        return;
	      }
	
	      var allTabs = Array.prototype.slice.call(this._container.querySelectorAll('.md-tab'));
	      if (allTabs[0] === active) {
	        this._container.scrollLeft = 0;
	        return;
	      }
	
	      var _container = this._container,
	          containerWidth = _container.offsetWidth,
	          scrollLeft = _container.scrollLeft;
	      var activeWidth = active.offsetWidth,
	          activeOffset = active.offsetLeft;
	
	      var inFullViewLeft = activeOffset - scrollLeft >= 0;
	      var inFullViewRight = activeOffset + activeWidth - (containerWidth + scrollLeft) <= 0;
	      if (inFullViewLeft && inFullViewRight) {
	        return;
	      }
	
	      var offset = 0;
	      allTabs.some(function (tab, i) {
	        if (i < _this3.props.activeTabIndex) {
	          offset += tab.offsetWidth;
	        }
	
	        return i < _this3.state.activeTabIndex;
	      });
	
	      this._container.scrollLeft = offset;
	    }
	  }, {
	    key: '_handleTabChange',
	    value: function _handleTabChange(index, tabId, tabControlsId, tabChildren, event) {
	      if (this.props.onTabChange) {
	        this.props.onTabChange(index, tabId, tabControlsId, tabChildren, event);
	      }
	
	      if (typeof this.props.activeTabIndex === 'undefined') {
	        this.setState(_extends({
	          activeTabIndex: index
	        }, this._calcIndicatorPosition(this._container, 0, index, this.state.overflowAtIndex)));
	      }
	    }
	  }, {
	    key: '_mapToOverflowTabProps',
	    value: function _mapToOverflowTabProps(tab, i) {
	      var index = i + this.state.overflowAtIndex;
	      var active = (0, _getField2.default)(this.props, this.state, 'activeTabIndex') === index;
	      var tabEl = _react.Children.only(tab);
	      var handleTabChange = this._handleTabChange;
	
	      return {
	        active: active,
	        primaryText: tabEl.props.label,
	        onClick: function handleClick(event) {
	          var _tabEl$props = tabEl.props,
	              onClick = _tabEl$props.onClick,
	              id = _tabEl$props.id,
	              controlsId = _tabEl$props.controlsId,
	              children = _tabEl$props.children;
	
	          if (onClick) {
	            onClick(index, event);
	          }
	
	          handleTabChange(index, id, controlsId, children, event);
	        }
	      };
	    }
	  }, {
	    key: '_nextIndexes',
	    value: function _nextIndexes(increment) {
	      var _state = this.state,
	          overflowIndex = _state.overflowIndex,
	          overflowAtIndex = _state.overflowAtIndex;
	
	      var visibleAmt = (overflowAtIndex - overflowIndex) * (increment ? 1 : -1);
	
	      this.setState({
	        overflowIndex: overflowIndex + visibleAmt,
	        overflowAtIndex: overflowAtIndex + visibleAmt
	      });
	    }
	  }, {
	    key: '_showNextTabs',
	    value: function _showNextTabs() {
	      this._nextIndexes(true);
	    }
	  }, {
	    key: '_showPreviousTabs',
	    value: function _showPreviousTabs() {
	      this._nextIndexes(false);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;
	
	      var _state2 = this.state,
	          indicatorOffset = _state2.indicatorOffset,
	          indicatorWidth = _state2.indicatorWidth,
	          indicatorVisible = _state2.indicatorVisible,
	          overflowIndex = _state2.overflowIndex,
	          overflowAtIndex = _state2.overflowAtIndex,
	          paddingLeft = _state2.paddingLeft;
	
	      var _props2 = this.props,
	          Component = _props2.component,
	          style = _props2.style,
	          className = _props2.className,
	          colored = _props2.colored,
	          centered = _props2.centered,
	          tabId = _props2.tabId,
	          overflowMenu = _props2.overflowMenu,
	          overflowMenuLabel = _props2.overflowMenuLabel,
	          overflowMenuIconChildren = _props2.overflowMenuIconChildren,
	          overflowMenuIconClassName = _props2.overflowMenuIconClassName,
	          nextIconChildren = _props2.nextIconChildren,
	          nextIconClassName = _props2.nextIconClassName,
	          previousIconChildren = _props2.previousIconChildren,
	          previousIconClassName = _props2.previousIconClassName,
	          props = _objectWithoutProperties(_props2, ['component', 'style', 'className', 'colored', 'centered', 'tabId', 'overflowMenu', 'overflowMenuLabel', 'overflowMenuIconChildren', 'overflowMenuIconClassName', 'nextIconChildren', 'nextIconClassName', 'previousIconChildren', 'previousIconClassName']);
	
	      delete props.activeTabIndex;
	      delete props.defaultTabIndex;
	      delete props.defaultMedia;
	      delete props.desktopMinWidth;
	      delete props.onTabChange;
	
	      var activeTabIndex = (0, _getField2.default)(this.props, this.state, 'activeTabIndex');
	
	      var icon = false;
	      var children = _react.Children.map(_react.Children.toArray(this.props.children), function (tab, index) {
	        var handleOnClick = function handleOnClick(tabIndex, id, tabControlsId, tabChildren, event) {
	          if (tab.props.onClick) {
	            tab.props.onClick(tabId, id, tabControlsId, tabChildren, event);
	          }
	
	          _this4._handleTabChange(tabIndex, id, tabControlsId, tabChildren, event);
	        };
	
	        if (tab.props.icon) {
	          icon = true;
	        }
	
	        return (0, _react.cloneElement)(tab, {
	          index: index,
	          id: tab.props.id || tabId + '-' + index,
	          controlsId: tab.props.controlsId || tabId + '-panel-' + index,
	          active: index === activeTabIndex,
	          onClick: handleOnClick
	        });
	      });
	
	      var overflow = void 0;
	      var nextControl = void 0;
	      var previousControl = void 0;
	      if (overflowAtIndex) {
	        var length = children.length;
	        if (overflowMenu) {
	          overflow = _react2.default.createElement(_MenuTab2.default, {
	            id: tabId + '-overflow-menu',
	            activeTabIndex: activeTabIndex,
	            overflowAtIndex: overflowAtIndex,
	            label: _react2.default.createElement(
	              _IconSeparator2.default,
	              { label: overflowMenuLabel },
	              _react2.default.createElement(
	                _FontIcon2.default,
	                { iconClassName: overflowMenuIconClassName },
	                overflowMenuIconChildren
	              )
	            ),
	            tabs: children.slice(overflowAtIndex, children.length).map(this._mapToOverflowTabProps)
	          });
	        }
	
	        children = children.slice(overflowIndex, overflowAtIndex);
	
	        if (!overflowMenu && overflowIndex > 0) {
	          previousControl = _react2.default.createElement(
	            _TabOverflowButton2.default,
	            { iconClassName: previousIconClassName, onClick: this._showPreviousTabs, left: true, icon: icon },
	            previousIconChildren
	          );
	        }
	
	        if (!overflowMenu && length > 3 && overflowAtIndex + overflowIndex <= length) {
	          nextControl = _react2.default.createElement(
	            _TabOverflowButton2.default,
	            { iconClassName: nextIconClassName, onClick: this._showNextTabs, icon: icon },
	            nextIconChildren
	          );
	        }
	      }
	
	      return _react2.default.createElement(
	        Component,
	        _extends({}, props, {
	          ref: this._setContainer,
	          style: _extends({}, style, { paddingLeft: paddingLeft }),
	          className: (0, _classnames2.default)('md-tabs', {
	            'md-tabs--pagination': overflowAtIndex && !overflowMenu,
	            'md-tabs--centered': centered,
	            'md-background--primary': colored
	          }, className),
	          role: 'tablist'
	        }),
	        previousControl,
	        children,
	        nextControl,
	        overflow,
	        _react2.default.createElement(_TabIndicator2.default, { offset: indicatorOffset, width: indicatorWidth, visible: indicatorVisible })
	      );
	    }
	  }]);
	
	  return Tabs;
	}(_react.PureComponent);
	
	Tabs.propTypes = {
	  /**
	   * A base id to use for each `Tab`. When the child tabs are created, they are cloned
	   * with some additional accessibility props. Each tab will get a prop with this and the
	   * current index of the tab.
	   */
	  tabId: (0, _isRequiredForA11y2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),
	
	  /**
	   * An optional style to apply.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * The component to render the tabs in.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * This should either be a single `Tab` component or a list of `Tab` components. Unfortunately,
	   * the child *must* be exactly a `Tab` component because this is unable to extract the correct
	   * `label` and `children` from a custom `Tab` component.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]).isRequired,
	
	  /**
	   * Boolean if the tabs should be centered instead of aligned to the keyline. The tabs will
	   * only be aligned to the keyline when there are more than 3 tabs and the `alignToKeyline`
	   * prop is `false`.
	   */
	  centered: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the tabs should align to a toolbar's title keyline. If this is undefined,
	   * the tabs will try to align to the keyline when there are more than 3 tabs.
	   */
	  alignToKeyline: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the tabs should be colored with the primary color. If this is false or undefined,
	   * the tabs will be colored for the light or dark theme.
	   */
	  colored: _propTypes2.default.bool,
	
	  /**
	   * A boolean if the overflow tabs on desktop displays should appear in a menu. If this is false,
	   * the additional tabs will be available by using pagination buttons.
	   */
	  overflowMenu: _propTypes2.default.bool,
	
	  /**
	   * An optional function to call when the active tab is changed. The callback will include
	   * the new active tab index and a click event.
	   *
	   * ```js
	   * onTabChange(newTabIndex, event);
	   * ```
	   */
	  onTabChange: _propTypes2.default.func,
	
	  /**
	   * An optional active tab index to use. If this is defined, it will make the component controlled
	   * and require the `onTabChange` prop to be defined.
	   */
	  activeTabIndex: (0, _controlled2.default)(_propTypes2.default.number, 'onTabChange', 'defaultTabIndex'),
	
	  /**
	   * The default tab index to use when the component is uncontrolled.
	   */
	  defaultTabIndex: _propTypes2.default.number.isRequired,
	
	  /**
	   * The default media to render the tabs for. This is really just used for server side rendering.
	   * Once the component has mounted, it will resize automatically.
	   */
	  defaultMedia: _propTypes2.default.oneOf(['mobile', 'tablet', 'desktop']).isRequired,
	
	  /**
	   * The min width to use for rendering the tabs for desktops. mobile and tablet is not used
	   * because they share the same styles.
	   */
	  desktopMinWidth: _propTypes2.default.number.isRequired,
	
	  /**
	   * When the `overflowMenu` prop is false, this will be used to render the "next slice of tabs"
	   * when there are too many tabs to display at once on desktop screens.
	   */
	  nextIconChildren: _propTypes2.default.node,
	
	  /**
	   * When the `overflowMenu` prop is false, this will be used to render the "next slice of tabs"
	   * when there are too many tabs to display at once on desktop screens.
	   */
	  nextIconClassName: _propTypes2.default.string,
	
	  /**
	   * When the `overflowMenu` prop is false, this will be used to render the "previous slice of tabs"
	   * when there are too many tabs to display at once on desktop screens.
	   */
	  previousIconChildren: _propTypes2.default.node,
	
	  /**
	   * When the `overflowMenu` prop is false, this will be used to render the "previous slice of tabs"
	   * when there are too many tabs to display at once on desktop screens.
	   */
	  previousIconClassName: _propTypes2.default.string,
	
	  /**
	   * When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.
	   * This will be the text that displays as a tab.
	   */
	  overflowMenuLabel: _propTypes2.default.node.isRequired,
	
	  /**
	   * When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.
	   * This will be to render the icon to the right of the label.
	   */
	  overflowMenuIconChildren: _propTypes2.default.node,
	
	  /**
	   * When the `overflowMenu` prop is true, this will be used to render the `MenuTab` overflow menu.
	   * This will be to render the icon to the right of the label.
	   */
	  overflowMenuIconClassName: _propTypes2.default.string
	};
	Tabs.defaultProps = {
	  component: 'ul',
	  defaultTabIndex: 0,
	  defaultMedia: 'mobile',
	  desktopMinWidth: _media.DESKTOP_MIN_WIDTH,
	  nextIconChildren: 'keyboard_arrow_right',
	  previousIconChildren: 'keyboard_arrow_left',
	  overflowMenuLabel: 'More',
	  overflowMenuIconChildren: 'arrow_drop_down'
	};
	exports.default = Tabs;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _reactSwipeableViews = __webpack_require__(355);
	
	var _reactSwipeableViews2 = _interopRequireDefault(_reactSwipeableViews);
	
	var _getField = __webpack_require__(7);
	
	var _getField2 = _interopRequireDefault(_getField);
	
	var _controlled = __webpack_require__(9);
	
	var _controlled2 = _interopRequireDefault(_controlled);
	
	var _between = __webpack_require__(39);
	
	var _between2 = _interopRequireDefault(_between);
	
	var _Paper = __webpack_require__(14);
	
	var _Paper2 = _interopRequireDefault(_Paper);
	
	var _TabPanel = __webpack_require__(109);
	
	var _TabPanel2 = _interopRequireDefault(_TabPanel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TabsContainer` component is used when you want to have your `Tabs` connected with
	 * the `SwipeableViews`. This component will traverse the children subtree and extract out
	 * the `children` from each tab, and render them in a swipeable container. However,
	 * since this is using the `React.Children` traversal, You will have to keep the `Tabs`
	 * and `Tab` component as a direct decendent. You are unable to make a separate component
	 * that encompasses the `Tab` component.
	 *
	 * ```js
	 * // valid
	 * <TabsContainer>
	 *   <Tabs>
	 *     <Tab />
	 *   </Tabs>
	 * </TabsContainer>
	 *
	 * // invalid
	 * <TabsContainer>
	 *   <Tabs>
	 *     <MyCustomTab />
	 *   </Tabs>
	 * </TabsContainer>
	 * ```
	 *
	 * This is because it seems you are unable to access the `MyCustomTab`'s child Tab props correctly.
	 * You can however have the tab's children as a separate component if you wish.
	 */
	var TabsContainer = function (_PureComponent) {
	  _inherits(TabsContainer, _PureComponent);
	
	  function TabsContainer(props) {
	    _classCallCheck(this, TabsContainer);
	
	    var _this = _possibleConstructorReturn(this, (TabsContainer.__proto__ || Object.getPrototypeOf(TabsContainer)).call(this, props));
	
	    _this.state = {};
	    if (typeof props.activeTabIndex === 'undefined') {
	      _this.state.activeTabIndex = props.defaultTabIndex;
	    }
	
	    _this._handleTabChange = _this._handleTabChange.bind(_this);
	    _this._handleSwipeChange = _this._handleSwipeChange.bind(_this);
	    return _this;
	  }
	
	  _createClass(TabsContainer, [{
	    key: '_handleTabChange',
	    value: function _handleTabChange(index, tabId, tabControlsId, tabChildren, event) {
	      if (this.props.onTabChange) {
	        this.props.onTabChange(index, tabId, tabControlsId, tabChildren, event);
	      }
	
	      if (typeof this.props.activeTabIndex === 'undefined') {
	        this.setState({ activeTabIndex: index });
	      }
	    }
	  }, {
	    key: '_handleSwipeChange',
	    value: function _handleSwipeChange(activeTabIndex) {
	      this._handleTabChange(activeTabIndex);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var panelHeight = this.state.panelHeight;
	
	      var _props = this.props,
	          Component = _props.component,
	          style = _props.style,
	          className = _props.className,
	          panelStyle = _props.panelStyle,
	          panelClassName = _props.panelClassName,
	          panelComponent = _props.panelComponent,
	          headerStyle = _props.headerStyle,
	          headerClassName = _props.headerClassName,
	          slideStyle = _props.slideStyle,
	          swipeableViewsStyle = _props.swipeableViewsStyle,
	          swipeableViewsClassName = _props.swipeableViewsClassName,
	          headerComponent = _props.headerComponent,
	          headerZDepth = _props.headerZDepth,
	          children = _props.children,
	          colored = _props.colored,
	          fixed = _props.fixed,
	          labelAndIcon = _props.labelAndIcon,
	          props = _objectWithoutProperties(_props, ['component', 'style', 'className', 'panelStyle', 'panelClassName', 'panelComponent', 'headerStyle', 'headerClassName', 'slideStyle', 'swipeableViewsStyle', 'swipeableViewsClassName', 'headerComponent', 'headerZDepth', 'children', 'colored', 'fixed', 'labelAndIcon']);
	
	      delete props.toolbar;
	      var toolbar = this.props.toolbar;
	
	
	      var activeTabIndex = (0, _getField2.default)(this.props, this.state, 'activeTabIndex');
	
	      var tabsEl = _react.Children.only(children);
	      var tabId = tabsEl.props.tabId;
	      var content = _react.Children.map(tabsEl.props.children, function (tab, index) {
	        if (!tab) {
	          return tab;
	        }
	
	        return _react2.default.createElement(
	          _TabPanel2.default,
	          {
	            id: tab.props.controlsId || tabId + '-panel-' + index,
	            active: activeTabIndex === index,
	            style: panelStyle,
	            className: panelClassName,
	            component: panelComponent,
	            controlledById: tab.props.id || tabId + '-' + index
	          },
	          tab.props.children
	        );
	      });
	
	      var childrenProps = _react.Children.only(children).props;
	      var tabs = (0, _react.cloneElement)(children, {
	        colored: typeof childrenProps.colored !== 'undefined' ? childrenProps.colored : colored,
	        onTabChange: this._handleTabChange,
	        activeTabIndex: activeTabIndex
	      });
	
	      var prominentToolbar = false;
	      if (toolbar) {
	        var toolbarProps = _react.Children.only(toolbar).props;
	        toolbar = (0, _react.cloneElement)(toolbar, {
	          component: toolbarProps.component || 'div',
	          colored: typeof toolbarProps.colored !== 'undefined' ? childrenProps.colored : colored
	        });
	
	        prominentToolbar = toolbarProps.prominent || toolbarProps.prominentTitle;
	      }
	
	      var header = void 0;
	      if (fixed) {
	        header = _react2.default.createElement(
	          _Paper2.default,
	          {
	            style: headerStyle,
	            className: (0, _classnames2.default)('md-tabs-fixed-container', headerClassName),
	            zDepth: headerZDepth,
	            component: headerComponent
	          },
	          toolbar,
	          tabs
	        );
	      }
	
	      return _react2.default.createElement(
	        Component,
	        {
	          style: style,
	          className: (0, _classnames2.default)('md-tabs-container', className),
	          ref: function ref(container) {
	            if (container) {
	              var activePanel = (0, _reactDom.findDOMNode)(container).querySelector('.md-tab-panel[aria-hidden=false]');
	              if (activePanel && _this2.state.panelHeight !== activePanel.offsetHeight) {
	                _this2.setState({ panelHeight: activePanel.offsetHeight });
	              }
	            }
	          }
	        },
	        header,
	        header ? null : toolbar,
	        header ? null : tabs,
	        _react2.default.createElement(
	          _reactSwipeableViews2.default,
	          {
	            style: swipeableViewsStyle,
	            className: (0, _classnames2.default)('md-tabs-content', {
	              'md-tabs-content--offset': fixed,
	              'md-tabs-content--offset-icon': fixed && labelAndIcon,
	              'md-tabs-content--offset-toolbar': fixed && toolbar,
	              'md-tabs-content--offset-toolbar-prominent': fixed && toolbar && prominentToolbar,
	              'md-tabs-content--offset-toolbar-icon': fixed && toolbar && labelAndIcon,
	              'md-tabs-content--offset-toolbar-prominent-icon': fixed && toolbar && labelAndIcon && prominentToolbar
	            }, swipeableViewsClassName),
	            slideStyle: _extends({ height: panelHeight }, slideStyle),
	            index: activeTabIndex,
	            onChangeIndex: this._handleSwipeChange
	          },
	          content
	        )
	      );
	    }
	  }]);
	
	  return TabsContainer;
	}(_react.PureComponent);
	
	TabsContainer.propTypes = {
	  /**
	   * An optional style to apply to the container.
	   */
	  style: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the container.
	   */
	  className: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to each `TabPanel` that gets generated. Each tab's children
	   * will get wrapped in a `TabPanel` component.
	   */
	  panelStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to each each `TabPanel` that gets generated. Each tab's
	   * children will get wrapped in a `TabPanel` component.
	   */
	  panelClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the header component when the tabs are fixed to the top of the page.
	   * The optional toolbar and tabs get wrapped in a `Paper` component.
	   */
	  headerStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the header component when the tabs are fixed to the top of the page.
	   * The optional toolbar and tabs get wrapped in a `Paper` component.
	   */
	  headerClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to the `SwipeableViews`.
	   *
	   * @see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-
	   */
	  swipeableViewsStyle: _propTypes2.default.object,
	
	  /**
	   * An optional className to apply to the `SwipeableViews` container.
	   */
	  swipeableViewsClassName: _propTypes2.default.string,
	
	  /**
	   * An optional style to apply to each slide component.
	   *
	   * @see https://github.com/oliviertassinari/react-swipeable-views#user-content-swipeableviews-
	   */
	  slideStyle: _propTypes2.default.object,
	
	  /**
	   * This should be a `Tabs` component with children of `Tab`. This is used to figure out which
	   * tab's content is currently visible.
	   */
	  children: _propTypes2.default.element.isRequired,
	
	  /**
	   * The component to render the container as.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired,
	
	  /**
	   * The component to render each `TabPanel` as.
	   */
	  panelComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	
	  /**
	   * An optional toolbar to render above the tabs.
	   */
	  toolbar: _propTypes2.default.element,
	
	  /**
	   * An optional active tab index to use. If this is defined, the component will be controlled
	   * and require the `onTabChange` prop to be defined.
	   */
	  activeTabIndex: (0, _controlled2.default)(_propTypes2.default.number, 'onTabChange', 'defaultTabIndex'),
	
	  /**
	   * An optional function to call when a new tab is seleced by swiping or clicking a tab. When
	   * a new tab has been clicked, the callback will include the active tab index, the tab's `id`,
	   * the tab's `controlsId`, the tab's `children`, and the click event.
	   *
	   * If the tab was changed by swiping, it will only contain the new active tab index.
	   *
	   * ```js
	   * onTabChange(newActiveTabIndex, tabId, tabControlsId, tabChildren, event);
	   * ```
	   */
	  onTabChange: _propTypes2.default.func,
	
	  /**
	   * The default tab index to use when the component is uncontrolled.
	   */
	  defaultTabIndex: _propTypes2.default.number.isRequired,
	
	  /**
	   * Boolean if the `toolbar` and `Tabs` should be cloned with `colored: true`.
	   */
	  colored: _propTypes2.default.bool,
	
	  /**
	   * Boolean if the tabs and the optional toolbar should be fixed to the top of the page.
	   */
	  fixed: _propTypes2.default.bool,
	
	  /**
	   * A boolean if a `fixed` `TabsContainer` has tabs with a label and an icon.
	   */
	  labelAndIcon: _propTypes2.default.bool,
	
	  /**
	   * An optional component to render the fixed tabs header as.
	   */
	  headerComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	
	  /**
	   * The zDepth for the fixed tabs header.
	   */
	  headerZDepth: (0, _between2.default)(_propTypes2.default.number, 0, 5)
	};
	TabsContainer.defaultProps = {
	  component: 'section',
	  defaultTabIndex: 0,
	  headerZDepth: 1
	};
	exports.default = TabsContainer;

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TabPanel = exports.MenuTab = exports.Tab = exports.Tabs = exports.TabsContainer = undefined;
	
	var _TabsContainer = __webpack_require__(253);
	
	var _TabsContainer2 = _interopRequireDefault(_TabsContainer);
	
	var _Tabs2 = __webpack_require__(252);
	
	var _Tabs3 = _interopRequireDefault(_Tabs2);
	
	var _Tab2 = __webpack_require__(249);
	
	var _Tab3 = _interopRequireDefault(_Tab2);
	
	var _MenuTab2 = __webpack_require__(108);
	
	var _MenuTab3 = _interopRequireDefault(_MenuTab2);
	
	var _TabPanel2 = __webpack_require__(109);
	
	var _TabPanel3 = _interopRequireDefault(_TabPanel2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _TabsContainer2.default;
	exports.TabsContainer = _TabsContainer2.default;
	exports.Tabs = _Tabs3.default;
	exports.Tab = _Tab3.default;
	exports.MenuTab = _MenuTab3.default;
	exports.TabPanel = _TabPanel3.default;

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _TextArea = __webpack_require__(258);
	
	var _TextArea2 = _interopRequireDefault(_TextArea);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * This component either renders a base `input` tag or the `TextArea` component.
	 */
	var InputField = function (_PureComponent) {
	  _inherits(InputField, _PureComponent);
	
	  function InputField(props) {
	    _classCallCheck(this, InputField);
	
	    var _this = _possibleConstructorReturn(this, (InputField.__proto__ || Object.getPrototypeOf(InputField)).call(this, props));
	
	    _this.getValue = _this.getValue.bind(_this);
	    _this.getField = _this.getField.bind(_this);
	    _this.focus = _this.focus.bind(_this);
	    _this._setField = _this._setField.bind(_this);
	    return _this;
	  }
	
	  _createClass(InputField, [{
	    key: 'getField',
	    value: function getField() {
	      return typeof this.props.rows === 'undefined' ? this._field : this._field.getField();
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      if (typeof this.props.rows === 'undefined') {
	        return this._field.value;
	      }
	
	      return this._field.getValue();
	    }
	  }, {
	    key: 'focus',
	    value: function focus() {
	      this._field.focus();
	    }
	  }, {
	    key: 'blur',
	    value: function blur() {
	      this._field.blur();
	    }
	  }, {
	    key: '_setField',
	    value: function _setField(field) {
	      this._field = field;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          rows = _props.rows,
	          label = _props.label,
	          customSize = _props.customSize,
	          fullWidth = _props.fullWidth,
	          type = _props.type,
	          passwordVisible = _props.passwordVisible,
	          block = _props.block,
	          inlineIndicator = _props.inlineIndicator,
	          props = _objectWithoutProperties(_props, ['className', 'rows', 'label', 'customSize', 'fullWidth', 'type', 'passwordVisible', 'block', 'inlineIndicator']);
	
	      var multiline = typeof rows !== 'undefined';
	      var Component = multiline ? _TextArea2.default : 'input';
	      if (!multiline) {
	        props.type = passwordVisible ? 'text' : type;
	
	        delete props.maxRows;
	        delete props.onHeightChange;
	      } else {
	        props.label = label;
	        props.block = block;
	      }
	
	      return (0, _react.createElement)(Component, _extends({}, props, {
	        rows: rows,
	        ref: this._setField,
	        className: (0, _classnames2.default)('md-text-field', _defineProperty({
	          'md-text': !props.disabled,
	          'md-text--disabled': props.disabled,
	          'md-text-field--inline-indicator': inlineIndicator || !multiline && type === 'password',
	          'md-text-field--multiline': multiline,
	          'md-full-width': fullWidth,
	          'md-text-field--margin': !block && !multiline && !label,
	          'md-text-field--floating-margin': !block && !multiline && label
	        }, 'md-text-field--' + customSize, customSize), className)
	      }));
	    }
	  }]);
	
	  return InputField;
	}(_react.PureComponent);
	
	InputField.propTypes = {
	  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  type: _propTypes2.default.string,
	  placeholder: _propTypes2.default.string,
	  block: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  rows: _propTypes2.default.number,
	  maxRows: _propTypes2.default.number,
	  label: _propTypes2.default.node,
	  fullWidth: _propTypes2.default.bool,
	  customSize: _propTypes2.default.string,
	  passwordVisible: _propTypes2.default.bool,
	  inlineIndicator: _propTypes2.default.bool
	};
	exports.default = InputField;

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Message = function (_PureComponent) {
	  _inherits(Message, _PureComponent);
	
	  function Message() {
	    _classCallCheck(this, Message);
	
	    return _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).apply(this, arguments));
	  }
	
	  _createClass(Message, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          active = _props.active,
	          children = _props.children,
	          className = _props.className;
	
	
	      if (!children) {
	        return null;
	      }
	
	      return _react2.default.createElement(
	        'span',
	        {
	          'aria-hidden': !active,
	          className: (0, _classnames2.default)('md-text-field-message', 'md-text-field-message--' + (active ? '' : 'in') + 'active', className)
	        },
	        children
	      );
	    }
	  }]);
	
	  return Message;
	}(_react.PureComponent);
	
	Message.propTypes = {
	  active: _propTypes2.default.bool,
	  className: _propTypes2.default.string,
	  children: _propTypes2.default.node
	};
	exports.default = Message;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _FontIcon = __webpack_require__(11);
	
	var _FontIcon2 = _interopRequireDefault(_FontIcon);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var PasswordButton = function (_PureComponent) {
	  _inherits(PasswordButton, _PureComponent);
	
	  function PasswordButton(props) {
	    _classCallCheck(this, PasswordButton);
	
	    var _this = _possibleConstructorReturn(this, (PasswordButton.__proto__ || Object.getPrototypeOf(PasswordButton)).call(this, props));
	
	    _this.state = { keyboardFocus: false };
	
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    _this._handleKeyDown = _this._handleKeyDown.bind(_this);
	    _this._handleOutsideClick = _this._handleOutsideClick.bind(_this);
	    return _this;
	  }
	
	  _createClass(PasswordButton, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.state.keyboardFocus) {
	        window.removeEventListener('click', this._handleOutsideClick);
	      }
	    }
	  }, {
	    key: '_handleOutsideClick',
	    value: function _handleOutsideClick(e) {
	      if (this._button && !this._button.contains(e.target)) {
	        window.removeEventListener('click', this._handleOutsideClick);
	        this.setState({ keyboardFocus: false });
	      }
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      if (this.props.onKeyUp) {
	        this.props.onKeyUp(e);
	      }
	
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        window.addEventListener('click', this._handleOutsideClick);
	        this.setState({ keyboardFocus: true });
	      }
	    }
	  }, {
	    key: '_handleKeyDown',
	    value: function _handleKeyDown(e) {
	      if (this.props.onKeyDown) {
	        this.props.onKeyDown(e);
	      }
	
	      var key = e.which || e.keyCode;
	      if (key === _keyCodes.TAB || key === _keyCodes.ENTER || key === _keyCodes.SPACE) {
	        window.removeEventListener('click', this._handleOutsideClick);
	        this.setState({ keyboardFocus: false });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var keyboardFocus = this.state.keyboardFocus;
	
	      var _props = this.props,
	          active = _props.active,
	          passwordVisible = _props.passwordVisible,
	          iconClassName = _props.iconClassName,
	          iconChildren = _props.iconChildren,
	          block = _props.block,
	          floating = _props.floating,
	          props = _objectWithoutProperties(_props, ['active', 'passwordVisible', 'iconClassName', 'iconChildren', 'block', 'floating']);
	
	      return _react2.default.createElement(
	        'button',
	        _extends({}, props, {
	          onKeyDown: this._handleKeyDown,
	          onKeyUp: this._handleKeyUp,
	          type: 'button',
	          className: (0, _classnames2.default)('md-text-field-inline-indicator md-password-btn md-pointer--hover', {
	            'md-password-btn--focus': keyboardFocus,
	            'md-password-btn--active': active,
	            'md-password-btn--invisible': active && !passwordVisible,
	            'md-text-field-inline-indicator--floating': floating,
	            'md-text-field-inline-indicator--block': block
	          })
	        }),
	        _react2.default.createElement(
	          _FontIcon2.default,
	          { iconClassName: iconClassName },
	          iconChildren
	        )
	      );
	    }
	  }]);
	
	  return PasswordButton;
	}(_react.PureComponent);
	
	PasswordButton.propTypes = {
	  active: _propTypes2.default.bool,
	  passwordVisible: _propTypes2.default.bool,
	  iconClassName: _propTypes2.default.string,
	  iconChildren: _propTypes2.default.node,
	  onKeyUp: _propTypes2.default.func,
	  onKeyDown: _propTypes2.default.func,
	  block: _propTypes2.default.bool,
	  floating: _propTypes2.default.bool
	};
	exports.default = PasswordButton;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The `TextArea` component is used to allow a dynamic height for the
	 * `textarea`. The height will keep on changing until the maxRows prop
	 * is met or infinitely if it does not exist, or is 0.
	 */
	var TextArea = function (_PureComponent) {
	  _inherits(TextArea, _PureComponent);
	
	  function TextArea(props) {
	    _classCallCheck(this, TextArea);
	
	    var _this = _possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call(this, props));
	
	    _this.state = { height: null };
	    _this.focus = _this.focus.bind(_this);
	    _this.getField = _this.getField.bind(_this);
	    _this.getValue = _this.getValue.bind(_this);
	    _this._handleChange = _this._handleChange.bind(_this);
	    _this._handleResize = _this._handleResize.bind(_this);
	    _this._syncHeightWithMask = _this._syncHeightWithMask.bind(_this);
	    return _this;
	  }
	
	  _createClass(TextArea, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._rowHeight = this._calcRowHeight(this._field, this.props);
	      this._syncHeightWithMask();
	      window.addEventListener('resize', this._handleResize);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.rows !== nextProps.rows) {
	        this._rowHeight = this._calcRowHeight(this._field, this.props);
	      }
	
	      if (this.props.value !== nextProps.value || this.props.maxRows !== nextProps.maxRows) {
	        this._syncHeightWithMask(nextProps.value);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      window.removeEventListener('resize', this._handleResize);
	    }
	  }, {
	    key: 'getField',
	    value: function getField() {
	      return this._field;
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      return this._field.value;
	    }
	  }, {
	    key: 'focus',
	    value: function focus() {
	      this._field.focus();
	    }
	  }, {
	    key: 'blur',
	    value: function blur() {
	      this._field.blur();
	    }
	  }, {
	    key: '_setMask',
	    value: function _setMask(mask) {
	      this._mask = mask;
	    }
	  }, {
	    key: '_setField',
	    value: function _setField(field) {
	      this._field = field;
	    }
	  }, {
	    key: '_calcRowHeight',
	    value: function _calcRowHeight(field, props) {
	      return field.offsetHeight / props.rows;
	    }
	  }, {
	    key: '_handleResize',
	    value: function _handleResize() {
	      this._rowHeight = this._calcRowHeight(this._field, this.props);
	      this._syncHeightWithMask();
	    }
	  }, {
	    key: '_syncHeightWithMask',
	    value: function _syncHeightWithMask(value) {
	      if (value !== undefined) {
	        this._mask.value = value;
	      }
	
	      var height = this._mask.scrollHeight;
	      if (height === undefined) {
	        return;
	      }
	
	      var _props = this.props,
	          rows = _props.rows,
	          maxRows = _props.maxRows;
	
	      if (maxRows && maxRows > 0) {
	        height = Math.min(height, this._rowHeight * maxRows);
	      }
	
	      height = Math.max(this._rowHeight * rows, height);
	
	      if (this.props.onHeightChange) {
	        // For some reason the md-text-field-multiline-container is 5px
	        // larger than the textareas.. So just add 5 here and on the inline style
	        this.props.onHeightChange(height + 5);
	      }
	
	      this.setState({ height: height });
	    }
	  }, {
	    key: '_handleChange',
	    value: function _handleChange(e) {
	      this._syncHeightWithMask(e.target.value, e);
	
	      if (this.props.onChange) {
	        this.props.onChange(e);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var height = this.state.height;
	
	      var _props2 = this.props,
	          style = _props2.style,
	          defaultValue = _props2.defaultValue,
	          value = _props2.value,
	          className = _props2.className,
	          label = _props2.label,
	          block = _props2.block,
	          props = _objectWithoutProperties(_props2, ['style', 'defaultValue', 'value', 'className', 'label', 'block']);
	
	      delete props.maxRows;
	      delete props.onChange;
	      delete props.onHeightChange;
	
	      return _react2.default.createElement(
	        'div',
	        {
	          style: { height: height && height + 5 },
	          className: (0, _classnames2.default)('md-text-field-multiline-container', {
	            'md-text-field--margin': !label && !block,
	            'md-text-field--floating-margin': label && !block
	          })
	        },
	        _react2.default.createElement('textarea', {
	          ref: function ref(mask) {
	            _this2._mask = mask;
	          },
	          className: (0, _classnames2.default)(className, 'md-text-field--multiline-mask'),
	          readOnly: true,
	          rows: props.rows,
	          tabIndex: -1,
	          style: style,
	          defaultValue: defaultValue,
	          'aria-hidden': true,
	          value: value
	        }),
	        _react2.default.createElement('textarea', _extends({}, props, {
	          ref: function ref(field) {
	            _this2._field = field;
	          },
	          style: Object.assign({}, style, { height: height }),
	          className: className,
	          defaultValue: defaultValue,
	          value: value,
	          onChange: this._handleChange
	        }))
	      );
	    }
	  }]);
	
	  return TextArea;
	}(_react.PureComponent);
	
	TextArea.propTypes = {
	  id: _propTypes2.default.string,
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  rows: _propTypes2.default.number.isRequired,
	  maxRows: _propTypes2.default.number,
	  onChange: _propTypes2.default.func,
	  defaultValue: _propTypes2.default.string,
	  floatingLabel: _propTypes2.default.bool,
	  value: _propTypes2.default.string,
	  onHeightChange: _propTypes2.default.func,
	  block: _propTypes2.default.bool,
	  label: _propTypes2.default.node
	};
	exports.default = TextArea;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _TextField = __webpack_require__(30);
	
	var _TextField2 = _interopRequireDefault(_TextField);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _TextField2.default;

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ToolbarTitle = function (_PureComponent) {
	  _inherits(ToolbarTitle, _PureComponent);
	
	  function ToolbarTitle(props) {
	    _classCallCheck(this, ToolbarTitle);
	
	    var _this = _possibleConstructorReturn(this, (ToolbarTitle.__proto__ || Object.getPrototypeOf(ToolbarTitle)).call(this, props));
	
	    _this.state = {};
	    return _this;
	  }
	
	  _createClass(ToolbarTitle, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          title = _props.title,
	          className = _props.className,
	          prominent = _props.prominent,
	          offset = _props.offset,
	          props = _objectWithoutProperties(_props, ['title', 'className', 'prominent', 'offset']);
	
	      if (!title) {
	        return null;
	      }
	
	      var fullClassName = (0, _classnames2.default)('md-title md-title--toolbar', {
	        'md-title--toolbar-prominent': prominent,
	        'md-title--toolbar-offset': offset
	      }, className);
	
	      if ((0, _react.isValidElement)(title)) {
	        var titleEl = _react.Children.only(title);
	        return (0, _react.cloneElement)(title, {
	          className: (0, _classnames2.default)(fullClassName, titleEl.props.className)
	        });
	      }
	
	      return _react2.default.createElement(
	        'h2',
	        _extends({}, props, {
	          className: fullClassName
	        }),
	        title
	      );
	    }
	  }]);
	
	  return ToolbarTitle;
	}(_react.PureComponent);
	
	ToolbarTitle.propTypes = {
	  className: _propTypes2.default.string,
	  prominent: _propTypes2.default.bool,
	  offset: _propTypes2.default.bool,
	  title: _propTypes2.default.node
	};
	exports.default = ToolbarTitle;

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Toolbar = __webpack_require__(113);
	
	var _Toolbar2 = _interopRequireDefault(_Toolbar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Toolbar2.default;

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _CSSTransitionGroupTick = __webpack_require__(13);
	
	var _CSSTransitionGroupTick2 = _interopRequireDefault(_CSSTransitionGroupTick);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Tooltip = function (_PureComponent) {
	  _inherits(Tooltip, _PureComponent);
	
	  function Tooltip(props) {
	    _classCallCheck(this, Tooltip);
	
	    var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));
	
	    _this.state = {
	      entering: false,
	      leaving: false,
	      active: false,
	      visible: false
	    };
	
	    _this._timeout = null;
	    return _this;
	  }
	
	  _createClass(Tooltip, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(cb) {
	      var _this2 = this;
	
	      this._timeout = setTimeout(function () {
	        _this2._timeout = setTimeout(function () {
	          _this2._timeout = null;
	
	          cb();
	        }, _this2.props.enterTimeout);
	        _this2.setState({ active: true });
	      }, _CSSTransitionGroupTick2.default);
	
	      this.setState({ entering: true });
	    }
	  }, {
	    key: 'componentDidEnter',
	    value: function componentDidEnter() {
	      this.setState({ entering: false, active: false, visible: true });
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(cb) {
	      var _this3 = this;
	
	      if (this._timeout) {
	        clearTimeout(this._timeout);
	      }
	
	      this._timeout = setTimeout(function () {
	        _this3._timeout = setTimeout(function () {
	          _this3._timeout = null;
	
	          cb();
	        }, _this3.props.leaveTimeout);
	
	        _this3.setState({ active: true, visible: false });
	      }, _CSSTransitionGroupTick2.default);
	
	      this.setState({ leaving: true });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _state = this.state,
	          active = _state.active,
	          entering = _state.entering,
	          leaving = _state.leaving,
	          visible = _state.visible;
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          children = _props.children,
	          position = _props.position;
	
	
	      var direction = position === 'top' || position === 'bottom' ? 'horizontal' : 'vertical';
	      return _react2.default.createElement(
	        'span',
	        {
	          style: style,
	          className: (0, _classnames2.default)('md-tooltip md-tooltip--' + position + ' md-tooltip--' + direction, _defineProperty({
	            'md-tooltip--active': active,
	            'md-tooltip--enter': entering,
	            'md-tooltip--enter-active': entering && active,
	            'md-tooltip--leave': leaving,
	            'md-tooltip--leave-active': leaving && active
	          }, 'md-tooltip--' + position + '-active', visible || entering && active), className)
	        },
	        children
	      );
	    }
	  }]);
	
	  return Tooltip;
	}(_react.PureComponent);
	
	Tooltip.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  position: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']).isRequired,
	  children: _propTypes2.default.node.isRequired,
	  enterTimeout: _propTypes2.default.number.isRequired,
	  leaveTimeout: _propTypes2.default.number.isRequired
	};
	exports.default = Tooltip;

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _TransitionGroup = __webpack_require__(86);
	
	var _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);
	
	var _classnames = __webpack_require__(3);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _keyCodes = __webpack_require__(6);
	
	var _captureNextEvent = __webpack_require__(36);
	
	var _captureNextEvent2 = _interopRequireDefault(_captureNextEvent);
	
	var _Tooltip = __webpack_require__(262);
	
	var _Tooltip2 = _interopRequireDefault(_Tooltip);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TooltipContainer = function (_PureComponent) {
	  _inherits(TooltipContainer, _PureComponent);
	
	  function TooltipContainer(props) {
	    _classCallCheck(this, TooltipContainer);
	
	    var _this = _possibleConstructorReturn(this, (TooltipContainer.__proto__ || Object.getPrototypeOf(TooltipContainer)).call(this, props));
	
	    _this.state = { visible: false };
	    _this._delayedTimeout = null;
	
	    _this._setContainers = _this._setContainers.bind(_this);
	    _this._showTooltip = _this._showTooltip.bind(_this);
	    _this._hideTooltip = _this._hideTooltip.bind(_this);
	    _this._stopContextMenu = _this._stopContextMenu.bind(_this);
	    _this._handleKeyUp = _this._handleKeyUp.bind(_this);
	    return _this;
	  }
	
	  _createClass(TooltipContainer, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._container) {
	        this._container.removeEventListener('mouseover', this._showTooltip);
	        this._container.removeEventListener('mouseleave', this._hideTooltip);
	        this._container.removeEventListener('touchstart', this._showTooltip);
	        this._container.removeEventListener('touchend', this._hideTooltip);
	        this._container.removeEventListener('keyup', this._handleKeyUp);
	        this._container.removeEventListener('blur', this._hideTooltip);
	      }
	
	      if (this._delayedTimeout) {
	        clearTimeout(this._delayedTimeout);
	      }
	    }
	  }, {
	    key: '_setContainers',
	    value: function _setContainers(container) {
	      if (container) {
	        this._container = (0, _reactDom.findDOMNode)(container).parentNode;
	
	        this._container.addEventListener('mouseover', this._showTooltip);
	        this._container.addEventListener('mouseleave', this._hideTooltip);
	        this._container.addEventListener('touchstart', this._showTooltip);
	        this._container.addEventListener('touchend', this._hideTooltip);
	        this._container.addEventListener('keyup', this._handleKeyUp);
	        this._container.addEventListener('blur', this._hideTooltip);
	      }
	    }
	  }, {
	    key: '_stopContextMenu',
	    value: function _stopContextMenu(e) {
	      e.preventDefault();
	      window.removeEventListener('contextmenu', this._stopContextMenu, true);
	      (0, _captureNextEvent2.default)('click');
	      this.setState({ visible: true });
	    }
	  }, {
	    key: '_showTooltip',
	    value: function _showTooltip(e) {
	      var _this2 = this;
	
	      if (e.type === 'mouseover' && this._touched) {
	        return;
	      }
	
	      if (e.type === 'touchstart') {
	        this._touched = true;
	
	        window.addEventListener('contextmenu', this._stopContextMenu, true);
	        return;
	      }
	
	      var delay = this.props.delay;
	
	      if (this._delayedTimeout) {
	        clearTimeout(this._delayedTimeout);
	      }
	
	      if (delay) {
	        this._delayedTimeout = setTimeout(function () {
	          _this2._delayedTimeout = null;
	
	          _this2.setState({ visible: true });
	        }, delay);
	      } else {
	        this.setState({ visible: true });
	      }
	    }
	  }, {
	    key: '_hideTooltip',
	    value: function _hideTooltip(e) {
	      if (this._delayedTimeout) {
	        clearTimeout(this._delayedTimeout);
	      }
	
	      if (e.type === 'mouseover' && this._touched) {
	        return;
	      }
	
	      this.setState({ visible: false });
	    }
	  }, {
	    key: '_handleKeyUp',
	    value: function _handleKeyUp(e) {
	      if ((e.which || e.keyCode) === _keyCodes.TAB) {
	        this._showTooltip(e);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var visible = this.state.visible;
	      var _props = this.props,
	          style = _props.style,
	          className = _props.className,
	          tooltipStyle = _props.tooltipStyle,
	          tooltipClassName = _props.tooltipClassName,
	          label = _props.label,
	          position = _props.position,
	          enterTimeout = _props.enterTimeout,
	          leaveTimeout = _props.leaveTimeout;
	
	
	      var tooltip = _react2.default.createElement(
	        _Tooltip2.default,
	        {
	          key: 'tooltip',
	          style: tooltipStyle,
	          className: tooltipClassName,
	          position: position,
	          enterTimeout: enterTimeout,
	          leaveTimeout: leaveTimeout
	        },
	        label
	      );
	
	      return _react2.default.createElement(
	        _TransitionGroup2.default,
	        {
	          style: style,
	          className: (0, _classnames2.default)('md-tooltip-container', className),
	          ref: this._setContainers,
	          component: 'div'
	        },
	        visible ? tooltip : null
	      );
	    }
	  }]);
	
	  return TooltipContainer;
	}(_react.PureComponent);
	
	TooltipContainer.propTypes = {
	  style: _propTypes2.default.object,
	  className: _propTypes2.default.string,
	  tooltipStyle: _propTypes2.default.object,
	  tooltipClassName: _propTypes2.default.string,
	  label: _propTypes2.default.node.isRequired,
	  position: _Tooltip2.default.propTypes.position,
	  delay: _propTypes2.default.number.isRequired,
	  enterTimeout: _propTypes2.default.number.isRequired,
	  leaveTimeout: _propTypes2.default.number.isRequired
	};
	exports.default = TooltipContainer;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _injectTooltip = __webpack_require__(48);
	
	var _injectTooltip2 = _interopRequireDefault(_injectTooltip);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _injectTooltip2.default;

/***/ },
/* 265 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addHours;
	/**
	 * Adds hours to a date.
	 *
	 * @param {Date} time the time to increment
	 * @param {number} hours the number of hours to increment by.
	 * @return a new Date with the new hours set.
	 */
	function addHours(time, hours) {
	  var t = new Date(time.getTime());
	  t.setHours(t.getHours() + hours);
	  return t;
	}

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = extractTimeParts;
	
	var _formatTime = __webpack_require__(116);
	
	var _formatTime2 = _interopRequireDefault(_formatTime);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }
	
	/**
	 * Extracts the hours, minutes, and optional time period from
	 * a date time.
	 *
	 * @param {function} DateTimeFormat the DateTimeFormat function to use.
	 * @param {string|string[]} locales the locales to use.
	 * @param {Date} time the time to extract from.
	 * @return {Object} an object of { hours, minutes, timePeriod }
	 */
	function extractTimeParts(DateTimeFormat, locales, time) {
	  var formatted = (0, _formatTime2.default)(DateTimeFormat, locales, time);
	
	  // IE does not like lookaheads or splitting on [^0-9]
	  // it will include the non-printable characters..
	
	  var _formatted$match = formatted.match(/[0-9]+/g),
	      _formatted$match2 = _slicedToArray(_formatted$match, 2),
	      hours = _formatted$match2[0],
	      minutes = _formatted$match2[1];
	
	  var _formatted$match3 = formatted.match(/[ ,.:A-z]+/g),
	      _formatted$match4 = _toArray(_formatted$match3),
	      separator = _formatted$match4[0],
	      remaining = _formatted$match4.slice(1);
	
	  var timePeriod = void 0;
	  if (remaining && remaining.length) {
	    timePeriod = remaining.join('').trim();
	  }
	
	  return {
	    hours: hours,
	    minutes: separator + minutes,
	    timePeriod: timePeriod
	  };
	}

/***/ },
/* 267 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getLastDay;
	/**
	 * Gets the last day in a month
	 *
	 * @param {Date} sourceDate the date to get the last day from.
	 * @return a new Date as the last day of the month.
	 */
	function getLastDay(sourceDate) {
	  return new Date(sourceDate.getFullYear(), sourceDate.getMonth() + 1, 0);
	}

/***/ },
/* 268 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isDateEqual;
	
	/**
	 * Checks if two dates are equal by comparing the exact time.
	 * This allows null or undefined.
	 *
	 * @param {Date} d1 - The first date to compare.
	 * @param {Date} d2 - The second date to compare.
	 * @return {bool} - true if the dates are equal.
	 */
	function isDateEqual(d1, d2) {
	  if (!d1 && !d2) {
	    return true;
	  } else if (!d1 && d2 || d1 && !d2) {
	    return false;
	  }
	
	  return d1.getTime() === d2.getTime();
	}

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isMonthBefore;
	
	var _stripTime = __webpack_require__(118);
	
	var _stripTime2 = _interopRequireDefault(_stripTime);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Checks if a date is the month before another date without time
	 *
	 * @param {Date} date the date to check if it is before the other
	 * @param {Date} toCompare the date to compare to
	 * @return true if the date is before the other date's first day of month.
	 */
	function isMonthBefore(date, toCompare) {
	  if (!date || !toCompare) {
	    return false;
	  }
	
	  var d1 = (0, _stripTime2.default)(new Date(date.getFullYear(), date.getMonth(), 1));
	  var d2 = (0, _stripTime2.default)(new Date(toCompare.getFullYear(), toCompare.getMonth() - 1, 1));
	  return d1 > d2;
	}

/***/ },
/* 270 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calcTimeFromPoint;
	function isPointInCircle(cx, cy, r, x, y) {
	  var distance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);
	  return distance <= Math.pow(r, 2);
	}
	
	function toDegrees(radians) {
	  return radians * (180 / Math.PI);
	}
	
	/**
	 * Takes a point from a mouse or touch event and a center point of a circle to determine
	 * what the new time should be.
	 *
	 * If the point.y < center.y, the point is in the top half of the circle.
	 * If the point.x < center.x, the point is in the left half of the circle.
	 *
	 * @param {Object} point - The mouse or touch event's point that contains an x and y coordinate.
	 * @param {Object} center - The center point for the circle that contains an x and y coordinate.
	 * @param {Number} innerRadius - An inner radius for clocks that have 24 hour times. This is
	 *    a circle that contains hours 12-23.
	 * @param {Boolean} minutes - Boolena if the current time to be calculated is minutes instead of
	 *    hours.
	 * @param {Boolean} hour12 - Boolean if the clock is a 12 hour clock.
	 * @return {Number} the new time.
	 */
	function calcTimeFromPoint(point, center, innerRadius, minutes, hour12) {
	  var x = point.x - center.x;
	  var y = point.y - center.y;
	  var degrees = toDegrees(Math.atan2(y, x));
	  var sectors = minutes ? 60 : 12;
	  var sectorSize = 360 / sectors;
	  var time = Math.round(degrees / sectorSize);
	
	  // Since the css transform has 0π at π/2 place, we need to offset the
	  // time to that location.
	  time += minutes ? 15 : 3;
	
	  // If time is still negative, it is in the top half of the circle
	  if (time < 0) {
	    time += sectors;
	  }
	
	  // Finally, if it is a 24 hour clock, need to check if the point is actually
	  // selecting hours 13 - 24 (0).
	  if (!minutes && !hour12) {
	    var isInCircle = isPointInCircle(0, 0, innerRadius, x, y);
	
	    if (time === 0 && !isInCircle || time !== 0 && isInCircle) {
	      time += 12;
	    }
	  }
	
	  return time;
	}

/***/ },
/* 271 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calculateHypotenuse;
	/**
	 * Calculates the hypotenuse using the x and y coordinates given.
	 *
	 * @param {number} a the x coordinate
	 * @param {number} b the y coordinate
	 * @return {number} the hypotenuse length for the given x and y coordinates.
	 */
	function calculateHypotenuse(a, b) {
	  return Math.sqrt(a * a + b * b);
	}

/***/ },
/* 272 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calculateValueDistance;
	/**
	 * This calculates the distance from a screen x location to a position in some element
	 * by comparing the width of the element and the element's page position to the screen
	 * x position.
	 *
	 * If the distance is not _normalized_ the distance will be updated to be a percentage
	 * of the element's total width.
	 *
	 * @param {Number} x - the screen x location.
	 * @param {Number} width - the element's width
	 * @param {Number} left - the element's page x position.
	 * @param {Boolean} normalize - boolean if the distance should be a percentage.
	 *
	 * @return {Number} the distance from the element's left position to the page x
	 *    location.
	 */
	function calculateDistance(x, width, left, normalize) {
	  var distance = Math.min(width, Math.max(0, x - left));
	
	  return normalize ? distance : distance / width * 100;
	}
	
	/**
	 * This calculates the new value and distance for a slider. It will compare the page x
	 * location of a touch or mouse event to the slider's track page x position. If the
	 * final value and distance should be _normalized_, they will be updated to be rounded
	 * with the scale and steps in mind.
	 *
	 * The distance will always be contained within a percentage of 0 - 100 while the
	 * value will be contained within the min and max values.
	 *
	 * @param {Number} x - the page x location of the touch or mouse event.
	 * @param {Number} width - the slider's width
	 * @param {Number} left - the slider's left position in the page.
	 * @param {Number} scale - the total number values included in the slider.
	 * @param {Number} step - the amount to increment by.
	 * @param {Number} min - the min value for the slider.
	 * @param {Number} max - the max value for the slider.
	 * @param {Boolean} normalize - boolean if the vaue and distance should be _normalized_.
	 *
	 * @return {Object} an object with the value and distance.
	 */
	function calculateValueDistance(x, width, left, scale, step, min, max, normalize) {
	  var value = void 0;
	  var distance = calculateDistance(x, width, left, normalize);
	  if (normalize) {
	    value = Math.round(distance / (width / scale));
	    if (step < 1) {
	      var decimals = String(step).split('.')[1];
	      var corrector = typeof decimals !== 'undefined' && decimals.length > 0 ? Math.pow(10, decimals.length) : 1;
	
	      var modded = value * corrector % (step * corrector);
	      if (modded !== 0 && modded >= step / 2) {
	        value += step - modded;
	      } else if (modded !== 0) {
	        value -= modded;
	      }
	    }
	
	    distance = value / scale * 100;
	    value += min;
	  } else {
	    value = min + Math.round(distance / 100 * scale);
	  }
	
	  if (step > 1) {
	    value *= step;
	  } else if (step > 0 && step < 1) {
	    value *= step;
	  }
	
	  return {
	    distance: Math.max(0, Math.min(100, distance)),
	    value: Math.max(min, Math.min(max, value))
	  };
	}

/***/ },
/* 273 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isWithinStep;
	function isWithinStep(value, step) {
	  var decimals = String(step).split('.')[1];
	  var corrector = typeof decimals !== 'undefined' && decimals.length > 0 ? Math.pow(10, decimals.length) : 1;
	
	  return value * corrector % (step * corrector) === 0;
	}

/***/ },
/* 274 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = minMaxLoop;
	/**
	 * Keeps a number within the min and max values. When the number becomes less
	 * than the min, it will loop around and be the max value. When the number is
	 * greater than the max, it will loop around and be the min value.
	 *
	 * @param {Number} current - the current number
	 * @param {Number} min - the minimum number allowed
	 * @param {Number} max - the maximum number allowed
	 * @param {Boolean} increment - boolean if the value should be incremented or decremented by
	 *    1.
	 * @return {Number} the next number
	 */
	function minMaxLoop(current, min, max) {
	  var increment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	
	  var next = current + (increment ? 1 : -1);
	  if (max < next) {
	    next = min;
	  } else if (next < min) {
	    next = max;
	  }
	
	  return next;
	}

/***/ },
/* 275 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = updateUnit;
	/**
	 * Takes in a css unit (px, rem, em, etc) or a number and applies a function to the
	 * number part of the unit.
	 *
	 * If the unit was a number to start with and a `toUnit` is given, the number will
	 * be given the `toUnit`. Otherwise the number will be returned.
	 *
	 * If the unit was a string, the original units will be applied back to the updated
	 * unit's value.
	 *
	 * @param {number|String} unit - the unit to apply a function to.
	 * @param {function} fn - the function to apply to the number.
	 * @param {String=} toUnit - an optional unit to cast the updated unit to.
	 *
	 * @return {String|number} the updated unit.
	 */
	function updateUnit(unit, fn, toUnit) {
	  var updated = fn(parseInt(unit, 10));
	
	  if (typeof unit === 'number') {
	    return toUnit ? '' + updated + toUnit : updated;
	  }
	
	  return '' + updated + unit.replace(/[0-9]/g, '');
	}

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = minNumber;
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Validates the a prop's value is greater than or equal to the minimum value.
	 *
	 * @param {Number} min - the minimum value for the prop.
	 * @param {Boolean} required - Boolean if the prop is required.
	 * @return {Error} an error or null.
	 */
	function minNumber(min, required) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    var validator = _propTypes2.default.number;
	    if (required) {
	      validator = validator.isRequired;
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!required && !err && props[propName] < min) {
	      err = new Error('The ' + location + ' `' + propFullNameSafe + '` must be greater than or equal to the min value ' + ('`' + min + '` but received `' + props[propName] + '` for the `' + componentNameSafe + '` component.'));
	    }
	
	    return err;
	  };
	}

/***/ },
/* 277 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = oneRequiredForA11y;
	/**
	 * This validator checks that either the current prop is defined and valid or that one of the
	 * other given prop names are defined. If it fails it returns an error for a11y.
	 *
	 * @param {function} validator - The React PropTypes validator to use for the given prop.
	 * @param {String[]} otherPropNames - Any other prop names to validate against.
	 * @return {Error} an error or null
	 */
	function oneRequiredForA11y(validator) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    otherPropNames[_key - 1] = arguments[_key];
	  }
	
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var allPropNames = [propFullNameSafe].concat(otherPropNames);
	
	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && !allPropNames.filter(function (pn) {
	      return typeof props[pn] !== 'undefined';
	    }).length) {
	      err = new Error('One of the following props are required to make ' + componentNameSafe + ' accessible ' + ('for users of assistive technologies such as screen readers. `' + allPropNames.join('`, ') + '`.'));
	    }
	
	    return err;
	  };
	}

/***/ },
/* 278 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = oneRequiredForA11yIf;
	function oneRequiredForA11yIf(validator, requiringProp) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    otherPropNames[_key - 2] = arguments[_key];
	  }
	
	  return function validate(props, propName, componentName, location, propFullName) {
	    var filterUndefined = function filterUndefined(pn) {
	      return typeof props[pn] !== 'undefined';
	    };
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var requiredDefined = typeof props[requiringProp] !== 'undefined';
	    var allPropNames = [propFullNameSafe].concat(otherPropNames);
	
	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && requiredDefined && !allPropNames.filter(filterUndefined).length) {
	      err = new Error('One of the following props are required to make `' + componentNameSafe + '` accessible ' + ('for users of assistive technologies such as screen readers when using the `' + requiringProp + '` ') + ('prop. `' + allPropNames.join('`, `') + '`.'));
	    }
	
	    return err;
	  };
	}

/***/ },
/* 279 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = requiredForA11yIfNot;
	/**
	 * This validator checkes that the current prop is valid and defined ONLY if
	 * any of the `otherPropNames` are not true or defined.
	 *
	 * @param {function} validator - The React PropTypes validator to use for the given prop.
	 * @param {String[]} otherPropNames - Any other prop names to validate against.
	 * @return {Error} an error or null
	 */
	function requiredForA11yIfNot(validator) {
	  for (var _len = arguments.length, otherPropNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    otherPropNames[_key - 1] = arguments[_key];
	  }
	
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	    var defined = typeof props[propName] !== 'undefined';
	
	    for (var _len2 = arguments.length, args = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
	      args[_key2 - 5] = arguments[_key2];
	    }
	
	    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	    if (!err && !defined && !otherPropNames.filter(function (pn) {
	      return !!props[pn];
	    }).length) {
	      err = new Error('The `' + propFullNameSafe + '` ' + location + ' is required to make `' + componentNameSafe + '` accessible ' + 'for users of assistive technologies such as screen readers.');
	    }
	
	    return err;
	  };
	}

/***/ },
/* 280 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = capitalizeFirst;
	/**
	 * Capitalizes the first letter of a string. If the string is falsish, it will be
	 * returned as is. If the string is only one letter long, it will be capitalized;
	 *
	 * @param {String} str - The string to capitalize.
	 * @return {String} the updated string or false-ish self.
	 */
	function capitalizeFirst(str) {
	  if (!str) {
	    return str;
	  } else if (str.length === 1) {
	    return str.toUpperCase();
	  }
	
	  return "" + str.charAt(0).toUpperCase() + str.substring(1, str.length);
	}

/***/ },
/* 281 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = closest;
	/**
	 * A _very_ primitive polyfill for the Element.closest function. If this is a browser that doesn't
	 * support it (IE, Edge, etc), it will just keep searching the parent elements until the nodeName
	 * matches the provided type.
	 *
	 * @param {Element} el - the html element to find a closest node type for
	 * @param {String} type - the html element type to find.
	 * @return {Element} the found element or null.
	 */
	function closest(el, type) {
	  if (typeof el.closest === 'function') {
	    return el.closest(type);
	  }
	
	  var nodeType = type.toUpperCase();
	  var node = el.parentElement;
	  while (node && node.parentElement) {
	    if (node.nodeName === nodeType) {
	      return node;
	    }
	
	    node = node.parentElement;
	  }
	
	  return null;
	}

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toggleScroll;
	
	var _getPagePosition = __webpack_require__(125);
	
	var _getPagePosition2 = _interopRequireDefault(_getPagePosition);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A utility function for toggling the overflow visibility on an element. This will either target
	 * the given `selector`, or the `body` tag to set a `className`.
	 *
	 * If the `visible` param is `undefined`, the className will be toggled.
	 * If the `visible` param is `true`, the className will be added.
	 * If the `visible` param is `false`, the className will be removed.
	 *
	 *
	 * > This depends on the `classList` attribute on elements.
	 *
	 * @param {bool=} visible - An optional boolean to determine how the `className` will be applied.
	 * @param {string|Object=} selector - An optional query selector string to use to select an element.
	 * @param {string=} className - The className to apply. Defaults to 'md-overflow-hidden'
	 */
	function toggleScroll(scrollable, selector) {
	  var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'md-no-scroll';
	
	  var queryable = !selector || typeof selector === 'string';
	  var el = void 0;
	  if (queryable) {
	    el = selector ? document.querySelector(selector) : document.querySelector('html');
	  } else {
	    el = selector;
	  }
	
	  if (!el) {
	    return;
	  }
	
	  if (typeof scrollable === 'undefined') {
	    scrollable = !el.classList.contains(className);
	  }
	
	  if (scrollable && !el.classList.contains(className)) {
	    el.style.top = '-' + (queryable ? (0, _getPagePosition2.default)('y') : el.scrollTop) + 'px';
	    el.classList.add(className);
	  } else if (!scrollable && el.classList.contains(className)) {
	    var scrollTop = Math.abs(parseInt(el.style.top, 10));
	    el.classList.remove(className);
	    el.style.top = null;
	
	    if (!selector) {
	      window.scrollTo(0, scrollTop);
	    } else {
	      el.scrollTop = scrollTop;
	    }
	  }
	}

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(297), __esModule: true };

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(298), __esModule: true };

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(299), __esModule: true };

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(300), __esModule: true };

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(301), __esModule: true };

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(302), __esModule: true };

/***/ },
/* 289 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(284);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(128);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(286);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(283);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(129);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 293 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (obj, keys) {
	  var target = {};
	
	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }
	
	  return target;
	};

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(129);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 295 */
/***/ function(module, exports) {

	
	module.exports = function chain(){
	  var len = arguments.length
	  var args = [];
	
	  for (var i = 0; i < len; i++)
	    args[i] = arguments[i]
	
	  args = args.filter(function(fn){ return fn != null })
	
	  if (args.length === 0) return undefined
	  if (args.length === 1) return args[0]
	
	  return args.reduce(function(current, next){
	    return function chainedFunction() {
	      current.apply(this, arguments);
	      next.apply(this, arguments);
	    };
	  })
	}


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(322);
	module.exports = __webpack_require__(15).Object.assign;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(323);
	var $Object = __webpack_require__(15).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(324);
	var $Object = __webpack_require__(15).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(325);
	module.exports = __webpack_require__(15).Object.getPrototypeOf;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(326);
	module.exports = __webpack_require__(15).Object.setPrototypeOf;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(329);
	__webpack_require__(327);
	__webpack_require__(330);
	__webpack_require__(331);
	module.exports = __webpack_require__(15).Symbol;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(328);
	__webpack_require__(332);
	module.exports = __webpack_require__(81).f('iterator');

/***/ },
/* 303 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 304 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(24)
	  , toLength  = __webpack_require__(320)
	  , toIndex   = __webpack_require__(319);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(42)
	  , gOPS    = __webpack_require__(73)
	  , pIE     = __webpack_require__(49);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(16).document && document.documentElement;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(130);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(72)
	  , descriptor     = __webpack_require__(50)
	  , setToStringTag = __webpack_require__(74)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(32)(IteratorPrototype, __webpack_require__(33)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 310 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(42)
	  , toIObject = __webpack_require__(24);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(51)('meta')
	  , isObject = __webpack_require__(41)
	  , has      = __webpack_require__(22)
	  , setDesc  = __webpack_require__(23).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(31)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(42)
	  , gOPS     = __webpack_require__(73)
	  , pIE      = __webpack_require__(49)
	  , toObject = __webpack_require__(78)
	  , IObject  = __webpack_require__(134)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(31)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(23)
	  , anObject = __webpack_require__(40)
	  , getKeys  = __webpack_require__(42);
	
	module.exports = __webpack_require__(20) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(24)
	  , gOPN      = __webpack_require__(137).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(21)
	  , core    = __webpack_require__(15)
	  , fails   = __webpack_require__(31);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(41)
	  , anObject = __webpack_require__(40);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(131)(Function.call, __webpack_require__(136).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(77)
	  , defined   = __webpack_require__(68);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(77)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(77)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(304)
	  , step             = __webpack_require__(310)
	  , Iterators        = __webpack_require__(70)
	  , toIObject        = __webpack_require__(24);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(135)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(21);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(313)});

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(21)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(72)});

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(21);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(20), 'Object', {defineProperty: __webpack_require__(23).f});

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(78)
	  , $getPrototypeOf = __webpack_require__(138);
	
	__webpack_require__(316)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(21);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(317).set});

/***/ },
/* 327 */
/***/ function(module, exports) {



/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(318)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(135)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(16)
	  , has            = __webpack_require__(22)
	  , DESCRIPTORS    = __webpack_require__(20)
	  , $export        = __webpack_require__(21)
	  , redefine       = __webpack_require__(140)
	  , META           = __webpack_require__(312).KEY
	  , $fails         = __webpack_require__(31)
	  , shared         = __webpack_require__(76)
	  , setToStringTag = __webpack_require__(74)
	  , uid            = __webpack_require__(51)
	  , wks            = __webpack_require__(33)
	  , wksExt         = __webpack_require__(81)
	  , wksDefine      = __webpack_require__(80)
	  , keyOf          = __webpack_require__(311)
	  , enumKeys       = __webpack_require__(306)
	  , isArray        = __webpack_require__(308)
	  , anObject       = __webpack_require__(40)
	  , toIObject      = __webpack_require__(24)
	  , toPrimitive    = __webpack_require__(79)
	  , createDesc     = __webpack_require__(50)
	  , _create        = __webpack_require__(72)
	  , gOPNExt        = __webpack_require__(315)
	  , $GOPD          = __webpack_require__(136)
	  , $DP            = __webpack_require__(23)
	  , $keys          = __webpack_require__(42)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(137).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(49).f  = $propertyIsEnumerable;
	  __webpack_require__(73).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(71)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(32)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(80)('asyncIterator');

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(80)('observable');

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(321);
	var global        = __webpack_require__(16)
	  , hide          = __webpack_require__(32)
	  , Iterators     = __webpack_require__(70)
	  , TO_STRING_TAG = __webpack_require__(33)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = addClass;
	
	var _hasClass = __webpack_require__(334);
	
	var _hasClass2 = _interopRequireDefault(_hasClass);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass2.default)(element)) element.className = element.className + ' ' + className;
	}
	module.exports = exports['default'];

/***/ },
/* 334 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hasClass;
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + element.className + " ").indexOf(" " + className + " ") !== -1;
	}
	module.exports = exports["default"];

/***/ },
/* 335 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	};

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(52);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var off = function off() {};
	if (_inDOM2.default) {
	  off = function () {
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  }();
	}
	
	exports.default = off;
	module.exports = exports['default'];

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(52);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var on = function on() {};
	if (_inDOM2.default) {
	  on = function () {
	
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, function (e) {
	        e = e || window.event;
	        e.target = e.target || e.srcElement;
	        e.currentTarget = node;
	        handler.call(node, e);
	      });
	    };
	  }();
	}
	
	exports.default = on;
	module.exports = exports['default'];

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _inDOM = __webpack_require__(52);
	
	var _inDOM2 = _interopRequireDefault(_inDOM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var vendors = ['', 'webkit', 'moz', 'o', 'ms'];
	var cancel = 'clearTimeout';
	var raf = fallback;
	var compatRaf = void 0;
	
	var getKey = function getKey(vendor, k) {
	  return vendor + (!vendor ? k : k[0].toUpperCase() + k.substr(1)) + 'AnimationFrame';
	};
	
	if (_inDOM2.default) {
	  vendors.some(function (vendor) {
	    var rafKey = getKey(vendor, 'request');
	
	    if (rafKey in window) {
	      cancel = getKey(vendor, 'cancel');
	      return raf = function raf(cb) {
	        return window[rafKey](cb);
	      };
	    }
	  });
	}
	
	/* https://github.com/component/raf */
	var prev = new Date().getTime();
	function fallback(fn) {
	  var curr = new Date().getTime(),
	      ms = Math.max(0, 16 - (curr - prev)),
	      req = setTimeout(fn, ms);
	
	  prev = curr;
	  return req;
	}
	
	compatRaf = function compatRaf(cb) {
	  return raf(cb);
	};
	compatRaf.cancel = function (id) {
	  window[cancel] && typeof window[cancel] === 'function' && window[cancel](id);
	};
	exports.default = compatRaf;
	module.exports = exports['default'];

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;


/***/ },
/* 340 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	if (true) {
	  var invariant = __webpack_require__(143);
	  var warning = __webpack_require__(144);
	  var ReactPropTypesSecret = __webpack_require__(145);
	  var loggedTypeFailures = {};
	}
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (true) {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	
	          var stack = getStack ? getStack() : '';
	
	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}
	
	module.exports = checkPropTypes;


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(142);
	var invariant = __webpack_require__(143);
	var warning = __webpack_require__(144);
	
	var ReactPropTypesSecret = __webpack_require__(145);
	var checkPropTypes = __webpack_require__(341);
	
	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */
	
	  var ANONYMOUS = '<<anonymous>>';
	
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };
	
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/
	
	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	
	  function createChainableTypeChecker(validate) {
	    if (true) {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (("development") !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	
	    return chainedCheckType;
	  }
	
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }
	
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	       true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	
	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }
	
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }
	
	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }
	
	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	
	    return false;
	  }
	
	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }
	
	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }
	
	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _mapToZero = __webpack_require__(83);
	
	var _mapToZero2 = _interopRequireDefault(_mapToZero);
	
	var _stripStyle = __webpack_require__(54);
	
	var _stripStyle2 = _interopRequireDefault(_stripStyle);
	
	var _stepper3 = __webpack_require__(85);
	
	var _stepper4 = _interopRequireDefault(_stepper3);
	
	var _performanceNow = __webpack_require__(53);
	
	var _performanceNow2 = _interopRequireDefault(_performanceNow);
	
	var _raf = __webpack_require__(82);
	
	var _raf2 = _interopRequireDefault(_raf);
	
	var _shouldStopAnimation = __webpack_require__(84);
	
	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var msPerFrame = 1000 / 60;
	
	var Motion = (function (_React$Component) {
	  _inherits(Motion, _React$Component);
	
	  _createClass(Motion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyle: _propTypes2['default'].objectOf(_propTypes2['default'].number),
	      style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      onRest: _propTypes2['default'].func
	    },
	    enumerable: true
	  }]);
	
	  function Motion(props) {
	    var _this = this;
	
	    _classCallCheck(this, Motion);
	
	    _React$Component.call(this, props);
	    this.wasAnimating = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyle = null;
	
	    this.clearUnreadPropStyle = function (destStyle) {
	      var dirty = false;
	      var _state = _this.state;
	      var currentStyle = _state.currentStyle;
	      var currentVelocity = _state.currentVelocity;
	      var lastIdealStyle = _state.lastIdealStyle;
	      var lastIdealVelocity = _state.lastIdealVelocity;
	
	      for (var key in destStyle) {
	        if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	          continue;
	        }
	
	        var styleValue = destStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            currentStyle = _extends({}, currentStyle);
	            currentVelocity = _extends({}, currentVelocity);
	            lastIdealStyle = _extends({}, lastIdealStyle);
	            lastIdealVelocity = _extends({}, lastIdealVelocity);
	          }
	
	          currentStyle[key] = styleValue;
	          currentVelocity[key] = 0;
	          lastIdealStyle[key] = styleValue;
	          lastIdealVelocity[key] = 0;
	        }
	      }
	
	      if (dirty) {
	        _this.setState({ currentStyle: currentStyle, currentVelocity: currentVelocity, lastIdealStyle: lastIdealStyle, lastIdealVelocity: lastIdealVelocity });
	      }
	    };
	
	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // check if we need to animate in the first place
	        var propsStyle = _this.props.style;
	        if (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {
	          if (_this.wasAnimating && _this.props.onRest) {
	            _this.props.onRest();
	          }
	
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.wasAnimating = false;
	          _this.accumulatedTime = 0;
	          return;
	        }
	
	        _this.wasAnimating = true;
	
	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }
	
	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }
	
	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
	
	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};
	
	        for (var key in propsStyle) {
	          if (!Object.prototype.hasOwnProperty.call(propsStyle, key)) {
	            continue;
	          }
	
	          var styleValue = propsStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = _this.state.lastIdealStyle[key];
	            var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];
	            for (var i = 0; i < framesToCatchUp; i++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }
	
	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];
	
	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }
	
	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;
	
	        _this.setState({
	          currentStyle: newCurrentStyle,
	          currentVelocity: newCurrentVelocity,
	          lastIdealStyle: newLastIdealStyle,
	          lastIdealVelocity: newLastIdealVelocity
	        });
	
	        _this.unreadPropStyle = null;
	
	        _this.startAnimationIfNecessary();
	      });
	    };
	
	    this.state = this.defaultState();
	  }
	
	  Motion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyle = _props.defaultStyle;
	    var style = _props.style;
	
	    var currentStyle = defaultStyle || _stripStyle2['default'](style);
	    var currentVelocity = _mapToZero2['default'](currentStyle);
	    return {
	      currentStyle: currentStyle,
	      currentVelocity: currentVelocity,
	      lastIdealStyle: currentStyle,
	      lastIdealVelocity: currentVelocity
	    };
	  };
	
	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400
	
	  Motion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };
	
	  Motion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyle != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyle);
	    }
	
	    this.unreadPropStyle = props.style;
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };
	
	  Motion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };
	
	  Motion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyle);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };
	
	  return Motion;
	})(_react2['default'].Component);
	
	exports['default'] = Motion;
	module.exports = exports['default'];
	
	// after checking for unreadPropStyle != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _mapToZero = __webpack_require__(83);
	
	var _mapToZero2 = _interopRequireDefault(_mapToZero);
	
	var _stripStyle = __webpack_require__(54);
	
	var _stripStyle2 = _interopRequireDefault(_stripStyle);
	
	var _stepper3 = __webpack_require__(85);
	
	var _stepper4 = _interopRequireDefault(_stepper3);
	
	var _performanceNow = __webpack_require__(53);
	
	var _performanceNow2 = _interopRequireDefault(_performanceNow);
	
	var _raf = __webpack_require__(82);
	
	var _raf2 = _interopRequireDefault(_raf);
	
	var _shouldStopAnimation = __webpack_require__(84);
	
	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var msPerFrame = 1000 / 60;
	
	function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {
	  for (var i = 0; i < currentStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {
	      return false;
	    }
	  }
	  return true;
	}
	
	var StaggeredMotion = (function (_React$Component) {
	  _inherits(StaggeredMotion, _React$Component);
	
	  _createClass(StaggeredMotion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].objectOf(_propTypes2['default'].number)),
	      styles: _propTypes2['default'].func.isRequired,
	      children: _propTypes2['default'].func.isRequired
	    },
	    enumerable: true
	  }]);
	
	  function StaggeredMotion(props) {
	    var _this = this;
	
	    _classCallCheck(this, StaggeredMotion);
	
	    _React$Component.call(this, props);
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;
	
	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _state = _this.state;
	      var currentStyles = _state.currentStyles;
	      var currentVelocities = _state.currentVelocities;
	      var lastIdealStyles = _state.lastIdealStyles;
	      var lastIdealVelocities = _state.lastIdealVelocities;
	
	      var someDirty = false;
	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i];
	        var dirty = false;
	
	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }
	
	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              someDirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	          }
	        }
	      }
	
	      if (someDirty) {
	        _this.setState({ currentStyles: currentStyles, currentVelocities: currentVelocities, lastIdealStyles: lastIdealStyles, lastIdealVelocities: lastIdealVelocities });
	      }
	    };
	
	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        var destStyles = _this.props.styles(_this.state.lastIdealStyles);
	
	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }
	
	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }
	
	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }
	
	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
	
	        var newLastIdealStyles = [];
	        var newLastIdealVelocities = [];
	        var newCurrentStyles = [];
	        var newCurrentVelocities = [];
	
	        for (var i = 0; i < destStyles.length; i++) {
	          var destStyle = destStyles[i];
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};
	
	          for (var key in destStyle) {
	            if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	              continue;
	            }
	
	            var styleValue = destStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];
	              var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }
	
	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];
	
	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }
	
	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	        }
	
	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;
	
	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities
	        });
	
	        _this.unreadPropStyles = null;
	
	        _this.startAnimationIfNecessary();
	      });
	    };
	
	    this.state = this.defaultState();
	  }
	
	  StaggeredMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	
	    var currentStyles = defaultStyles || styles().map(_stripStyle2['default']);
	    var currentVelocities = currentStyles.map(function (currentStyle) {
	      return _mapToZero2['default'](currentStyle);
	    });
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: currentStyles,
	      lastIdealVelocities: currentVelocities
	    };
	  };
	
	  StaggeredMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };
	
	  StaggeredMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }
	
	    this.unreadPropStyles = props.styles(this.state.lastIdealStyles);
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };
	
	  StaggeredMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };
	
	  StaggeredMotion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };
	
	  return StaggeredMotion;
	})(_react2['default'].Component);
	
	exports['default'] = StaggeredMotion;
	module.exports = exports['default'];
	
	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400
	
	// after checking for unreadPropStyles != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _mapToZero = __webpack_require__(83);
	
	var _mapToZero2 = _interopRequireDefault(_mapToZero);
	
	var _stripStyle = __webpack_require__(54);
	
	var _stripStyle2 = _interopRequireDefault(_stripStyle);
	
	var _stepper3 = __webpack_require__(85);
	
	var _stepper4 = _interopRequireDefault(_stepper3);
	
	var _mergeDiff = __webpack_require__(346);
	
	var _mergeDiff2 = _interopRequireDefault(_mergeDiff);
	
	var _performanceNow = __webpack_require__(53);
	
	var _performanceNow2 = _interopRequireDefault(_performanceNow);
	
	var _raf = __webpack_require__(82);
	
	var _raf2 = _interopRequireDefault(_raf);
	
	var _shouldStopAnimation = __webpack_require__(84);
	
	var _shouldStopAnimation2 = _interopRequireDefault(_shouldStopAnimation);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var msPerFrame = 1000 / 60;
	
	// the children function & (potential) styles function asks as param an
	// Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format
	// {key: string, data?: any, style: PlainStyle}. However, the way we keep
	// internal states doesn't contain such a data structure (check the state and
	// TransitionMotionState). So when children function and others ask for such
	// data we need to generate them on the fly by combining mergedPropsStyles and
	// currentStyles/lastIdealStyles
	function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {
	  // Copy the value to a `const` so that Flow understands that the const won't
	  // change and will be non-nullable in the callback below.
	  var cUnreadPropStyles = unreadPropStyles;
	  if (cUnreadPropStyles == null) {
	    return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	      return {
	        key: mergedPropsStyle.key,
	        data: mergedPropsStyle.data,
	        style: plainStyles[i]
	      };
	    });
	  }
	  return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	    for (var j = 0; j < cUnreadPropStyles.length; j++) {
	      if (cUnreadPropStyles[j].key === mergedPropsStyle.key) {
	        return {
	          key: cUnreadPropStyles[j].key,
	          data: cUnreadPropStyles[j].data,
	          style: plainStyles[i]
	        };
	      }
	    }
	    return { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i] };
	  });
	}
	
	function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {
	  if (mergedPropsStyles.length !== destStyles.length) {
	    return false;
	  }
	
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (mergedPropsStyles[i].key !== destStyles[i].key) {
	      return false;
	    }
	  }
	
	  // we have the invariant that mergedPropsStyles and
	  // currentStyles/currentVelocities/last* are synced in terms of cells, see
	  // mergeAndSync comment for more info
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	// core key merging logic
	
	// things to do: say previously merged style is {a, b}, dest style (prop) is {b,
	// c}, previous current (interpolating) style is {a, b}
	// **invariant**: current[i] corresponds to merged[i] in terms of key
	
	// steps:
	// turn merged style into {a?, b, c}
	//    add c, value of c is destStyles.c
	//    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}
	// turn current (interpolating) style from {a, b} into {a?, b, c}
	//    maybe remove a
	//    certainly add c, value of c is willEnter(c)
	// loop over merged and construct new current
	// dest doesn't change, that's owner's
	function mergeAndSync(willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {
	  var newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {
	    var leavingStyle = willLeave(oldMergedPropsStyle);
	    if (leavingStyle == null) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    if (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    return { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };
	  });
	
	  var newCurrentStyles = [];
	  var newCurrentVelocities = [];
	  var newLastIdealStyles = [];
	  var newLastIdealVelocities = [];
	  for (var i = 0; i < newMergedPropsStyles.length; i++) {
	    var newMergedPropsStyleCell = newMergedPropsStyles[i];
	    var foundOldIndex = null;
	    for (var j = 0; j < oldMergedPropsStyles.length; j++) {
	      if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {
	        foundOldIndex = j;
	        break;
	      }
	    }
	    // TODO: key search code
	    if (foundOldIndex == null) {
	      var plainStyle = willEnter(newMergedPropsStyleCell);
	      newCurrentStyles[i] = plainStyle;
	      newLastIdealStyles[i] = plainStyle;
	
	      var velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);
	      newCurrentVelocities[i] = velocity;
	      newLastIdealVelocities[i] = velocity;
	    } else {
	      newCurrentStyles[i] = oldCurrentStyles[foundOldIndex];
	      newLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];
	      newCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];
	      newLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];
	    }
	  }
	
	  return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];
	}
	
	var TransitionMotion = (function (_React$Component) {
	  _inherits(TransitionMotion, _React$Component);
	
	  _createClass(TransitionMotion, null, [{
	    key: 'propTypes',
	    value: {
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].number).isRequired
	      })),
	      styles: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired
	      }))]).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      willEnter: _propTypes2['default'].func,
	      willLeave: _propTypes2['default'].func,
	      didLeave: _propTypes2['default'].func
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      willEnter: function willEnter(styleThatEntered) {
	        return _stripStyle2['default'](styleThatEntered.style);
	      },
	      // recall: returning null makes the current unmounting TransitionStyle
	      // disappear immediately
	      willLeave: function willLeave() {
	        return null;
	      },
	      didLeave: function didLeave() {}
	    },
	    enumerable: true
	  }]);
	
	  function TransitionMotion(props) {
	    var _this = this;
	
	    _classCallCheck(this, TransitionMotion);
	
	    _React$Component.call(this, props);
	    this.unmounting = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;
	
	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _mergeAndSync = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, unreadPropStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);
	
	      var mergedPropsStyles = _mergeAndSync[0];
	      var currentStyles = _mergeAndSync[1];
	      var currentVelocities = _mergeAndSync[2];
	      var lastIdealStyles = _mergeAndSync[3];
	      var lastIdealVelocities = _mergeAndSync[4];
	
	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i].style;
	        var dirty = false;
	
	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }
	
	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	              mergedPropsStyles[i] = {
	                key: mergedPropsStyles[i].key,
	                data: mergedPropsStyles[i].data,
	                style: _extends({}, mergedPropsStyles[i].style)
	              };
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	            mergedPropsStyles[i].style[key] = styleValue;
	          }
	        }
	      }
	
	      // unlike the other 2 components, we can't detect staleness and optionally
	      // opt out of setState here. each style object's data might contain new
	      // stuff we're not/cannot compare
	      _this.setState({
	        currentStyles: currentStyles,
	        currentVelocities: currentVelocities,
	        mergedPropsStyles: mergedPropsStyles,
	        lastIdealStyles: lastIdealStyles,
	        lastIdealVelocities: lastIdealVelocities
	      });
	    };
	
	    this.startAnimationIfNecessary = function () {
	      if (_this.unmounting) {
	        return;
	      }
	
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // https://github.com/chenglou/react-motion/pull/420
	        // > if execution passes the conditional if (this.unmounting), then
	        // executes async defaultRaf and after that component unmounts and after
	        // that the callback of defaultRaf is called, then setState will be called
	        // on unmounted component.
	        if (_this.unmounting) {
	          return;
	        }
	
	        var propStyles = _this.props.styles;
	        var destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;
	
	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }
	
	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }
	
	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }
	
	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);
	
	        var _mergeAndSync2 = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);
	
	        var newMergedPropsStyles = _mergeAndSync2[0];
	        var newCurrentStyles = _mergeAndSync2[1];
	        var newCurrentVelocities = _mergeAndSync2[2];
	        var newLastIdealStyles = _mergeAndSync2[3];
	        var newLastIdealVelocities = _mergeAndSync2[4];
	
	        for (var i = 0; i < newMergedPropsStyles.length; i++) {
	          var newMergedPropsStyle = newMergedPropsStyles[i].style;
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};
	
	          for (var key in newMergedPropsStyle) {
	            if (!Object.prototype.hasOwnProperty.call(newMergedPropsStyle, key)) {
	              continue;
	            }
	
	            var styleValue = newMergedPropsStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = newLastIdealStyles[i][key];
	              var newLastIdealVelocityValue = newLastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }
	
	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);
	
	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];
	
	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }
	
	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	        }
	
	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;
	
	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities,
	          mergedPropsStyles: newMergedPropsStyles
	        });
	
	        _this.unreadPropStyles = null;
	
	        _this.startAnimationIfNecessary();
	      });
	    };
	
	    this.state = this.defaultState();
	  }
	
	  TransitionMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	    var willEnter = _props.willEnter;
	    var willLeave = _props.willLeave;
	    var didLeave = _props.didLeave;
	
	    var destStyles = typeof styles === 'function' ? styles(defaultStyles) : styles;
	
	    // this is special. for the first time around, we don't have a comparison
	    // between last (no last) and current merged props. we'll compute last so:
	    // say default is {a, b} and styles (dest style) is {b, c}, we'll
	    // fabricate last as {a, b}
	    var oldMergedPropsStyles = undefined;
	    if (defaultStyles == null) {
	      oldMergedPropsStyles = destStyles;
	    } else {
	      oldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {
	        // TODO: key search code
	        for (var i = 0; i < destStyles.length; i++) {
	          if (destStyles[i].key === defaultStyleCell.key) {
	            return destStyles[i];
	          }
	        }
	        return defaultStyleCell;
	      });
	    }
	    var oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    });
	    var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    });
	
	    var _mergeAndSync3 = mergeAndSync(
	    // Because this is an old-style createReactClass component, Flow doesn't
	    // understand that the willEnter and willLeave props have default values
	    // and will always be present.
	    willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really
	    oldCurrentVelocities);
	
	    var mergedPropsStyles = _mergeAndSync3[0];
	    var currentStyles = _mergeAndSync3[1];
	    var currentVelocities = _mergeAndSync3[2];
	    var lastIdealStyles = _mergeAndSync3[3];
	    var lastIdealVelocities = _mergeAndSync3[4];
	    // oldLastIdealVelocities really
	
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities,
	      mergedPropsStyles: mergedPropsStyles
	    };
	  };
	
	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)
	
	  TransitionMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };
	
	  TransitionMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }
	
	    var styles = props.styles;
	    if (typeof styles === 'function') {
	      this.unreadPropStyles = styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));
	    } else {
	      this.unreadPropStyles = styles;
	    }
	
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };
	
	  TransitionMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unmounting = true;
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };
	
	  TransitionMotion.prototype.render = function render() {
	    var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);
	    var renderedChildren = this.props.children(hydratedStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };
	
	  return TransitionMotion;
	})(_react2['default'].Component);
	
	exports['default'] = TransitionMotion;
	module.exports = exports['default'];
	
	// list of styles, each containing interpolating values. Part of what's passed
	// to children function. Notice that this is
	// Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,
	// data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles
	// contains the key & data info (so that we only have a single source of truth
	// for these, and to save space). Check the comment for `rehydrateStyles` to
	// see how we regenerate the entirety of what's passed to children function
	
	// the array that keeps track of currently rendered stuff! Including stuff
	// that you've unmounted but that's still animating. This is where it lives
	
	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400

/***/ },
/* 346 */
/***/ function(module, exports) {

	
	
	// core keys merging algorithm. If previous render's keys are [a, b], and the
	// next render's [c, b, d], what's the final merged keys and ordering?
	
	// - c and a must both be before b
	// - b before d
	// - ordering between a and c ambiguous
	
	// this reduces to merging two partially ordered lists (e.g. lists where not
	// every item has a definite ordering, like comparing a and c above). For the
	// ambiguous ordering we deterministically choose to place the next render's
	// item after the previous'; so c after a
	
	// this is called a topological sorting. Except the existing algorithms don't
	// work well with js bc of the amount of allocation, and isn't optimized for our
	// current use-case bc the runtime is linear in terms of edges (see wiki for
	// meaning), which is huge when two lists have many common elements
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = mergeDiff;
	
	function mergeDiff(prev, next, onRemove) {
	  // bookkeeping for easier access of a key's index below. This is 2 allocations +
	  // potentially triggering chrome hash map mode for objs (so it might be faster
	
	  var prevKeyIndex = {};
	  for (var i = 0; i < prev.length; i++) {
	    prevKeyIndex[prev[i].key] = i;
	  }
	  var nextKeyIndex = {};
	  for (var i = 0; i < next.length; i++) {
	    nextKeyIndex[next[i].key] = i;
	  }
	
	  // first, an overly elaborate way of merging prev and next, eliminating
	  // duplicates (in terms of keys). If there's dupe, keep the item in next).
	  // This way of writing it saves allocations
	  var ret = [];
	  for (var i = 0; i < next.length; i++) {
	    ret[i] = next[i];
	  }
	  for (var i = 0; i < prev.length; i++) {
	    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {
	      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't
	      // merge in keys that the user desires to kill
	      var fill = onRemove(i, prev[i]);
	      if (fill != null) {
	        ret.push(fill);
	      }
	    }
	  }
	
	  // now all the items all present. Core sorting logic to have the right order
	  return ret.sort(function (a, b) {
	    var nextOrderA = nextKeyIndex[a.key];
	    var nextOrderB = nextKeyIndex[b.key];
	    var prevOrderA = prevKeyIndex[a.key];
	    var prevOrderB = prevKeyIndex[b.key];
	
	    if (nextOrderA != null && nextOrderB != null) {
	      // both keys in next
	      return nextKeyIndex[a.key] - nextKeyIndex[b.key];
	    } else if (prevOrderA != null && prevOrderB != null) {
	      // both keys in prev
	      return prevKeyIndex[a.key] - prevKeyIndex[b.key];
	    } else if (nextOrderA != null) {
	      // key a in next, key b in prev
	
	      // how to determine the order between a and b? We find a "pivot" (term
	      // abuse), a key present in both prev and next, that is sandwiched between
	      // a and b. In the context of our above example, if we're comparing a and
	      // d, b's (the only) pivot
	      for (var i = 0; i < next.length; i++) {
	        var pivot = next[i].key;
	        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	          continue;
	        }
	
	        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
	          return -1;
	        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
	          return 1;
	        }
	      }
	      // pluggable. default to: next bigger than prev
	      return 1;
	    }
	    // prevOrderA, nextOrderB
	    for (var i = 0; i < next.length; i++) {
	      var pivot = next[i].key;
	      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	        continue;
	      }
	      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {
	        return 1;
	      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {
	        return -1;
	      }
	    }
	    // pluggable. default to: next bigger than prev
	    return -1;
	  });
	}
	
	module.exports = exports['default'];
	// to loop through and find a key's index each time), but I no longer care

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = reorderKeys;
	
	var hasWarned = false;
	
	function reorderKeys() {
	  if (true) {
	    if (!hasWarned) {
	      hasWarned = true;
	      console.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\'s new styles array API.');
	    }
	  }
	}
	
	module.exports = exports['default'];

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	exports['default'] = spring;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _presets = __webpack_require__(146);
	
	var _presets2 = _interopRequireDefault(_presets);
	
	var defaultConfig = _extends({}, _presets2['default'].noWobble, {
	  precision: 0.01
	});
	
	function spring(val, config) {
	  return _extends({}, defaultConfig, config, { val: val });
	}
	
	module.exports = exports['default'];

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(2);
	
	var _warning = __webpack_require__(55);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* eslint-disable flowtype/require-valid-file-annotation */
	
	var checkIndexBounds = function checkIndexBounds(props) {
	  var index = props.index,
	      children = props.children;
	
	
	  var childrenCount = _react.Children.count(children);
	
	   true ? (0, _warning2.default)(index >= 0 && index <= childrenCount, 'react-swipeable-view: the new index: ' + index + ' is out of bounds: [0-' + childrenCount + '].') : void 0;
	};
	
	exports.default = checkIndexBounds;

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = computeIndex;
	
	var _react = __webpack_require__(2);
	
	var _constant = __webpack_require__(148);
	
	var _constant2 = _interopRequireDefault(_constant);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//  weak
	
	function computeIndex(params) {
	  var children = params.children,
	      startIndex = params.startIndex,
	      startX = params.startX,
	      pageX = params.pageX,
	      viewLength = params.viewLength,
	      resistance = params.resistance;
	
	
	  var indexMax = _react.Children.count(children) - 1;
	  var index = startIndex + (startX - pageX) / viewLength;
	  var newStartX = void 0;
	
	  if (!resistance) {
	    // Reset the starting point
	    if (index < 0) {
	      index = 0;
	      newStartX = (index - startIndex) * viewLength + pageX;
	    } else if (index > indexMax) {
	      index = indexMax;
	      newStartX = (index - startIndex) * viewLength + pageX;
	    }
	  } else if (index < 0) {
	    index = Math.exp(index * _constant2.default.RESISTANCE_COEF) - 1;
	  } else if (index > indexMax) {
	    index = indexMax + 1 - Math.exp((indexMax - index) * _constant2.default.RESISTANCE_COEF);
	  }
	
	  return {
	    index: index,
	    startX: newStartX
	  };
	}

/***/ },
/* 351 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	//  weak
	
	var getDisplaySameSlide = function getDisplaySameSlide(props, nextProps) {
	  var displaySameSlide = false;
	
	  if (props.children.length && nextProps.children.length) {
	    var oldChildren = props.children[props.index];
	    var oldKey = oldChildren ? oldChildren.key : 'empty';
	
	    if (oldKey !== null) {
	      var newChildren = nextProps.children[nextProps.index];
	      var newKey = newChildren ? newChildren.key : 'empty';
	
	      if (oldKey === newKey) {
	        displaySameSlide = true;
	      }
	    }
	  }
	
	  return displaySameSlide;
	};
	
	exports.default = getDisplaySameSlide;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _checkIndexBounds = __webpack_require__(349);
	
	Object.defineProperty(exports, 'checkIndexBounds', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_checkIndexBounds).default;
	  }
	});
	
	var _computeIndex = __webpack_require__(350);
	
	Object.defineProperty(exports, 'computeIndex', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_computeIndex).default;
	  }
	});
	
	var _constant = __webpack_require__(148);
	
	Object.defineProperty(exports, 'constant', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_constant).default;
	  }
	});
	
	var _getDisplaySameSlide = __webpack_require__(351);
	
	Object.defineProperty(exports, 'getDisplaySameSlide', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getDisplaySameSlide).default;
	  }
	});
	
	var _mod = __webpack_require__(353);
	
	Object.defineProperty(exports, 'mod', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_mod).default;
	  }
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 353 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/* eslint-disable flowtype/require-valid-file-annotation */
	
	function mod(n, m) {
	  var q = n % m;
	  return q < 0 ? q + m : q;
	}
	
	exports.default = mod;

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(291);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _assign = __webpack_require__(128);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _objectWithoutProperties2 = __webpack_require__(293);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _getPrototypeOf = __webpack_require__(285);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(289);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(290);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(294);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(292);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	exports.getDomTreeShapes = getDomTreeShapes;
	exports.findNativeHandler = findNativeHandler;
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _warning = __webpack_require__(55);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _properties = __webpack_require__(141);
	
	var _properties2 = _interopRequireDefault(_properties);
	
	var _on = __webpack_require__(337);
	
	var _on2 = _interopRequireDefault(_on);
	
	var _off = __webpack_require__(336);
	
	var _off2 = _interopRequireDefault(_off);
	
	var _reactSwipeableViewsCore = __webpack_require__(352);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function addEventListenerEnhanced(node, event, handler, options) {
	  (0, _on2.default)(node, event, handler, options);
	  return {
	    remove: function remove() {
	      (0, _off2.default)(node, event, handler, options);
	    }
	  };
	} //  weak
	
	var styleInjected = false;
	
	// Support old version of iOS.
	// To be deleted in 2018.
	function injectStyle() {
	  // Inject once for all the instances
	  if (!styleInjected) {
	    var style = document.createElement('style');
	    style.innerHTML = '\n      .react-swipeable-view-container {\n        display: -webkit-box;\n      }\n    ';
	
	    if (document.body) {
	      document.body.appendChild(style);
	    }
	    styleInjected = true;
	  }
	}
	
	var styles = {
	  container: {
	    direction: 'ltr',
	    display: 'flex'
	  },
	  slide: {
	    width: '100%',
	    WebkitFlexShrink: 0,
	    flexShrink: 0,
	    overflow: 'auto'
	  }
	};
	
	var axisProperties = {
	  root: {
	    x: {
	      overflowX: 'hidden'
	    },
	    'x-reverse': {
	      overflowX: 'hidden'
	    },
	    y: {
	      overflowY: 'hidden'
	    },
	    'y-reverse': {
	      overflowY: 'hidden'
	    }
	  },
	  flexDirection: {
	    x: 'row',
	    'x-reverse': 'row-reverse',
	    y: 'column',
	    'y-reverse': 'column-reverse'
	  },
	  transform: {
	    x: function x(translate) {
	      return 'translate(' + -translate + '%, 0)';
	    },
	    'x-reverse': function xReverse(translate) {
	      return 'translate(' + translate + '%, 0)';
	    },
	    y: function y(translate) {
	      return 'translate(0, ' + -translate + '%)';
	    },
	    'y-reverse': function yReverse(translate) {
	      return 'translate(0, ' + translate + '%)';
	    }
	  },
	  length: {
	    x: 'width',
	    'x-reverse': 'width',
	    y: 'height',
	    'y-reverse': 'height'
	  },
	  rotationMatrix: {
	    x: {
	      x: [1, 0],
	      y: [0, 1]
	    },
	    'x-reverse': {
	      x: [-1, 0],
	      y: [0, 1]
	    },
	    y: {
	      x: [0, 1],
	      y: [1, 0]
	    },
	    'y-reverse': {
	      x: [0, -1],
	      y: [1, 0]
	    }
	  },
	  scrollPosition: {
	    x: 'scrollLeft',
	    'x-reverse': 'scrollLeft',
	    y: 'scrollTop',
	    'y-reverse': 'scrollTop'
	  },
	  scrollLength: {
	    x: 'scrollWidth',
	    'x-reverse': 'scrollWidth',
	    y: 'scrollHeight',
	    'y-reverse': 'scrollHeight'
	  },
	  clientLength: {
	    x: 'clientWidth',
	    'x-reverse': 'clientWidth',
	    y: 'clientHeight',
	    'y-reverse': 'clientHeight'
	  }
	};
	
	function createTransition(property, options) {
	  var duration = options.duration,
	      easeFunction = options.easeFunction,
	      delay = options.delay;
	
	
	  return property + ' ' + duration + ' ' + easeFunction + ' ' + delay;
	}
	
	// We are using a 2x2 rotation matrix.
	function applyRotationMatrix(touch, axis) {
	  var rotationMatrix = axisProperties.rotationMatrix[axis];
	
	  return {
	    pageX: rotationMatrix.x[0] * touch.pageX + rotationMatrix.x[1] * touch.pageY,
	    pageY: rotationMatrix.y[0] * touch.pageX + rotationMatrix.y[1] * touch.pageY
	  };
	}
	
	function adaptMouse(event) {
	  event.touches = [{ pageX: event.pageX, pageY: event.pageY }];
	  return event;
	}
	
	function getDomTreeShapes(element, rootNode) {
	  var domTreeShapes = [];
	
	  while (element && element !== rootNode) {
	    // We reach a Swipeable View, no need to look higher in the dom tree.
	    if (element.hasAttribute('data-swipeable')) {
	      break;
	    }
	
	    var style = window.getComputedStyle(element);
	
	    if (
	    // Ignore the scroll children if the element is absolute positioned.
	    style.getPropertyValue('position') === 'absolute' ||
	    // Ignore the scroll children if the element has an overflowX hidden
	    style.getPropertyValue('overflow-x') === 'hidden') {
	      domTreeShapes = [];
	    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
	      // Ignore the nodes that have no width.
	      // Keep elements with a scroll
	      domTreeShapes.push({
	        element: element,
	        scrollWidth: element.scrollWidth,
	        scrollHeight: element.scrollHeight,
	        clientWidth: element.clientWidth,
	        clientHeight: element.clientHeight,
	        scrollLeft: element.scrollLeft,
	        scrollTop: element.scrollTop
	      });
	    }
	
	    element = element.parentNode;
	  }
	
	  return domTreeShapes;
	}
	
	// We can only have one node at the time claiming ownership for handling the swipe.
	// Otherwise, the UX would be confusing.
	// That's why we use a singleton here.
	var nodeHowClaimedTheScroll = null;
	
	function findNativeHandler(params) {
	  var domTreeShapes = params.domTreeShapes,
	      indexCurrent = params.indexCurrent,
	      index = params.index,
	      axis = params.axis;
	
	
	  return domTreeShapes.some(function (shape) {
	    // Determine if we are going backward or forward.
	    var goingForward = index <= indexCurrent;
	    if (axis === 'x' || axis === 'y') {
	      goingForward = !goingForward;
	    }
	
	    var scrollPosition = shape[axisProperties.scrollPosition[axis]];
	
	    var areNotAtStart = scrollPosition > 0;
	    var areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];
	
	    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
	      nodeHowClaimedTheScroll = shape.element;
	      return true;
	    }
	
	    return false;
	  });
	}
	
	var SwipeableViews = function (_Component) {
	  (0, _inherits3.default)(SwipeableViews, _Component);
	
	  function SwipeableViews() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, SwipeableViews);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = SwipeableViews.__proto__ || (0, _getPrototypeOf2.default)(SwipeableViews)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.rootNode = null, _this.containerNode = null, _this.ignoreNextScrollEvents = false, _this.viewLength = 0, _this.startX = 0, _this.lastX = 0, _this.vx = 0, _this.startY = 0, _this.isSwiping = undefined, _this.started = false, _this.startIndex = 0, _this.transitionListener = null, _this.touchMoveListener = null, _this.activeSlide = null, _this.handleSwipeStart = function (event) {
	      var axis = _this.props.axis;
	
	      // Latency and rapid rerenders on some devices can leave a period where rootNode briefly equals null
	
	      if (_this.rootNode === null) {
	        return;
	      }
	
	      var touch = applyRotationMatrix(event.touches[0], axis);
	
	      _this.viewLength = _this.rootNode.getBoundingClientRect()[axisProperties.length[axis]];
	      _this.startX = touch.pageX;
	      _this.lastX = touch.pageX;
	      _this.vx = 0;
	      _this.startY = touch.pageY;
	      _this.isSwiping = undefined;
	      _this.started = true;
	
	      var computedStyle = window.getComputedStyle(_this.containerNode);
	      var transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
	
	      if (transform) {
	        var transformValues = transform.split('(')[1].split(')')[0].split(',');
	        var rootStyle = window.getComputedStyle(_this.rootNode);
	
	        var tranformNormalized = applyRotationMatrix({
	          pageX: parseInt(transformValues[4], 10),
	          pageY: parseInt(transformValues[5], 10)
	        }, axis);
	
	        _this.startIndex = -tranformNormalized.pageX / (_this.viewLength - parseInt(rootStyle.paddingLeft, 10) - parseInt(rootStyle.paddingRight, 10));
	      }
	    }, _this.handleSwipeMove = function (event) {
	      // The touch start event can be cancel.
	      // Makes sure we set a starting point.
	      if (!_this.started) {
	        _this.handleTouchStart(event);
	        return;
	      }
	
	      // Latency and rapid rerenders on some devices can leave a period where rootNode briefly equals null
	      if (_this.rootNode === null) {
	        return;
	      }
	
	      // We are not supposed to hanlde this touch move.
	      if (nodeHowClaimedTheScroll !== null && nodeHowClaimedTheScroll !== _this.rootNode) {
	        return;
	      }
	
	      var _this$props = _this.props,
	          axis = _this$props.axis,
	          children = _this$props.children,
	          ignoreNativeScroll = _this$props.ignoreNativeScroll,
	          onSwitching = _this$props.onSwitching,
	          resistance = _this$props.resistance;
	
	
	      var touch = applyRotationMatrix(event.touches[0], axis);
	
	      // We don't know yet.
	      if (_this.isSwiping === undefined) {
	        var dx = Math.abs(_this.startX - touch.pageX);
	        var dy = Math.abs(_this.startY - touch.pageY);
	
	        var isSwiping = dx > dy && dx > _reactSwipeableViewsCore.constant.UNCERTAINTY_THRESHOLD;
	
	        // We are likely to be swiping, let's prevent the scroll event.
	        if (dx > dy) {
	          event.preventDefault();
	        }
	
	        if (isSwiping === true || dy > _reactSwipeableViewsCore.constant.UNCERTAINTY_THRESHOLD) {
	          _this.isSwiping = isSwiping;
	          _this.startX = touch.pageX; // Shift the starting point.
	
	          return; // Let's wait the next touch event to move something.
	        }
	      }
	
	      if (_this.isSwiping !== true) {
	        return;
	      }
	
	      // We are swiping, let's prevent the scroll event.
	      event.preventDefault();
	
	      // Low Pass filter.
	      _this.vx = _this.vx * 0.5 + (touch.pageX - _this.lastX) * 0.5;
	      _this.lastX = touch.pageX;
	
	      var _computeIndex = (0, _reactSwipeableViewsCore.computeIndex)({
	        children: children,
	        resistance: resistance,
	        pageX: touch.pageX,
	        startIndex: _this.startIndex,
	        startX: _this.startX,
	        viewLength: _this.viewLength
	      }),
	          index = _computeIndex.index,
	          startX = _computeIndex.startX;
	
	      // Add support for native scroll elements.
	
	
	      if (nodeHowClaimedTheScroll === null && !ignoreNativeScroll) {
	        var domTreeShapes = getDomTreeShapes(event.target, _this.rootNode);
	        var hasFoundNativeHandler = findNativeHandler({
	          domTreeShapes: domTreeShapes,
	          indexCurrent: _this.state.indexCurrent,
	          index: index,
	          axis: axis
	        });
	
	        // We abort the touch move handler.
	        if (hasFoundNativeHandler) {
	          return;
	        }
	      }
	
	      // We are moving toward the edges.
	      if (startX) {
	        _this.startX = startX;
	      } else if (nodeHowClaimedTheScroll === null) {
	        nodeHowClaimedTheScroll = _this.rootNode;
	      }
	
	      _this.setState({
	        displaySameSlide: false,
	        isDragging: true,
	        indexCurrent: index
	      }, function () {
	        if (onSwitching) {
	          onSwitching(index, 'move');
	        }
	      });
	    }, _this.handleSwipeEnd = function () {
	      nodeHowClaimedTheScroll = null;
	
	      // The touch start event can be cancel.
	      // Makes sure that a starting point is set.
	      if (!_this.started) {
	        return;
	      }
	
	      _this.started = false;
	
	      if (_this.isSwiping !== true) {
	        return;
	      }
	
	      var indexLatest = _this.state.indexLatest;
	      var indexCurrent = _this.state.indexCurrent;
	      var delta = indexLatest - indexCurrent;
	
	      var indexNew = void 0;
	
	      // Quick movement
	      if (Math.abs(_this.vx) > _this.props.threshold) {
	        if (_this.vx > 0) {
	          indexNew = Math.floor(indexCurrent);
	        } else {
	          indexNew = Math.ceil(indexCurrent);
	        }
	      } else if (Math.abs(delta) > _this.props.hysteresis) {
	        // Some hysteresis with indexLatest.
	        indexNew = delta > 0 ? Math.floor(indexCurrent) : Math.ceil(indexCurrent);
	      } else {
	        indexNew = indexLatest;
	      }
	
	      var indexMax = _react.Children.count(_this.props.children) - 1;
	
	      if (indexNew < 0) {
	        indexNew = 0;
	      } else if (indexNew > indexMax) {
	        indexNew = indexMax;
	      }
	
	      _this.setState({
	        indexCurrent: indexNew,
	        indexLatest: indexNew,
	        isDragging: false
	      }, function () {
	        if (_this.props.onSwitching) {
	          _this.props.onSwitching(indexNew, 'end');
	        }
	
	        if (_this.props.onChangeIndex && indexNew !== indexLatest) {
	          _this.props.onChangeIndex(indexNew, indexLatest);
	        }
	
	        // Manually calling handleTransitionEnd in that case as isn't otherwise.
	        if (indexCurrent === indexLatest) {
	          _this.handleTransitionEnd();
	        }
	      });
	    }, _this.handleTouchStart = function (event) {
	      if (_this.props.onTouchStart) {
	        _this.props.onTouchStart(event);
	      }
	      _this.handleSwipeStart(event);
	    }, _this.handleTouchEnd = function (event) {
	      if (_this.props.onTouchEnd) {
	        _this.props.onTouchEnd(event);
	      }
	      _this.handleSwipeEnd(event);
	    }, _this.handleMouseDown = function (event) {
	      if (_this.props.onMouseDown) {
	        _this.props.onMouseDown(event);
	      }
	      event.persist();
	      _this.handleSwipeStart(adaptMouse(event));
	    }, _this.handleMouseUp = function (event) {
	      if (_this.props.onMouseUp) {
	        _this.props.onMouseUp(event);
	      }
	      _this.handleSwipeEnd(adaptMouse(event));
	    }, _this.handleMouseLeave = function (event) {
	      if (_this.props.onMouseLeave) {
	        _this.props.onMouseLeave(event);
	      }
	
	      // Filter out events
	      if (_this.started) {
	        _this.handleSwipeEnd(adaptMouse(event));
	      }
	    }, _this.handleMouseMove = function (event) {
	      if (_this.props.onMouseMove) {
	        _this.props.onMouseMove(event);
	      }
	
	      // Filter out events
	      if (_this.started) {
	        _this.handleSwipeMove(adaptMouse(event));
	      }
	    }, _this.handleScroll = function (event) {
	      if (_this.props.onScroll) {
	        _this.props.onScroll(event);
	      }
	
	      // Ignore events bubbling up.
	      if (event.target !== _this.rootNode) {
	        return;
	      }
	
	      if (_this.ignoreNextScrollEvents) {
	        _this.ignoreNextScrollEvents = false;
	        return;
	      }
	
	      var indexLatest = _this.state.indexLatest;
	      var indexNew = Math.ceil(event.target.scrollLeft / event.target.clientWidth) + indexLatest;
	
	      _this.ignoreNextScrollEvents = true;
	      // Reset the scroll position.
	      event.target.scrollLeft = 0;
	
	      if (_this.props.onChangeIndex && indexNew !== indexLatest) {
	        _this.props.onChangeIndex(indexNew, indexLatest);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	  // Added as an ads.
	
	
	  (0, _createClass3.default)(SwipeableViews, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _this2 = this;
	
	      return {
	        swipeableViews: {
	          slideUpdateHeight: function slideUpdateHeight() {
	            _this2.updateHeight();
	          }
	        }
	      };
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      if (true) {
	        (0, _reactSwipeableViewsCore.checkIndexBounds)(this.props);
	      }
	
	      this.setState({
	        indexCurrent: this.props.index,
	        indexLatest: this.props.index,
	        isDragging: false,
	        isFirstRender: true,
	        heightLatest: 0
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this3 = this;
	
	      // Subscribe to transition end events.
	      this.transitionListener = addEventListenerEnhanced(this.containerNode, _properties2.default.end, function () {
	        _this3.handleTransitionEnd();
	      });
	
	      // Block the thread to handle that event.
	      this.touchMoveListener = addEventListenerEnhanced(this.rootNode, 'touchmove', function (event) {
	        // Handling touch events is disabled.
	        if (_this3.props.disabled) {
	          return;
	        }
	        _this3.handleSwipeMove(event);
	      }, {
	        passive: false
	      });
	
	      /* eslint-disable react/no-did-mount-set-state */
	      this.setState({
	        isFirstRender: false
	      });
	      /* eslint-enable react/no-did-mount-set-state */
	
	      injectStyle();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var index = nextProps.index;
	
	
	      if (typeof index === 'number' && index !== this.props.index) {
	        if (true) {
	          (0, _reactSwipeableViewsCore.checkIndexBounds)(nextProps);
	        }
	
	        this.setState({
	          // If true, we are going to change the children. We shoudn't animate it.
	          displaySameSlide: (0, _reactSwipeableViewsCore.getDisplaySameSlide)(this.props, nextProps),
	          indexCurrent: index,
	          indexLatest: index
	        });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.transitionListener.remove();
	      this.touchMoveListener.remove();
	    }
	  }, {
	    key: 'handleTransitionEnd',
	    value: function handleTransitionEnd() {
	      // Filters out when changing the children
	      if (this.state.displaySameSlide) {
	        return;
	      }
	
	      // The rest callback is triggered when swiping. It's just noise.
	      // We filter it out.
	      if (this.props.onTransitionEnd && !this.state.isDragging) {
	        this.props.onTransitionEnd();
	      }
	    }
	  }, {
	    key: 'updateHeight',
	    value: function updateHeight() {
	      if (this.activeSlide !== null) {
	        var child = this.activeSlide.children[0];
	        if (child !== undefined && child.offsetHeight !== undefined && this.state.heightLatest !== child.offsetHeight) {
	          this.setState({
	            heightLatest: child.offsetHeight
	          });
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;
	
	      var _props = this.props,
	          animateHeight = _props.animateHeight,
	          animateTransitions = _props.animateTransitions,
	          axis = _props.axis,
	          children = _props.children,
	          containerStyleProp = _props.containerStyle,
	          disabled = _props.disabled,
	          enableMouseEvents = _props.enableMouseEvents,
	          hysteresis = _props.hysteresis,
	          ignoreNativeScroll = _props.ignoreNativeScroll,
	          index = _props.index,
	          onChangeIndex = _props.onChangeIndex,
	          onSwitching = _props.onSwitching,
	          onTransitionEnd = _props.onTransitionEnd,
	          resistance = _props.resistance,
	          slideStyleProp = _props.slideStyle,
	          slideClassName = _props.slideClassName,
	          springConfig = _props.springConfig,
	          style = _props.style,
	          threshold = _props.threshold,
	          other = (0, _objectWithoutProperties3.default)(_props, ['animateHeight', 'animateTransitions', 'axis', 'children', 'containerStyle', 'disabled', 'enableMouseEvents', 'hysteresis', 'ignoreNativeScroll', 'index', 'onChangeIndex', 'onSwitching', 'onTransitionEnd', 'resistance', 'slideStyle', 'slideClassName', 'springConfig', 'style', 'threshold']);
	      var _state = this.state,
	          displaySameSlide = _state.displaySameSlide,
	          heightLatest = _state.heightLatest,
	          indexCurrent = _state.indexCurrent,
	          isDragging = _state.isDragging,
	          isFirstRender = _state.isFirstRender;
	
	
	      var touchEvents = !disabled ? {
	        onTouchStart: this.handleTouchStart,
	        onTouchEnd: this.handleTouchEnd
	      } : {};
	
	      var mouseEvents = !disabled && enableMouseEvents ? {
	        onMouseDown: this.handleMouseDown,
	        onMouseUp: this.handleMouseUp,
	        onMouseLeave: this.handleMouseLeave,
	        onMouseMove: this.handleMouseMove
	      } : {};
	
	      // There is no point to animate if we are already providing a height.
	       true ? (0, _warning2.default)(!animateHeight || !containerStyleProp || !containerStyleProp.height && !containerStyleProp.maxHeight && !containerStyleProp.minHeight, 'react-swipeable-view: You are setting animateHeight to true but you are also providing a custom height.\nThe custom height has a higher priority than the animateHeight property.\nSo animateHeight is most likely having no effect at all.') : void 0;
	
	      var slideStyle = (0, _assign2.default)({}, styles.slide, slideStyleProp);
	
	      var transition = void 0;
	      var WebkitTransition = void 0;
	
	      if (isDragging || !animateTransitions || displaySameSlide) {
	        transition = 'all 0s ease 0s';
	        WebkitTransition = 'all 0s ease 0s';
	      } else {
	        transition = createTransition('transform', springConfig);
	        WebkitTransition = createTransition('-webkit-transform', springConfig);
	
	        if (heightLatest !== 0) {
	          var additionalTranstion = ', ' + createTransition('height', springConfig);
	          transition += additionalTranstion;
	          WebkitTransition += additionalTranstion;
	        }
	      }
	
	      var transform = axisProperties.transform[axis](indexCurrent * 100);
	      var containerStyle = {
	        WebkitTransform: transform,
	        transform: transform,
	        height: null,
	        WebkitFlexDirection: axisProperties.flexDirection[axis],
	        flexDirection: axisProperties.flexDirection[axis],
	        WebkitTransition: WebkitTransition,
	        transition: transition
	      };
	
	      if (animateHeight) {
	        containerStyle.height = heightLatest;
	      }
	
	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({
	          ref: function ref(node) {
	            _this4.rootNode = node;
	          },
	          style: (0, _assign2.default)({}, axisProperties.root[axis], style)
	        }, other, touchEvents, mouseEvents, {
	          onScroll: this.handleScroll
	        }),
	        _react2.default.createElement(
	          'div',
	          {
	            ref: function ref(node) {
	              _this4.containerNode = node;
	            },
	            style: (0, _assign2.default)({}, containerStyle, styles.container, containerStyleProp),
	            className: 'react-swipeable-view-container'
	          },
	          _react.Children.map(children, function (child, indexChild) {
	            if (isFirstRender && indexChild > 0) {
	              return null;
	            }
	
	             true ? (0, _warning2.default)((0, _react.isValidElement)(child), 'react-swipeable-view: one of the children provided is invalid: ' + child + '.\nWe are expecting a valid React Element') : void 0;
	
	            var ref = void 0;
	            var hidden = true;
	
	            if (indexChild === _this4.state.indexLatest) {
	              hidden = false;
	
	              if (animateHeight) {
	                ref = function ref(node) {
	                  _this4.activeSlide = node;
	                  _this4.updateHeight();
	                };
	                slideStyle.overflowY = 'hidden';
	              }
	            }
	
	            return _react2.default.createElement(
	              'div',
	              {
	                ref: ref,
	                style: slideStyle,
	                className: slideClassName,
	                'aria-hidden': hidden,
	                'data-swipeable': 'true'
	              },
	              child
	            );
	          })
	        )
	      );
	    }
	  }]);
	  return SwipeableViews;
	}(_react.Component);
	
	SwipeableViews.displayName = 'ReactSwipableView';
	SwipeableViews.defaultProps = {
	  animateHeight: false,
	  animateTransitions: true,
	  axis: 'x',
	  disabled: false,
	  enableMouseEvents: false,
	  hysteresis: 0.6,
	  ignoreNativeScroll: false,
	  index: 0,
	  threshold: 5,
	  springConfig: {
	    duration: '0.35s',
	    easeFunction: 'cubic-bezier(0.15, 0.3, 0.25, 1)',
	    delay: '0s'
	  },
	  resistance: false
	};
	SwipeableViews.childContextTypes = {
	  swipeableViews: _propTypes2.default.shape({
	    slideUpdateHeight: _propTypes2.default.func
	  })
	};
	 true ? SwipeableViews.propTypes = {
	  /**
	   * If `true`, the height of the container will be animated to match the current slide height.
	   * Animating another style property has a negative impact regarding performance.
	   */
	  animateHeight: _propTypes2.default.bool,
	  /**
	   * If `false`, changes to the index prop will not cause an animated transition.
	   */
	  animateTransitions: _propTypes2.default.bool,
	  /**
	   * The axis on which the slides will slide.
	   */
	  axis: _propTypes2.default.oneOf(['x', 'x-reverse', 'y', 'y-reverse']),
	  /**
	   * Use this property to provide your slides.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * This is the inlined style that will be applied
	   * to each slide container.
	   */
	  containerStyle: _propTypes2.default.object,
	  /**
	   * If `true`, it will disable touch events.
	   * This is useful when you want to prohibit the user from changing slides.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, it will enable mouse events.
	   * This will allow the user to perform the relevant swipe actions with a mouse.
	   */
	  enableMouseEvents: _propTypes2.default.bool,
	  /**
	   * Configure hysteresis between slides. This value determines how far
	   * should user swipe to switch slide.
	   */
	  hysteresis: _propTypes2.default.number,
	  /**
	   * If `true`, it will ignore native scroll container.
	   * It can be used to filter out false positive that blocks the swipe.
	   */
	  ignoreNativeScroll: _propTypes2.default.bool,
	  /**
	   * This is the index of the slide to show.
	   * This is useful when you want to change the default slide shown.
	   * Or when you have tabs linked to each slide.
	   */
	  index: _propTypes2.default.number,
	  /**
	   * This is callback prop. It's call by the
	   * component when the shown slide change after a swipe made by the user.
	   * This is useful when you have tabs linked to each slide.
	   *
	   * @param {integer} index This is the current index of the slide.
	   * @param {integer} indexLatest This is the oldest index of the slide.
	   */
	  onChangeIndex: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onMouseDown: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onMouseLeave: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onMouseMove: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onMouseUp: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onScroll: _propTypes2.default.func,
	  /**
	   * This is callback prop. It's called by the
	   * component when the slide switching.
	   * This is useful when you want to implement something corresponding to the current slide position.
	   *
	   * @param {integer} index This is the current index of the slide.
	   * @param {string} type Can be either `move` or `end`.
	   */
	  onSwitching: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onTouchEnd: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onTouchMove: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onTouchStart: _propTypes2.default.func,
	  /**
	   * The callback that fires when the animation comes to a rest.
	   * This is useful to defer CPU intensive task.
	   */
	  onTransitionEnd: _propTypes2.default.func,
	  /**
	   * If `true`, it will add bounds effect on the edges.
	   */
	  resistance: _propTypes2.default.bool,
	  /**
	   * This is the className that will be applied
	   * on the slide component.
	   */
	  slideClassName: _propTypes2.default.string,
	  /**
	   * This is the inlined style that will be applied
	   * on the slide component.
	   */
	  slideStyle: _propTypes2.default.object,
	  /**
	   * This is the config used to create CSS transitions.
	   * This is useful to change the dynamic of the transition.
	   */
	  springConfig: _propTypes2.default.shape({
	    duration: _propTypes2.default.string,
	    easeFunction: _propTypes2.default.string,
	    delay: _propTypes2.default.string
	  }),
	  /**
	   * This is the inlined style that will be applied
	   * on the root component.
	   */
	  style: _propTypes2.default.object,
	  /**
	   * This is the threshold used for detecting a quick swipe.
	   * If the computed speed is above this value, the index change.
	   */
	  threshold: _propTypes2.default.number
	} : void 0;
	exports.default = SwipeableViews;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _SwipeableViews = __webpack_require__(354);
	
	var _SwipeableViews2 = _interopRequireDefault(_SwipeableViews);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _SwipeableViews2.default; //  weak

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _addClass = __webpack_require__(333);
	
	var _addClass2 = _interopRequireDefault(_addClass);
	
	var _removeClass = __webpack_require__(335);
	
	var _removeClass2 = _interopRequireDefault(_removeClass);
	
	var _requestAnimationFrame = __webpack_require__(338);
	
	var _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);
	
	var _properties = __webpack_require__(141);
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(1);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(4);
	
	var _PropTypes = __webpack_require__(149);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var events = [];
	if (_properties.transitionEnd) events.push(_properties.transitionEnd);
	if (_properties.animationEnd) events.push(_properties.animationEnd);
	
	function addEndListener(node, listener) {
	  if (events.length) {
	    events.forEach(function (e) {
	      return node.addEventListener(e, listener, false);
	    });
	  } else {
	    setTimeout(listener, 0);
	  }
	
	  return function () {
	    if (!events.length) return;
	    events.forEach(function (e) {
	      return node.removeEventListener(e, listener, false);
	    });
	  };
	}
	
	var propTypes = {
	  children: _propTypes2.default.node,
	  name: _PropTypes.nameShape.isRequired,
	
	  // Once we require timeouts to be specified, we can remove the
	  // boolean flags (appear etc.) and just accept a number
	  // or a bool for the timeout flags (appearTimeout etc.)
	  appear: _propTypes2.default.bool,
	  enter: _propTypes2.default.bool,
	  leave: _propTypes2.default.bool,
	  appearTimeout: _propTypes2.default.number,
	  enterTimeout: _propTypes2.default.number,
	  leaveTimeout: _propTypes2.default.number
	};
	
	var CSSTransitionGroupChild = function (_React$Component) {
	  _inherits(CSSTransitionGroupChild, _React$Component);
	
	  function CSSTransitionGroupChild() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, CSSTransitionGroupChild);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.componentWillAppear = function (done) {
	      if (_this.props.appear) {
	        _this.transition('appear', done, _this.props.appearTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillEnter = function (done) {
	      if (_this.props.enter) {
	        _this.transition('enter', done, _this.props.enterTimeout);
	      } else {
	        done();
	      }
	    }, _this.componentWillLeave = function (done) {
	      if (_this.props.leave) {
	        _this.transition('leave', done, _this.props.leaveTimeout);
	      } else {
	        done();
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  CSSTransitionGroupChild.prototype.componentWillMount = function componentWillMount() {
	    this.classNameAndNodeQueue = [];
	    this.transitionTimeouts = [];
	  };
	
	  CSSTransitionGroupChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unmounted = true;
	
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	    this.transitionTimeouts.forEach(function (timeout) {
	      clearTimeout(timeout);
	    });
	
	    this.classNameAndNodeQueue.length = 0;
	  };
	
	  CSSTransitionGroupChild.prototype.transition = function transition(animationType, finishCallback, timeout) {
	    var node = (0, _reactDom.findDOMNode)(this);
	
	    if (!node) {
	      if (finishCallback) {
	        finishCallback();
	      }
	      return;
	    }
	
	    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
	    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
	    var timer = null;
	    var removeListeners = void 0;
	
	    (0, _addClass2.default)(node, className);
	
	    // Need to do this to actually trigger a transition.
	    this.queueClassAndNode(activeClassName, node);
	
	    // Clean-up the animation after the specified delay
	    var finish = function finish(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	
	      clearTimeout(timer);
	      if (removeListeners) removeListeners();
	
	      (0, _removeClass2.default)(node, className);
	      (0, _removeClass2.default)(node, activeClassName);
	
	      if (removeListeners) removeListeners();
	
	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };
	
	    if (timeout) {
	      timer = setTimeout(finish, timeout);
	      this.transitionTimeouts.push(timer);
	    } else if (_properties.transitionEnd) {
	      removeListeners = addEndListener(node, finish);
	    }
	  };
	
	  CSSTransitionGroupChild.prototype.queueClassAndNode = function queueClassAndNode(className, node) {
	    var _this2 = this;
	
	    this.classNameAndNodeQueue.push({
	      className: className,
	      node: node
	    });
	
	    if (!this.rafHandle) {
	      this.rafHandle = (0, _requestAnimationFrame2.default)(function () {
	        return _this2.flushClassNameAndNodeQueue();
	      });
	    }
	  };
	
	  CSSTransitionGroupChild.prototype.flushClassNameAndNodeQueue = function flushClassNameAndNodeQueue() {
	    if (!this.unmounted) {
	      this.classNameAndNodeQueue.forEach(function (obj) {
	        // This is for to force a repaint,
	        // which is necessary in order to transition styles when adding a class name.
	        /* eslint-disable no-unused-expressions */
	        obj.node.scrollTop;
	        /* eslint-enable no-unused-expressions */
	        (0, _addClass2.default)(obj.node, obj.className);
	      });
	    }
	    this.classNameAndNodeQueue.length = 0;
	    this.rafHandle = null;
	  };
	
	  CSSTransitionGroupChild.prototype.render = function render() {
	    var props = _extends({}, this.props);
	    delete props.name;
	    delete props.appear;
	    delete props.enter;
	    delete props.leave;
	    delete props.appearTimeout;
	    delete props.enterTimeout;
	    delete props.leaveTimeout;
	    delete props.children;
	    return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), props);
	  };
	
	  return CSSTransitionGroupChild;
	}(_react2.default.Component);
	
	CSSTransitionGroupChild.displayName = 'CSSTransitionGroupChild';
	
	
	CSSTransitionGroupChild.propTypes = propTypes;
	
	exports.default = CSSTransitionGroupChild;
	module.exports = exports['default'];

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;
	
	var _react = __webpack_require__(2);
	
	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children) {
	  if (!children) {
	    return children;
	  }
	  var result = {};
	  _react.Children.map(children, function (child) {
	    return child;
	  }).forEach(function (child) {
	    result[child.key] = child;
	  });
	  return result;
	}
	
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};
	
	  function getValueForKey(key) {
	    if (next.hasOwnProperty(key)) {
	      return next[key];
	    }
	
	    return prev[key];
	  }
	
	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextKeysPending = {};
	
	  var pendingKeys = [];
	  for (var prevKey in prev) {
	    if (next.hasOwnProperty(prevKey)) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }
	
	  var i = void 0;
	  var childMapping = {};
	  for (var nextKey in next) {
	    if (nextKeysPending.hasOwnProperty(nextKey)) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	    childMapping[nextKey] = getValueForKey(nextKey);
	  }
	
	  // Finally, add the keys which didn't appear before any key in `next`
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }
	
	  return childMapping;
	}

/***/ }
/******/ ])
});
;
//# sourceMappingURL=react-md.js.map