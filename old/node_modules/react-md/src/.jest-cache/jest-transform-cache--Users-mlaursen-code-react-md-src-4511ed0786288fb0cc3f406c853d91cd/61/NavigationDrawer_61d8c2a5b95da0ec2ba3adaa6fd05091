/* istanbul ignore next */'use strict'; /* eslint-env jest */
/* eslint-disable max-len */
jest.unmock('../NavigationDrawer');
jest.unmock('../../Dialogs/Dialog');
jest.unmock('../../Drawers/Drawer');
jest.unmock('../../Drawers/DrawerTypes');
jest.unmock('../../Drawers/isType'); /* istanbul ignore next */var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_NavigationDrawer = require('../NavigationDrawer'); /* istanbul ignore next */var _NavigationDrawer2 = _interopRequireDefault(_NavigationDrawer);
var /* istanbul ignore next */_Drawer = require('../../Drawers/Drawer'); /* istanbul ignore next */var _Drawer2 = _interopRequireDefault(_Drawer);
var /* istanbul ignore next */_Dialog = require('../../Dialogs/Dialog'); /* istanbul ignore next */var _Dialog2 = _interopRequireDefault(_Dialog);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('NavigationDrawer', function () {
  it('should inherit the dialog\'s renderNode context', function () {
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, /* istanbul ignore next */null)));
    var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(dialog, /* istanbul ignore next */_NavigationDrawer2.default);
    expect(drawer.context.renderNode).toBe(dialog.getChildContext().renderNode);
  });

  describe('Drawer', function () {
    var MATCH_MEDIA = window.matchMedia;
    var matchesMobile = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: query.indexOf( /* istanbul ignore next */_Drawer2.default.defaultProps.mobileMinWidth) !== -1 };});

    var matchesTablet = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: query.indexOf( /* istanbul ignore next */_Drawer2.default.defaultProps.tabletMinWidth) !== -1 };});

    var matchesDesktop = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: query.indexOf('max') === -1 &&
        query.indexOf( /* istanbul ignore next */_Drawer2.default.defaultProps.desktopMinWidth) !== -1 };});

    afterAll(function () {
      window.matchMedia = MATCH_MEDIA;
    });

    it('should correctly set the default visibility on mobile devices', function () {
      var props = {
        navItems: [],
        mobileDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT,
        desktopDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesMobile;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(drawer.state.visible).toBe(false);
      expect(drawer.state.drawerType).toBe( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(0);
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);
    });

    it('should correctly set the default visibility on tablets', function () {
      var props = {
        navItems: [],
        mobileDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT,
        desktopDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesTablet;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(drawer.state.visible).toBe(false);
      expect(drawer.state.drawerType).toBe( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.PERSISTENT);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(1);
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.PERSISTENT, { mobile: false, tablet: true, desktop: false });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);
    });

    it('should correctly set the default visibility on desktop', function () {
      var props = {
        navItems: [],
        mobileDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT,
        desktopDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesDesktop;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.drawerType).toBe( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.FULL_HEIGHT);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(1);
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.FULL_HEIGHT, { mobile: false, tablet: false, desktop: true });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(1);
      expect(props.onVisibilityToggle).toBeCalledWith(true);
    });

    it('should not update the visibility to false when the defaultVisible prop is enabled and the drawer type is temporary for any screen size', function () {
      var props = {
        defaultVisible: true,
        navItems: [],
        mobileDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        desktopDrawerType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesMobile;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.drawerType).toBe( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(0);
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.drawerType).toBe( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(1);
      expect(props.onMediaTypeChange).toBeCalledWith(props.tabletDrawerType, { mobile: false, tablet: true, desktop: false });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.drawerType).toBe( /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(2);
      expect(props.onMediaTypeChange).toBeCalledWith(props.desktopDrawerType, { mobile: false, tablet: false, desktop: true });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);
    });

    it('should correctly update the visibility when the visible prop was defined and there was a media type change with visibility', function () {
      var props = {
        visible: false,
        defaultMedia: 'mobile',
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesDesktop;
      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_NavigationDrawer2.default.defaultProps.desktopDrawerType, { mobile: false, tablet: false, desktop: true });
      expect(props.onVisibilityToggle).toBeCalledWith(true);

      window.matchMedia = matchesMobile;
      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, /* istanbul ignore next */_extends({}, props, { visible: /* istanbul ignore next */true, defaultMedia: 'desktop' })));
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_NavigationDrawer2.default.defaultProps.mobileDrawerType, { mobile: true, tablet: false, desktop: false });
      expect(props.onVisibilityToggle).toBeCalledWith(true);
    });

    it('should not attempt to update the drawer type be the media drawer type if constantDrawerType is enabled', function () {/* istanbul ignore next */var
      TEMPORARY = /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes.TEMPORARY;
      var onMediaTypeChange = jest.fn();
      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, /* istanbul ignore next */{ constantDrawerType: /* istanbul ignore next */true, drawerType: TEMPORARY, onMediaTypeChange: onMediaTypeChange }));
      expect(onMediaTypeChange.mock.calls.length).toBe(0);
    });

    it('should attempt to update the drawer type to be the media drawer type if the constantDrawerType is not enabled', function () {
      window.matchMedia = matchesMobile; /* istanbul ignore next */var _NavigationDrawer$Dra =
      /* istanbul ignore next */_NavigationDrawer2.default.DrawerTypes,TEMPORARY = _NavigationDrawer$Dra.TEMPORARY,PERSISTENT = _NavigationDrawer$Dra.PERSISTENT,FULL_HEIGHT = _NavigationDrawer$Dra.FULL_HEIGHT;
      var onMediaTypeChange = jest.fn();
      var props = {
        drawerType: TEMPORARY,
        mobileDrawerType: TEMPORARY,
        tabletDrawerType: PERSISTENT,
        desktopDrawerType: FULL_HEIGHT,
        onMediaTypeChange: onMediaTypeChange,
        constantDrawerType: false };

      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(onMediaTypeChange.mock.calls.length).toBe(0);

      window.matchMedia = matchesTablet;
      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(onMediaTypeChange.mock.calls.length).toBe(1);
      expect(onMediaTypeChange).toBeCalledWith(PERSISTENT, { mobile: false, tablet: true, desktop: false });

      window.matchMedia = matchesDesktop;
      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_NavigationDrawer2.default, props));
      expect(onMediaTypeChange.mock.calls.length).toBe(2);
      expect(onMediaTypeChange).toBeCalledWith(FULL_HEIGHT, { mobile: false, tablet: false, desktop: true });
    });
  });
});