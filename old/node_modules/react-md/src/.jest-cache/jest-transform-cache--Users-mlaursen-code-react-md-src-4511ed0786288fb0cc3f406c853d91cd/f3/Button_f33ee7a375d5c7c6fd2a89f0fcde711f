/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../Button');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');







var /* istanbul ignore next */_Button = require('../Button'); /* istanbul ignore next */var _Button2 = _interopRequireDefault(_Button);
var /* istanbul ignore next */_FontIcon = require('../../FontIcons/FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Button', function () {
  it('merges className and style', function () {
    var props = {
      flat: true,
      label: 'Test',
      style: { background: 'black' },
      className: 'test' };


    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2.default, props));
    var btn = /* istanbul ignore next */(0, _reactDom.findDOMNode)(button);
    expect(btn.style.background).toBe(props.style.background);
    expect(btn.className).toContain(props.className);
  });

  it('allows for the event listeners to be triggered correctly', function () {
    var onFocus = jest.fn();
    var onBlur = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchMove = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onKeyDown = jest.fn();
    var onKeyUp = jest.fn();
    var onClick = jest.fn();

    var props = {
      onFocus: onFocus,
      onBlur: onBlur,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp,
      onClick: onClick,
      flat: true,
      label: 'Hello' };

    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2.default, props));
    var btn = /* istanbul ignore next */(0, _reactDom.findDOMNode)(button);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.focus(btn);
    expect(onFocus).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.blur(btn);
    expect(onBlur).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(btn);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchMove(btn);
    expect(onTouchMove).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(btn);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(btn);
    expect(onTouchCancel).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(btn);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(btn);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(btn);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(btn);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(btn);
    expect(onKeyDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(btn);
    expect(onKeyUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(btn);
    expect(onClick).toBeCalled();
  });

  it('renders a button component if there is no href prop', function () {
    var props = { label: 'test', flat: true };
    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2.default, props));
    var btns = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(button, 'button');
    var links = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(button, 'a');
    expect(btns.length).toBe(1);
    expect(links.length).toBe(0);
  });

  it('renders a link component if there is a href prop', function () {
    var props = { label: 'test', flat: true, href: '#' };
    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2.default, props));
    var btns = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(button, 'button');
    var links = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(button, 'a');
    expect(btns.length).toBe(0);
    expect(links.length).toBe(1);
  });

  it('removes the button type if there is a href prop', function () {
    var props = { label: 'test', flat: true, href: '#' };
    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2.default, props));
    var link = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(button, 'a');
    expect(link.getAttribute('type')).toBe(null);
  });

  it('renders a FontIcon for the icon button', function () {
    var props = { children: 'menu', icon: true };
    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Button2.default, props));
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(button, /* istanbul ignore next */_FontIcon2.default);
    expect(icon.props.children).toBe(props.children);
  });
});