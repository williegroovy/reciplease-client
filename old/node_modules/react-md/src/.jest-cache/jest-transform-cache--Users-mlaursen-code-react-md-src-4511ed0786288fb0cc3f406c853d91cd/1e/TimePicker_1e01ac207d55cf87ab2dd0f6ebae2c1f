/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../TimePicker'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_TimePicker = require('../TimePicker'); /* istanbul ignore next */var _TimePicker2 = _interopRequireDefault(_TimePicker);
var /* istanbul ignore next */_TimePickerHeader = require('../TimePickerHeader'); /* istanbul ignore next */var _TimePickerHeader2 = _interopRequireDefault(_TimePickerHeader);
var /* istanbul ignore next */_ClockFace = require('../ClockFace'); /* istanbul ignore next */var _ClockFace2 = _interopRequireDefault(_ClockFace);
var /* istanbul ignore next */_DateTimeFormat = require('../../utils/DateUtils/DateTimeFormat'); /* istanbul ignore next */var _DateTimeFormat2 = _interopRequireDefault(_DateTimeFormat);
var /* istanbul ignore next */_DialogFooter = require('../../Dialogs/DialogFooter'); /* istanbul ignore next */var _DialogFooter2 = _interopRequireDefault(_DialogFooter);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var threeFiftyFive = new Date(2016, 3, 15, 3, 55);
var PROPS = {
  okLabel: 'Ok',
  okPrimary: true,
  onOkClick: jest.fn(),
  cancelLabel: 'Cancel',
  cancelPrimary: true,
  onCancelClick: jest.fn(),
  DateTimeFormat: /* istanbul ignore next */_DateTimeFormat2.default,
  locales: 'en-US',
  setTimeMode: jest.fn(),
  setTempTime: jest.fn(),
  timeMode: 'hour',
  tempTime: threeFiftyFive,
  hours: '3',
  minutes: ':55',
  timePeriod: 'AM' };


describe('TimePicker', function () {
  it('merges className and style', function () {
    var props = Object.assign({}, PROPS, {
      style: { background: 'black' },
      className: 'test' });


    var timePicker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePicker2.default, props));

    var timePickerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(timePicker);
    expect(timePickerNode.style.background).toBe(props.style.background);
    expect(timePickerNode.className).toContain(props.className);
  });

  it('renders the TimePickerHeader component with the correct props', function () {
    var picker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePicker2.default, PROPS));
    var header = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(picker, /* istanbul ignore next */_TimePickerHeader2.default);
    expect(header.props.tempTime).toEqual(PROPS.tempTime);
    expect(header.props.timeMode).toBe(PROPS.timeMode);
    expect(header.props.setTempTime).toBe(PROPS.setTempTime);
    expect(header.props.hours).toBe(PROPS.hours);
    expect(header.props.minutes).toBe(PROPS.minutes);
    expect(header.props.timePeriod).toBe(PROPS.timePeriod);
  });

  it('renders a ClockFace component with the correct props', function () {
    var picker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePicker2.default, PROPS));
    var face = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(picker, /* istanbul ignore next */_ClockFace2.default);
    expect(face.props.timePeriod).toBe(PROPS.timePeriod);
    expect(face.props.onChange).toBe(picker._updateTime);
    expect(face.props.minutes).toBe(false);
    // Really an int version of the hours
    expect(face.props.time).toBeDefined();
  });

  it('renders the DialogFooter component with an array of actions from the ok and cancel props', function () {
    var picker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePicker2.default, PROPS));
    var actions = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(picker, /* istanbul ignore next */_DialogFooter2.default).props.actions;
    expect(actions.length).toBe(2); /* istanbul ignore next */var _actions = _slicedToArray(

    actions, 2),cancel = _actions[0],ok = _actions[1];
    expect(cancel.onClick).toBe(PROPS.onCancelClick);
    expect(cancel.primary).toBe(PROPS.cancelPrimary);
    expect(cancel.secondary).toBe(!PROPS.cancelPrimary);
    expect(cancel.label).toBe(PROPS.cancelLabel);
    expect(ok.onClick).toBe(PROPS.onOkClick);
    expect(ok.primary).toBe(PROPS.okPrimary);
    expect(ok.secondary).toBe(!PROPS.okPrimary);
    expect(ok.label).toBe(PROPS.okLabel);
  });

  it('updates the hours for the time when _updateTime is called and the timeMode is hours', function () {
    var props = Object.assign({}, PROPS, { setTempTime: jest.fn() });
    var picker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePicker2.default, props));
    picker._updateTime(2);
    expect(props.setTempTime.mock.calls.length).toBe(1);
    expect(props.setTempTime.mock.calls[0][0]).toEqual(new Date(2016, 3, 15, 2, 55));
  });

  it('updates the minutes for the time when _updateTime is called and the timeMode is hours', function () {
    var props = Object.assign({}, PROPS, { setTempTime: jest.fn(), timeMode: 'minute' });
    var picker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePicker2.default, props));
    picker._updateTime(2);
    expect(props.setTempTime.mock.calls.length).toBe(1);
    expect(props.setTempTime.mock.calls[0][0]).toEqual(new Date(2016, 3, 15, 3, 2));
  });
});