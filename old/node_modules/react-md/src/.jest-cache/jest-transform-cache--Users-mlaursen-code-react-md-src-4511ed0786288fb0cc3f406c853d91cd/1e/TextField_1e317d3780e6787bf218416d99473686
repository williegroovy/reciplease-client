/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../TextField');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');






var /* istanbul ignore next */_TextField = require('../TextField'); /* istanbul ignore next */var _TextField2 = _interopRequireDefault(_TextField);
var /* istanbul ignore next */_InputField = require('../InputField'); /* istanbul ignore next */var _InputField2 = _interopRequireDefault(_InputField);
var /* istanbul ignore next */_TextFieldDivider = require('../TextFieldDivider'); /* istanbul ignore next */var _TextFieldDivider2 = _interopRequireDefault(_TextFieldDivider);
var /* istanbul ignore next */_PasswordButton = require('../PasswordButton'); /* istanbul ignore next */var _PasswordButton2 = _interopRequireDefault(_PasswordButton);
var /* istanbul ignore next */_FloatingLabel = require('../FloatingLabel'); /* istanbul ignore next */var _FloatingLabel2 = _interopRequireDefault(_FloatingLabel);
var /* istanbul ignore next */_FontIcon = require('../../FontIcons/FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('TextField', function () {
  it('merges style and classNames correctly', function () {
    var props = {
      id: 'test',
      style: { width: '100%' },
      className: 'test',
      inputStyle: { width: 256 },
      inputClassName: 'wow',
      placeholder: 'Test' };


    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    var fieldNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field);
    var inputField = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_InputField2.default);

    expect(fieldNode.style.width).toBe(props.style.width);
    expect(fieldNode.className).toContain(props.className);
    expect(inputField.props.style).toEqual(props.inputStyle);
    expect(inputField.props.className).toBe(props.inputClassName);
  });

  it('renders a divider component when the block prop is false', function () {
    var props = { id: 'test', placeholder: 'test' };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    var dividers = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(field, /* istanbul ignore next */_TextFieldDivider2.default);

    expect(dividers.length).toBe(1);

    props.block = true;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    dividers = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(field, /* istanbul ignore next */_TextFieldDivider2.default);

    expect(dividers.length).toBe(0);
  });

  it('passes the mouse and touch events to the TextField container', function () {
    var onClick = jest.fn();
    var onDoubleClick = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchMove = jest.fn();
    var onTouchCancel = jest.fn();
    var onTouchEnd = jest.fn();
    var props = {
      onClick: onClick,
      onDoubleClick: onDoubleClick,
      onMouseDown: onMouseDown,
      onMouseOver: onMouseOver,
      onMouseUp: onMouseUp,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchCancel: onTouchCancel,
      onTouchEnd: onTouchEnd };


    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    var container = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(container);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.doubleClick(container);
    expect(onDoubleClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(container);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(container);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(container);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(container);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(container);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchMove(container);
    expect(onTouchMove).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(container);
    expect(onTouchCancel).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(container);
    expect(onTouchEnd).toBeCalled();
  });

  it('passes the keyboard and typing events to the InputField component', function () {
    var onKeyPress = jest.fn();
    var onKeyUp = jest.fn();
    var onCopy = jest.fn();
    var onCut = jest.fn();
    var onPaste = jest.fn();
    var onBlur = jest.fn();
    var onInput = jest.fn();
    var onSelect = jest.fn();
    var onCompositionStart = jest.fn();
    var onCompositionUpdate = jest.fn();
    var onCompositionEnd = jest.fn();

    var props = {
      onKeyPress: onKeyPress,
      onKeyUp: onKeyUp,
      onCopy: onCopy,
      onCut: onCut,
      onPaste: onPaste,
      onBlur: onBlur,
      onInput: onInput,
      onSelect: onSelect,
      onCompositionStart: onCompositionStart,
      onCompositionUpdate: onCompositionUpdate,
      onCompositionEnd: onCompositionEnd };


    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(container, /* istanbul ignore next */_InputField2.default);

    expect(input.props.onKeyPress).toBe(onKeyPress);
    expect(input.props.onKeyUp).toBe(onKeyUp);
    expect(input.props.onCopy).toBe(onCopy);
    expect(input.props.onCut).toBe(onCut);
    expect(input.props.onPaste).toBe(onPaste);
    expect(input.props.onBlur).toBe(onBlur);
    expect(input.props.onInput).toBe(onInput);
    expect(input.props.onSelect).toBe(onSelect);
    expect(input.props.onCompositionStart).toBe(onCompositionStart);
    expect(input.props.onCompositionUpdate).toBe(onCompositionUpdate);
    expect(input.props.onCompositionEnd).toBe(onCompositionEnd);
  });

  it('calls the onFocus prop when the _handleFocus function is called', function () {
    var props = { onFocus: jest.fn() };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));

    field._handleFocus();
    expect(props.onFocus).toBeCalled();
  });

  it('calls the onKeyDown prop when the _handleKeyDown function is called', function () {
    var props = { onKeyDown: jest.fn() };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));

    field._handleKeyDown({ which: 2, keyCode: 2 });
    expect(props.onKeyDown).toBeCalled();
  });

  it('calls the onChange prop when the _handleChange function is called', function () {
    var props = { onChange: jest.fn() };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));

    field._handleChange({ target: { value: '' } });
    expect(props.onChange).toBeCalled();
  });

  it('calls the onChange prop with the new value and change event', function () {
    var props = { onChange: jest.fn() };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));

    var event = { target: { value: 'wow' } };
    field._handleChange(event);
    expect(props.onChange.mock.calls[0][0]).toBe('wow');
    expect(props.onChange.mock.calls[0][1]).toEqual(event);
  });

  it('adds the PasswordButton component when the type is password', function () {
    var props = { id: 'test', placeholder: 'text' };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    var passwords = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(field, /* istanbul ignore next */_PasswordButton2.default);
    expect(passwords.length).toBe(0);

    props = { id: 'test', placeholder: 'password', type: 'password' };
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    passwords = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(field, /* istanbul ignore next */_PasswordButton2.default);
    expect(passwords.length).toBe(1);
  });

  it('renders the PasswordButton with the correct props', function () {
    var props = { id: 'password', placeholder: 'password', type: 'password' };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    var password = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_PasswordButton2.default);

    expect(password.props.onClick).toBe(field._togglePasswordField);
    expect(password.props.active).toBe(field.state.active);
    expect(password.props.passwordVisible).toBe(field.state.passwordVisible);
    expect(password.props.iconChildren).toBe( /* istanbul ignore next */_TextField2.default.defaultProps.passwordIconChildren);
    expect(password.props.iconClassName).toBe( /* istanbul ignore next */_TextField2.default.defaultProps.passwordIconClassName);
  });

  it('renders the FloatingLabel component with the correct props', function () {
    var props = { label: 'Test', id: 'test' };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_FloatingLabel2.default);

    expect(label.props.label).toBe(props.label);
    expect(label.props.htmlFor).toBe(props.id);
    expect(label.props.active).toBe(field.state.active);
    expect(label.props.error).toBe(field.state.error);
    expect(label.props.floating).toBe(field.state.floating);
    expect(label.props.disabled).toBe(props.disabled);
    expect(label.props.customSize).toBe(props.customSize);
    expect(label.props.iconOffset).toBe(false);

    props.customSize = 'title';
    props.leftIcon = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */null);
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, props));
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_FloatingLabel2.default);

    expect(label.props.label).toBe(props.label);
    expect(label.props.htmlFor).toBe(props.id);
    expect(label.props.active).toBe(field.state.active);
    expect(label.props.error).toBe(field.state.error);
    expect(label.props.floating).toBe(field.state.floating);
    expect(label.props.disabled).toBe(props.disabled);
    expect(label.props.customSize).toBe(props.customSize);
    expect(label.props.iconOffset).toBe(true);
  });

  // Super important test
  it('does some stuff that seems hard to automatically test', function () {
    expect(true).toBe(true);
  });
});