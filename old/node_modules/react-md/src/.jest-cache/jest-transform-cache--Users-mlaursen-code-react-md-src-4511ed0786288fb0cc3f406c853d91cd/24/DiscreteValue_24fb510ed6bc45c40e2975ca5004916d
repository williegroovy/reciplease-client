/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../DiscreteValue');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_DiscreteValue = require('../DiscreteValue'); /* istanbul ignore next */var _DiscreteValue2 = _interopRequireDefault(_DiscreteValue);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('DiscreteValue', function () {
  it('returns null when not not discrete or not active', function () {
    var props = { value: 3, thumbLeft: '', valuePrecision: 0 };

    var value = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DiscreteValue2.default, props));
    expect( /* istanbul ignore next */(0, _reactDom.findDOMNode)(value)).toBe(null);

    props.discrete = true;
    value = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DiscreteValue2.default, props));
    expect( /* istanbul ignore next */(0, _reactDom.findDOMNode)(value)).toBe(null);

    props.active = true;
    value = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DiscreteValue2.default, props));
    expect( /* istanbul ignore next */(0, _reactDom.findDOMNode)(value)).not.toBe(null);
  });

  it('merges style and className', function () {
    var props = {
      value: 3,
      thumbLeft: '8px',
      discrete: true,
      active: true,
      style: { display: 'block' },
      className: 'test',
      valuePrecision: 0 };


    var value = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DiscreteValue2.default, props));
    var valueNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(value);

    expect(valueNode.style.display).toBe(props.style.display);
    expect(valueNode.className).toContain(props.className);
  });

  it('passes the event listeners correctly', function () {
    var onClick = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var onKeyUp = jest.fn();
    var onKeyDown = jest.fn();

    var props = {
      onClick: onClick,
      onMouseUp: onMouseUp,
      onMouseDown: onMouseDown,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      onKeyUp: onKeyUp,
      onKeyDown: onKeyDown,
      discrete: true,
      active: true,
      value: 3,
      thumbLeft: '',
      valuePrecision: 0 };


    var discreteValue = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DiscreteValue2.default, props));

    var discreteValueNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(discreteValue);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(discreteValueNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(discreteValueNode);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(discreteValueNode);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(discreteValueNode);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(discreteValueNode);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(discreteValueNode);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(discreteValueNode);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(discreteValueNode);
    expect(onTouchCancel).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(discreteValueNode);
    expect(onKeyUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(discreteValueNode);
    expect(onKeyDown).toBeCalled();
  });
});