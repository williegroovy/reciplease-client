/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../ClockFace'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');

var /* istanbul ignore next */_ClockFace = require('../ClockFace'); /* istanbul ignore next */var _ClockFace2 = _interopRequireDefault(_ClockFace);
var /* istanbul ignore next */_ClockTime = require('../ClockTime'); /* istanbul ignore next */var _ClockTime2 = _interopRequireDefault(_ClockTime);
var /* istanbul ignore next */_ClockHand = require('../ClockHand'); /* istanbul ignore next */var _ClockHand2 = _interopRequireDefault(_ClockHand);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('ClockFace', function () {
  it('renders a 12 hour clock if there is a time period prop and is not displayed in minutes', function () {
    var onChange = jest.fn();
    var face = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ClockFace2.default, /* istanbul ignore next */{ time: 3, minutes: false, onChange: onChange, timePeriod: 'AM' }));


    var times = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(face, /* istanbul ignore next */_ClockTime2.default);
    expect(times.length).toBe(12);
  });

  it('renders a 24 hour clock if there is not a time period prop and is not displayed in minutes', function () {
    var onChange = jest.fn();
    var face = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ClockFace2.default, /* istanbul ignore next */{ time: 3, minutes: false, onChange: onChange }));


    var times = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(face, /* istanbul ignore next */_ClockTime2.default);
    expect(times.length).toBe(24);
  });

  it('renders minutes in 5 minute increments starting from 0', function () {
    var onChange = jest.fn();
    var face = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ClockFace2.default, /* istanbul ignore next */{ time: 3, minutes: /* istanbul ignore next */true, onChange: onChange }));


    var times = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(face, /* istanbul ignore next */_ClockTime2.default);
    expect(times.length).toBe(60 / 5);

    face = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ClockFace2.default, /* istanbul ignore next */{ time: 3, minutes: /* istanbul ignore next */true, onChange: onChange, timePeriod: 'AM' }));


    times = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(face, /* istanbul ignore next */_ClockTime2.default);
    expect(times.length).toBe(60 / 5);
  });

  it('sets the prop active for the correct time', function () {
    var onChange = jest.fn();
    var face = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ClockFace2.default, /* istanbul ignore next */{ time: 3, minutes: false, onChange: onChange }));


    var times = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(face, /* istanbul ignore next */_ClockTime2.default);
    expect(times[2].props.active).toBe(true);

    face = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ClockFace2.default, /* istanbul ignore next */{ time: 3, minutes: false, onChange: onChange, timePeriod: 'AM' }));


    times = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(face, /* istanbul ignore next */_ClockTime2.default);
    expect(times[2].props.active).toBe(true);
  });

  it('renders a clock hand component', function () {
    var props = {
      onChange: jest.fn(),
      time: 3,
      minutes: true };


    var face = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ClockFace2.default, props));
    face.setState({ radius: 136 });

    var hands = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(face, /* istanbul ignore next */_ClockHand2.default);
    expect(hands.length).toBe(1); /* istanbul ignore next */var _hands = _slicedToArray(
    hands, 1),hand = _hands[0];
    expect(hand.props.time).toBe(props.time);
    expect(hand.props.coords).toBe(136);
    expect(hand.props.minutes).toBe(props.minutes);
  });
});