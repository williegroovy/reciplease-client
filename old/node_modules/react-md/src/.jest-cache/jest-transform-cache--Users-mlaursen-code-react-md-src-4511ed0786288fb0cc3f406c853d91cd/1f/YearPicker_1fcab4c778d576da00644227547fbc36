/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../YearPicker');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_YearPicker = require('../YearPicker'); /* istanbul ignore next */var _YearPicker2 = _interopRequireDefault(_YearPicker);
var /* istanbul ignore next */_Year = require('../Year'); /* istanbul ignore next */var _Year2 = _interopRequireDefault(_Year);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// Can't do the query selector stuff
/* istanbul ignore next */_YearPicker2.default.prototype._setContainer = jest.fn();

describe('YearPicker', function () {
  it('renders the number of years from yearsDisplayed', function () {
    var props = {
      calendarTempDate: new Date(2016, 1, 1),
      onCalendarYearClick: jest.fn(),
      yearsDisplayed: 100 };


    var yearPicker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_YearPicker2.default, props));
    var years = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(yearPicker, /* istanbul ignore next */_Year2.default);

    expect(years.length).toBe(props.yearsDisplayed);

    props.yearsDisplayed = 5;
    yearPicker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_YearPicker2.default, props));
    years = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(yearPicker, /* istanbul ignore next */_Year2.default);

    expect(years.length).toBe(props.yearsDisplayed);
  });

  it('renders the number of years from yearsDisplayed starting with the minDate', function () {
    var props = {
      minDate: new Date(2016, 1, 15),
      calendarTempDate: new Date(2016, 1, 1),
      onCalendarYearClick: jest.fn(),
      yearsDisplayed: 100 };


    var yearPicker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_YearPicker2.default, props));
    var years = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(yearPicker, /* istanbul ignore next */_Year2.default);

    // Even numbers have one more
    expect(years.length).toBe(props.yearsDisplayed);
    expect(years[0].props.year).toBe(props.minDate.getFullYear());
    expect(years[props.yearsDisplayed - 1].props.year).
    toBe(props.minDate.getFullYear() + props.yearsDisplayed - 1);
  });

  it('renders the number of years from yearsDisplayed ending with the maxDate', function () {
    var props = {
      maxDate: new Date(2016, 1, 15),
      calendarTempDate: new Date(2016, 1, 1),
      onCalendarYearClick: jest.fn(),
      yearsDisplayed: 100 };


    var yearPicker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_YearPicker2.default, props));
    var years = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(yearPicker, /* istanbul ignore next */_Year2.default);

    // Even numbers have one more
    expect(years.length).toBe(props.yearsDisplayed);
    expect(years[props.yearsDisplayed - 1].props.year).toBe(props.maxDate.getFullYear());
    expect(years[0].props.year).toBe(props.maxDate.getFullYear() - props.yearsDisplayed + 1);
  });

  it('only renders years between the min and max dates', function () {
    var props = {
      minDate: new Date(2012),
      maxDate: new Date(2015),
      calendarTempDate: new Date(2012, 1, 1),
      onCalendarYearClick: jest.fn(),
      yearsDisplayed: 100 };


    var yearPicker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_YearPicker2.default, props));
    var years = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(yearPicker, /* istanbul ignore next */_Year2.default);
    expect(years.length).toBe(props.maxDate.getFullYear() - props.minDate.getFullYear() + 1);

    expect(years[0].props.year).toBe(props.minDate.getFullYear());
    expect(years[years.length - 1].props.year).toBe(props.maxDate.getFullYear());
  });
});