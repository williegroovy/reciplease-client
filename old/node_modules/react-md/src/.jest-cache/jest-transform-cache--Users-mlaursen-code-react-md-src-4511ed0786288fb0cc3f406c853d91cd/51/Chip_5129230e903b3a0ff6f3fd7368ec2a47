/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../Chip');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');






var /* istanbul ignore next */_Chip = require('../Chip'); /* istanbul ignore next */var _Chip2 = _interopRequireDefault(_Chip);
var /* istanbul ignore next */_FontIcon = require('../../FontIcons/FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);
var /* istanbul ignore next */_Avatar = require('../../Avatars/Avatar'); /* istanbul ignore next */var _Avatar2 = _interopRequireDefault(_Avatar);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Chip', function () {
  it('merges style and className', function () {
    var props = {
      label: 'a',
      style: { background: 'black' },
      className: 'test' };


    var chip = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Chip2.default, props));
    var chipNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(chip);
    expect(chipNode.style.background).toBe(props.style.background);
    expect(chipNode.className).toContain(props.className);
  });

  it('allows the onClick, onMouseOver, and onMouseLeave props to still be called', function () {
    var onClick = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();

    var props = {
      label: 'a',
      onClick: onClick,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave };


    var chip = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Chip2.default, props));
    var chipNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(chip);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(chipNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(chipNode);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(chipNode);
    expect(onMouseLeave).toBeCalled();
  });

  it('does not render a FontIcon if the removable prop is not true', function () {
    var props = { label: 'a' };
    var chip = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Chip2.default, props));
    var icons = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(chip, /* istanbul ignore next */_FontIcon2.default);
    expect(icons.length).toBe(0);
  });

  it('renders a FontIcon if the removable prop is true', function () {
    var props = { label: 'a', removable: true };
    var chip = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Chip2.default, props));
    var icons = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(chip, /* istanbul ignore next */_FontIcon2.default);
    expect(icons.length).toBe(1);
  });

  it('renders a FontIcon with the correct props', function () {
    var props = {
      label: 'a',
      children: 'menu',
      iconClassName: 'test',
      removable: true };

    var chip = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Chip2.default, props));
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(chip, /* istanbul ignore next */_FontIcon2.default);

    expect(icon.props.iconClassName).toBe(props.iconClassName);
    expect(icon.props.children).toBe(props.children);
  });

  it('renders the avatar prop', function () {
    var props = {
      label: 'a',
      avatar: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */null, /* istanbul ignore next */'A') };


    var chip = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Chip2.default, props));
    var avatars = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(chip, /* istanbul ignore next */_Avatar2.default);
    expect(avatars.length).toBe(1);
  });
});