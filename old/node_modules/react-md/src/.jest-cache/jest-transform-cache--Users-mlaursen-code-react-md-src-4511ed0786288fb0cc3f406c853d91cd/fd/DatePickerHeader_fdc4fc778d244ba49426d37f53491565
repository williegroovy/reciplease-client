/* istanbul ignore next */'use strict'; /* eslint-env jest*/
/* eslint-disable global-require */
jest.unmock('../DatePickerHeader'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_DatePickerHeader = require('../DatePickerHeader'); /* istanbul ignore next */var _DatePickerHeader2 = _interopRequireDefault(_DatePickerHeader);
var /* istanbul ignore next */_PickerControl = require('../PickerControl'); /* istanbul ignore next */var _PickerControl2 = _interopRequireDefault(_PickerControl);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('DatePickerHeader', function () {
  it('displays a picker control for selecting the year and a picker control for selecting the calendar', function () {
    var DateTimeFormat = require('../../utils/DateUtils/DateTimeFormat');

    var props = {
      changeCalendarMode: jest.fn(),
      DateTimeFormat: DateTimeFormat,
      locales: 'en-US',
      calendarTempDate: new Date(2016, 1, 1),
      calendarMode: 'year' };


    var header = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DatePickerHeader2.default, props));
    var controls = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(header, /* istanbul ignore next */_PickerControl2.default);
    expect(controls.length).toBe(2); /* istanbul ignore next */var _controls = _slicedToArray(

    controls, 2),year = _controls[0],calendar = _controls[1];
    expect(year.props.onClick).toBe(header._selectYear);
    expect(calendar.props.onClick).toBe(header._selectCalendar);
  });

  it('formats the calendar temp date', function () {
    var DateTimeFormat = require('../../utils/DateUtils/DateTimeFormat');
    var props = {
      calendarTempDate: new Date(2016, 1, 1),
      locales: 'en-US',
      changeCalendarMode: jest.fn(),
      calendarMode: 'year',
      DateTimeFormat: DateTimeFormat };


    var header = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DatePickerHeader2.default, props)); /* istanbul ignore next */var _DateTimeFormat$mock$ = _slicedToArray(

    DateTimeFormat.mock.calls, 3),time = _DateTimeFormat$mock$[0],weekday = _DateTimeFormat$mock$[1],date = _DateTimeFormat$mock$[2];
    expect(time[0]).toBe(props.locales);
    expect(time[1]).toEqual({ year: 'numeric' });

    expect(weekday[0]).toBe(props.locales);
    expect(weekday[1]).toEqual({ weekday: 'short' });

    expect(date[0]).toBe(props.locales);
    expect(date[1]).toEqual({ month: 'short', day: '2-digit' });

    expect(header.state.year).toBe('');
    expect(header.state.weekday).toBe('');
    expect(header.state.date).toBe('');
  });
});