/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../TextFieldMessage'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_TextFieldMessage = require('../TextFieldMessage'); /* istanbul ignore next */var _TextFieldMessage2 = _interopRequireDefault(_TextFieldMessage);
var /* istanbul ignore next */_Message = require('../Message'); /* istanbul ignore next */var _Message2 = _interopRequireDefault(_Message);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('TextFieldMessage', function () {
  it('returns null if there is no helpText, errorText, or maxLength', function () {
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, /* istanbul ignore next */{ currentLength: 0 }));
    var messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);

    expect(messageNode).toBe(null);

    var props = { helpText: 'something', currentLength: 0 };
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode).not.toBe(null);

    props = { errorText: 'Something', currentLength: 0 };
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode).not.toBe(null);

    props = { maxLength: 20, currentLength: 0 };
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode).not.toBe(null);
  });

  it('renders two Message components', function () {
    var props = { maxLength: 20, currentLength: 20 };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    var messages = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default);

    expect(messages.length).toBe(2);
  });

  it('renders the first Message component with the either the helpText or errorText', function () {
    var props = { helpText: 'Help!', currentLength: 0 };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props)); /* istanbul ignore next */var _scryRenderedComponen =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default),_scryRenderedComponen2 = _slicedToArray(_scryRenderedComponen, 1),m = _scryRenderedComponen2[0];
    expect(m.props.children).toBe(props.helpText);

    props = { errorText: 'Error!', currentLength: 0 };
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    m = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default)[0];
    expect(m.props.children).toBe(props.errorText);
  });

  it('renders the first Message component with the errorText instead of the helpText if the error prop is true', function () {
    var props = { helpText: 'Help!', errorText: 'Error!', error: false, currentLength: 0 };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props)); /* istanbul ignore next */var _scryRenderedComponen3 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default),_scryRenderedComponen4 = _slicedToArray(_scryRenderedComponen3, 1),m = _scryRenderedComponen4[0];
    expect(m.props.children).toBe(props.helpText);

    props.error = true;
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    m = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default)[0];
    expect(m.props.children).toBe(props.errorText);
  });

  it('renders the second Message component with null if there is no maxLength', function () {
    var props = { currentLength: 0, helpText: 'Help!' };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    var counter = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default)[1];
    expect(counter.props.children).toBe(null);

    props.maxLength = 20;
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    counter = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default)[1];
    expect(counter.props.children).toBe( /* istanbul ignore next */props.currentLength + ' / ' + props.maxLength);
  });

  it('renders the second Message component with the --counter state', function () {
    var props = { currentLength: 0, helpText: 'Help!' };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextFieldMessage2.default, props));
    var counter = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(message, /* istanbul ignore next */_Message2.default)[1];
    expect(counter.props.className).toBe('md-text-field-message--counter');
  });
});