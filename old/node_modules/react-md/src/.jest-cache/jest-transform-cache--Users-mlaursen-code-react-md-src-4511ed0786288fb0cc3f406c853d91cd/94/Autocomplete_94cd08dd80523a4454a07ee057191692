/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../Autocomplete'); /* istanbul ignore next */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');






var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_keyCodes = require('../../constants/keyCodes');
var /* istanbul ignore next */_Autocomplete = require('../Autocomplete'); /* istanbul ignore next */var _Autocomplete2 = _interopRequireDefault(_Autocomplete);
var /* istanbul ignore next */_TextField = require('../../TextFields/TextField'); /* istanbul ignore next */var _TextField2 = _interopRequireDefault(_TextField);
var /* istanbul ignore next */_Menu = require('../../Menus/Menu'); /* istanbul ignore next */var _Menu2 = _interopRequireDefault(_Menu);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

Test = function (_React$Component) {_inherits(Test, _React$Component);function Test() {_classCallCheck(this, Test);return _possibleConstructorReturn(this, (Test.__proto__ || Object.getPrototypeOf(Test)).apply(this, arguments));}_createClass(Test, [{ key: 'render', value: function render()
    {
      return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */null));
    } }]);return Test;}( /* istanbul ignore next */_react2.default.Component);


describe('Autocomplete', function () {
  it('merges className and style', function () {
    var props = {
      style: { display: 'block' },
      className: 'test',
      textFieldStyle: { background: 'red' },
      textFieldClassName: 'woop-woop',
      data: [] };


    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(autocomplete, /* istanbul ignore next */_TextField2.default);
    var menu = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(autocomplete, /* istanbul ignore next */_Menu2.default);

    expect(field.props.style).toEqual(props.textFieldStyle);
    expect(field.props.className).toContain(props.textFieldClassName);

    expect(menu.props.style).toEqual(props.style);
    expect(menu.props.className).toContain(props.className);
  });

  it('passes the new value and the change event to the onChangeProp', function () {
    var props = { data: [], onChange: jest.fn() };
    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(autocomplete, 'input');
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(field, { target: { value: 'hello' } });
    expect(props.onChange).toBeCalled();
    expect(props.onChange.mock.calls[0][0]).toBe('hello');
    expect(props.onChange.mock.calls[0][1]).toBeDefined();
  });

  it('can be controlled', function () {
    var props = {
      data: [],
      filter: null,
      value: 'hello',
      onChange: jest.fn() };


    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(autocomplete, 'input');
    expect(field.value).toBe(props.value);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(field, { target: { value: 'hello2' } });
    expect(props.onChange.mock.calls.length).toBe(1);
    expect(props.onChange.mock.calls[0][0]).toBe('hello2');
  });

  it('allows for a custom filter function', function () {
    var props = {
      data: ['a', 'b', 'c'],
      filter: jest.fn(function (data, value) /* istanbul ignore next */{return data.filter(function (d) /* istanbul ignore next */{return d === value;});}) };


    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var textField = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(autocomplete, 'input');

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(textField, { target: { value: 'c' } });
    expect(props.filter.mock.calls.length).toBe(1);
    expect(props.filter.mock.calls[0][0]).toEqual(props.data);
    expect(props.filter.mock.calls[0][1]).toBe('c');
    expect(props.filter.mock.calls[0][2]).toBe( /* istanbul ignore next */_Autocomplete2.default.defaultProps.dataLabel);
  });

  it('opens the menu on focus if there are any matches', function () {
    var props = {
      data: ['a', 'b', 'c'],
      defaultValue: 'a' };


    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var textField = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(autocomplete, 'input');

    expect(autocomplete.state.isOpen).toBe(false);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.focus(textField);
    expect(autocomplete.state.isOpen).toBe(true);
  });

  it('updates the text field\'s value on autocomplete', function () {
    var props = {
      data: ['Apple', 'Banana', 'Orange'] };


    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var textField = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(autocomplete, 'input');

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(textField, { target: { value: 'ap' } });
    expect(autocomplete.state.value).toBe('ap');

    autocomplete._handleItemClick(0);
    expect(autocomplete.state.value).toBe('Apple');
  });

  it('autocompletes the inline suggestion on tab', function () {
    var props = { data: ['Apple', 'Banana', 'Orange'], inline: true };
    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var textField = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(autocomplete, 'input');

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(textField, { target: { value: 'or' } });
    expect(textField.value).toBe('or');

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(textField, { which: /* istanbul ignore next */_keyCodes.TAB, keyCode: /* istanbul ignore next */_keyCodes.TAB });
    expect(textField.value).toBe('Orange');
  });

  it('calls the optional onMenuOpen prop when the menu opens', function () {
    var props = { data: [], onMenuOpen: jest.fn() };
    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));

    autocomplete.setState({ isOpen: true });
    expect(props.onMenuOpen.mock.calls.length).toBe(1);
  });

  it('calls the optional onMenuClose prop when the menu closes', function () {
    var props = { data: [], onMenuClose: jest.fn() };
    var autocomplete = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));

    autocomplete.setState({ isOpen: true });
    expect(props.onMenuClose.mock.calls.length).toBe(0);

    autocomplete.setState({ isOpen: false });
    expect(props.onMenuClose.mock.calls.length).toBe(1);
  });

  it('should update the isOpen state when a filter function has been provided and the value has changed', function () {
    var props = { data: ['Hello', 'World'], defaultValue: 'h' };
    var autocomplete = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));
    var input = autocomplete.find('input');
    expect(input.length).toBe(1);

    input.simulate('focus');
    expect(autocomplete.state('isOpen')).toBe(true);

    input.simulate('change', { target: { value: 'he' } });
    expect(autocomplete.state('isOpen')).toBe(true);

    input.simulate('change', { target: { value: '' } });
    expect(autocomplete.state('isOpen')).toBe(false);

    input.simulate('change', { target: { value: 'h' } });
    expect(autocomplete.state('isOpen')).toBe(true);

    input.simulate('change', { target: { value: 'b' } });
    expect(autocomplete.state('isOpen')).toBe(false);
  });

  it('should not change the isOpen state when a filter function has not been provided', function () {
    var data = ['Hello', 'World'];
    var props = { data: data, filter: null, defaultValue: 'h' };
    var autocomplete = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Autocomplete2.default, props));

    expect(autocomplete.state('matches')).toBe(data);
    expect(autocomplete.state('isOpen')).toBe(false);
    var input = autocomplete.find('input');
    expect(input.length).toBe(1);

    input.simulate('focus');
    expect(autocomplete.state('isOpen')).toBe(true);

    input.simulate('change', { target: { value: 'b' } });
    expect(autocomplete.state('isOpen')).toBe(true);
  });

  describe('caseInsensitiveFilter', function () {
    it('includes any items that match a single letter', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.caseInsensitiveFilter;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(filter(haystack, 'a')).toEqual(haystack);
      expect(filter(haystack, 'e')).toEqual(['Apple', 'Orange']);
    });

    it('includes any items that match a single letter ignoring case', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.caseInsensitiveFilter;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(filter(haystack, 'A')).toEqual(haystack);
      expect(filter(haystack, 'E')).toEqual(['Apple', 'Orange']);
    });

    it('only includes items that match letters in order', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.caseInsensitiveFilter;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(filter(haystack, 'an')).toEqual(['Banana', 'Orange']);
      expect(filter(haystack, 'ana')).toEqual(['Banana']);
    });

    it('allows the items to be a list of numbers', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.caseInsensitiveFilter;
      var haystack = [1, 11, 111];

      expect(filter(haystack, '1')).toEqual(haystack);
      expect(filter(haystack, '2')).toEqual([]);
    });

    it('allows the items to be a list of objects', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.caseInsensitiveFilter;
      var haystack = [{ name: 'Apple' }, { name: 'Banana' }, { name: 'Orange' }];

      expect(filter(haystack, 'apple', 'name')).toEqual([{ name: 'Apple' }]);
    });

    it('allows the item to be a mixed list of string, number, object, and react element', function () {
      var test = /* istanbul ignore next */_react2.default.createElement(Test, /* istanbul ignore next */null);
      var filter = /* istanbul ignore next */_Autocomplete2.default.caseInsensitiveFilter;
      var haystack = [{ name: 'Apple' }, 'Banana', 3, test];

      expect(filter(haystack, 'e', 'name')).toEqual([{ name: 'Apple' }, test]);
      expect(filter(haystack, '3', 'name')).toEqual([3, test]);
    });

    it('filters out empty, null, and undefined', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.caseInsensitiveFilter;
      var haystack = [
      undefined,
      '',
      null,
      0,
      100,
      { name: undefined },
      { name: '' },
      { name: null }];


      expect(filter(haystack, '0')).toEqual([0, 100]);
    });
  });

  describe('fuzzyFilter', function () {
    it('includes items that contain the letter', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.fuzzyFilter;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(filter(haystack, 'a')).toEqual(haystack);
      expect(filter(haystack, 'z')).toEqual([]);
    });

    it('includes items that contain all the letters', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.fuzzyFilter;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(filter(haystack, 'ae')).toEqual(['Apple', 'Orange']);
    });

    it('allows the items to be a list of numbers', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.fuzzyFilter;
      var haystack = [1, 315, 814325, 82];

      expect(filter(haystack, '1')).toEqual([1, 315, 814325]);
      expect(filter(haystack, '15')).toEqual([315, 814325]);
    });

    it('allows the items to be a list of objects', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.fuzzyFilter;
      var haystack = [{ name: 'Apple' }, { name: 'Banana' }, { name: 'Orange' }];

      expect(filter(haystack, 'ae', 'name')).toEqual([{ name: 'Apple' }, { name: 'Orange' }]);
    });

    it('allows the items to be a mixed list of string, number, object, and react element', function () {
      var test = /* istanbul ignore next */_react2.default.createElement(Test, /* istanbul ignore next */null);
      var filter = /* istanbul ignore next */_Autocomplete2.default.fuzzyFilter;
      var haystack = [{ name: 'Apple' }, 'Banana', 3, test];

      expect(filter(haystack, 'e', 'name')).toEqual([{ name: 'Apple' }, test]);
      expect(filter(haystack, '3', 'name')).toEqual([3, test]);
    });

    it('filters out empty, null, and undefined', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.fuzzyFilter;
      var haystack = [
      undefined,
      '',
      null,
      0,
      100,
      { name: undefined },
      { name: '' },
      { name: null }];


      expect(filter(haystack, '0', 'name')).toEqual([0, 100]);
    });

    it('should allow a any characters that are used in regex', function () {
      var filter = /* istanbul ignore next */_Autocomplete2.default.fuzzyFilter;
      var haystack = [
      'Ap^p[]e',
      '$What',
      '(Now!)',
      'Who?',
      'Through-Stuff.',
      'What\'s \\ That?',
      'Pipe | Pipe',
      'You **'];


      expect(filter(haystack, '[')).toEqual(['Ap^p[]e']);
      expect(filter(haystack, ']')).toEqual(['Ap^p[]e']);
      expect(filter(haystack, '^')).toEqual(['Ap^p[]e']);
      expect(filter(haystack, '$')).toEqual(['$What']);
      expect(filter(haystack, '(')).toEqual(['(Now!)']);
      expect(filter(haystack, ')')).toEqual(['(Now!)']);
      expect(filter(haystack, '?')).toEqual(['Who?', 'What\'s \\ That?']);
      expect(filter(haystack, '-')).toEqual(['Through-Stuff.']);
      expect(filter(haystack, '.')).toEqual(['Through-Stuff.']);
      expect(filter(haystack, '\\')).toEqual(['What\'s \\ That?']);
      expect(filter(haystack, '|')).toEqual(['Pipe | Pipe']);
      expect(filter(haystack, '*')).toEqual(['You **']);

      expect(filter(haystack, '(?!What)')).toEqual([]);
      expect(filter(haystack, '(Now!)')).toEqual(['(Now!)']);
    });
  });

  describe('findIgnoreCase', function () {
    it('returns the empty string if no word starts with the given letter', function () {
      var find = /* istanbul ignore next */_Autocomplete2.default.findIgnoreCase;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(find(haystack, 'e')).toBe('');
    });

    it('returns the empty string if no words starts with the given letters', function () {
      var find = /* istanbul ignore next */_Autocomplete2.default.findIgnoreCase;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(find(haystack, 'ab')).toBe('');
      expect(find(haystack, 'appb')).toBe('');
    });

    it('finds the first match of a word beginning with the given letter ignoring case', function () {
      var find = /* istanbul ignore next */_Autocomplete2.default.findIgnoreCase;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(find(haystack, 'a')).toEqual('Apple');
      expect(find(haystack, 'B')).toEqual('Banana');
    });

    it('find the first match of a word beginning with the given letters ignoring case', function () {
      var find = /* istanbul ignore next */_Autocomplete2.default.findIgnoreCase;
      var haystack = ['Apple', 'Banana', 'Orange'];

      expect(find(haystack, 'ap')).toEqual('Apple');
      expect(find(haystack, 'Bana')).toEqual('Banana');
    });

    it('allows the items to be a list of number', function () {
      var find = /* istanbul ignore next */_Autocomplete2.default.findIgnoreCase;
      var haystack = [1, 2, 3, 4];

      expect(find(haystack, '1')).toEqual('1');
    });

    it('allows the items to be a list of object', function () {
      var find = /* istanbul ignore next */_Autocomplete2.default.findIgnoreCase;
      var haystack = [{ name: 'Apple' }, { name: 'Banana' }, { name: 'Orange' }];

      expect(find(haystack, 'ap', 'name')).toBe('Apple');
    });

    it('allows the items to be a mixed list of string, number, object, and react element', function () {
      var test = /* istanbul ignore next */_react2.default.createElement(Test, /* istanbul ignore next */null);
      var find = /* istanbul ignore next */_Autocomplete2.default.findIgnoreCase;
      var haystack = [{ name: 'Apple' }, 'Banana', 3, test];

      expect(find(haystack, 'a', 'name')).toEqual('Apple');
      expect(find(haystack, '3', 'name')).toBe('3');
    });
  });
});