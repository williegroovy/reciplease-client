/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../FontIcon');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');

var /* istanbul ignore next */_FontIcon = require('../FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('FontIcon', function () {
  it('applies a className and an iconClassName', function () {
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ className: 'test', iconClassName: 'fa fa-github' }));
    var iconNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon);

    expect(iconNode.classList.contains('test')).toBe(true);
    expect(iconNode.classList.contains('fa')).toBe(true);
    expect(iconNode.classList.contains('fa-github')).toBe(true);
  });

  it('passes all remaining props to the font icon', function () {
    var onClick = jest.fn();
    var onFocus = jest.fn();
    var onBlur = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var style = { display: 'block' };

    var divider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{
      style: style,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel }));



    var dividerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(divider);
    expect(dividerNode.style.display).toBe(style.display);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(dividerNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.focus(dividerNode);
    expect(onFocus).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.blur(dividerNode);
    expect(onBlur).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(dividerNode);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(dividerNode);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(dividerNode);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(dividerNode);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(dividerNode);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(dividerNode);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(dividerNode);
    expect(onTouchCancel).toBeCalled();
  });

  it('should set the width and height to 24 if the forceSize prop is enabled', function () {
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ forceSize: /* istanbul ignore next */true }));
    var style = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon).style;
    var expected = '24px';
    expect(style.height).toBe(expected);
    expect(style.width).toBe(expected);
  });

  it('should only set the fontSize when forceFontSize is enabled', function () {
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ forceSize: /* istanbul ignore next */true }));
    var style = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon).style;
    var expected = '24px';
    expect(style.height).toBe(expected);
    expect(style.width).toBe(expected);
    expect(style.fontSize).toBe('');

    icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ forceSize: /* istanbul ignore next */true, forceFontSize: /* istanbul ignore next */true }));
    style = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon).style;
    expect(style.height).toBe(expected);
    expect(style.width).toBe(expected);
    expect(style.fontSize).toBe(expected);
  });

  it('should set the width and height to the provided forceSize value', function () {
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ forceSize: 16 }));
    var style = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon).style;
    var expected = '16px';
    expect(style.height).toBe(expected);
    expect(style.width).toBe(expected);
  });

  it('should only set the fontSize to the provided forceSize value when forceFontSize is enabled', function () {
    var size = 16;
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ forceSize: size }));
    var style = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon).style;
    var expected = /* istanbul ignore next */size + 'px';
    expect(style.height).toBe(expected);
    expect(style.width).toBe(expected);
    expect(style.fontSize).toBe('');

    icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */{ forceSize: size, forceFontSize: /* istanbul ignore next */true }));
    style = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon).style;
    expect(style.height).toBe(expected);
    expect(style.width).toBe(expected);
    expect(style.fontSize).toBe(expected);
  });

  it('should prefer the style prop values over the forceSize styles', function () {
    var props = {
      style: { width: 16, height: 22, fontSize: 8 },
      forceSize: true,
      forceFontSize: true };


    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, props));
    var style = /* istanbul ignore next */(0, _reactDom.findDOMNode)(icon).style;
    expect(style.fontSize).toBe('8px');
    expect(style.height).toBe('22px');
    expect(style.width).toBe('16px');
  });
});