/* istanbul ignore next */'use strict'; /* eslint-env jest*/
/* eslint-disable global-require */
jest.unmock('../CalendarDate');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_CalendarDate = require('../CalendarDate'); /* istanbul ignore next */var _CalendarDate2 = _interopRequireDefault(_CalendarDate);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('CalendarDate', function () {
  it('calls the onClick prop with the date prop when not disabled', function () {
    var DateTimeFormat = require('../../utils/DateUtils/DateTimeFormat');
    var props = {
      DateTimeFormat: DateTimeFormat,
      locales: 'en-US',
      date: new Date(2016, 1, 1),
      disabled: false,
      onClick: jest.fn(),
      index: 0 };


    var date = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CalendarDate2.default, props));
    var dateNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(date);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(dateNode);
    expect(props.onClick.mock.calls.length).toBe(1);

    var newProps = Object.assign({}, props, { disabled: true });
    date = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CalendarDate2.default, newProps));
    dateNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(date);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(dateNode);
    expect(props.onClick.mock.calls.length).toBe(1);
  });

  it('formats the date as the state', function () {
    var DateTimeFormat = require('../../utils/DateUtils/DateTimeFormat');
    var props = {
      DateTimeFormat: DateTimeFormat,
      locales: 'en-US',
      date: new Date(2016, 1, 1),
      disabled: false,
      onClick: jest.fn(),
      index: 0 };


    var date = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CalendarDate2.default, props));
    expect(date.state.date).toBe('');
  });
});