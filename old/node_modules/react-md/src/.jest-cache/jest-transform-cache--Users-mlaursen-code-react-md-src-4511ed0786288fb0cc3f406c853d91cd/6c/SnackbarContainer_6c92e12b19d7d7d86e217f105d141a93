/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../SnackbarContainer');
jest.unmock('../../Dialogs/Dialog');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_SnackbarContainer = require('../SnackbarContainer'); /* istanbul ignore next */var _SnackbarContainer2 = _interopRequireDefault(_SnackbarContainer);
var /* istanbul ignore next */_Snackbar = require('../Snackbar'); /* istanbul ignore next */var _Snackbar2 = _interopRequireDefault(_Snackbar);
var /* istanbul ignore next */_Dialog = require('../../Dialogs/Dialog'); /* istanbul ignore next */var _Dialog2 = _interopRequireDefault(_Dialog);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var PROPS = { onDismiss: jest.fn(), toasts: [] };
describe('SnackbarContainer', function () {
  it('creates a single timeout for the _initAndToast function that sets the visibility and current toast', function () {
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SnackbarContainer2.default, PROPS));
    expect(container.state.toast).toBe(null);
    expect(container.state.visible).toBe(false);

    var toast = { text: 'Hello, World!' };
    container._initAndToast(toast);
    expect(container.state.toast).toBe(null);
    expect(container.state.visible).toBe(true);

    jest.runOnlyPendingTimers();
    expect(container.state.toast).toEqual(toast);
    expect(container.state.visible).toBe(true);
  });

  it('creates a single timeout when the _createLeaveTimer is called', function () {
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SnackbarContainer2.default, PROPS));
    var toast = { text: 'Hello, World!' };
    container._initAndToast(toast);
    jest.runAllTimers();
    expect(container.state.toast).toEqual(toast);
    expect(container.state.visible).toBe(true);

    container._createLeaveTimer();
    expect(container.state.toast).toBe(null);
    expect(container.state.visible).toBe(true);

    jest.runOnlyPendingTimers();
    expect(container.state.toast).toBe(null);
    expect(container.state.visible).toBe(false);
  });

  it('swaps toasts when the _createSwapTimer is called', function () {
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SnackbarContainer2.default, PROPS));
    var toast = { text: 'Hello, World!' };
    container._initAndToast(toast);
    jest.runAllTimers();
    expect(container.state.toast).toEqual(toast);
    expect(container.state.visible).toBe(true);

    var toast2 = { text: 'Woop Woop' };
    container._createSwapTimer(toast2);
    expect(container.state.toast).toBe(null);
    expect(container.state.visible).toBe(true);

    jest.runOnlyPendingTimers();
    expect(container.state.toast).toEqual(toast2);
    expect(container.state.visible).toBe(true);
  });

  it('calls the _isMultiline with the toast when the _initAndToast function is called', function () {
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SnackbarContainer2.default, PROPS));
    container._isMultiline = jest.fn();
    expect(container._isMultiline.mock.calls.length).toBe(0);

    var toast = { text: 'Hello, World!' };
    container._initAndToast(toast);
    jest.runAllTimers();
    expect(container._isMultiline.mock.calls.length).toBe(1);
    expect(container._isMultiline.mock.calls[0][0]).toEqual(toast);
  });

  it('renders a Snackbar component with the stle and className', function () {
    var props = Object.assign({}, PROPS, { style: { background: 'orange' }, className: 'test' });
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SnackbarContainer2.default, props));
    var snackbars = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(container, /* istanbul ignore next */_Snackbar2.default);
    expect(snackbars.length).toBe(0);

    var toast = { text: 'Hello, World!' };
    container._initAndToast(toast);
    jest.runAllTimers();

    snackbars = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(container, /* istanbul ignore next */_Snackbar2.default);
    expect(snackbars.length).toBe(1);
    expect(snackbars[0].props.style).toEqual(props.style);
    expect(snackbars[0].props.className).toContain(props.className);
  });

  it('should inherit the dialog\'s renderNode context', function () {
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SnackbarContainer2.default, PROPS)));
    var snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(dialog, /* istanbul ignore next */_SnackbarContainer2.default);
    expect(snackbar.context.renderNode).toBe(dialog.getChildContext().renderNode);
  });
});