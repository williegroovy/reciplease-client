/* istanbul ignore next */'use strict'; /* eslint-env jest */
/* eslint-disable max-len */
jest.unmock('../TimePickerContainer');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_TimePickerContainer = require('../TimePickerContainer'); /* istanbul ignore next */var _TimePickerContainer2 = _interopRequireDefault(_TimePickerContainer);
var /* istanbul ignore next */_TextField = require('../../TextFields/TextField'); /* istanbul ignore next */var _TextField2 = _interopRequireDefault(_TextField);
var /* istanbul ignore next */_keyCodes = require('../../constants/keyCodes'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('TimePickerContainer', function () {
  it('merges className and style', function () {
    var props = {
      style: { background: 'black' },
      className: 'test',
      id: 'test' };


    var timePickerContainer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerContainer2.default, props));

    var timePickerContainerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(timePickerContainer);
    expect(timePickerContainerNode.style.background).toBe(props.style.background);
    expect(timePickerContainerNode.className).toContain(props.className);
  });

  it('renders a TextField witht he correct props', function () {
    var props = {
      id: 'test',
      disabled: false,
      label: 'Woop',
      placeholder: 'Noop',
      fullWidth: false,
      lineDirection: 'center' };


    var picker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerContainer2.default, props));
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(picker, /* istanbul ignore next */_TextField2.default);
    expect(field.props.id).toBe(props.id);
    expect(field.props.disabled).toBe(props.disabled);
    expect(field.props.label).toBe(props.label);
    expect(field.props.placeholder).toBe(props.placeholder);
    expect(field.props.readOnly).toBe(true);
    expect(field.props.fullWidth).toBe(props.fullWidth);
    expect(field.props.lineDirection).toBe(props.lineDirection);
  });

  it('calls the onChange prop when the ok button is clicked', function () {
    var props = {
      id: 'test',
      onChange: jest.fn(),
      defaultValue: new Date(2016, 3, 15, 3, 55) };


    var picker = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerContainer2.default, props));
    var event = { target: { value: '3:55' } };
    picker._handleOkClick(event);

    expect(props.onChange.mock.calls.length).toBe(1);
    // a string of '3:55'
    expect(props.onChange.mock.calls[0][0]).toBeDefined();
    expect(props.onChange.mock.calls[0][1]).toEqual(props.defaultValue);
    expect(props.onChange.mock.calls[0][2]).toEqual(event);
  });

  it('should not open the TimePicker if it is disabled and the text field is clicked', function () {
    var props = { id: 'test', disabled: true };
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerContainer2.default, props));

    container._toggleOpen({ target: { tagName: 'input' } });
    expect(container.state.visible).toBe(false);
  });

  it('should not open the TimePicker if it is disabled and the users pressed the enter key while focused on the keyboard', function () {
    var props = { id: 'test', disabled: true };
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerContainer2.default, props));

    container._handleKeyDown({ keyCode: /* istanbul ignore next */_keyCodes.ENTER, target: { tagName: 'input' } });
    expect(container.state.visible).toBe(false);
  });
});