/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../PasswordButton');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_PasswordButton = require('../PasswordButton'); /* istanbul ignore next */var _PasswordButton2 = _interopRequireDefault(_PasswordButton);
var /* istanbul ignore next */_FontIcon = require('../../FontIcons/FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('PasswordButton', function () {
  it('uses the onClick prop', function () {
    var onClick = jest.fn();
    var props = { active: false, passwordVisible: false, onClick: onClick };
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PasswordButton2.default, props));
    var btnNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(btn);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(btnNode);
    expect(onClick).toBeCalled();
  });

  it('addes the active state when the active prop is true', function () {
    var props = { active: false };
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PasswordButton2.default, props));
    var btnNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(btn);
    expect(btnNode.className).not.toContain('--active');

    props.active = true;
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PasswordButton2.default, props));
    btnNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(btn);
    expect(btnNode.className).toContain('--active');
  });

  it('adds the invisible state wen the assword is not visible and active', function () {
    var props = { active: false, passwordVisible: false };
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PasswordButton2.default, props));
    var btnNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(btn);
    expect(btnNode.className).not.toContain('--invisible');

    props.active = true;
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PasswordButton2.default, props));
    btnNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(btn);
    expect(btnNode.className).toContain('--invisible');

    props.passwordVisible = true;
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PasswordButton2.default, props));
    btnNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(btn);
    expect(btnNode.className).not.toContain('--invisible');
  });

  it('renders a FontIcon component with the iconClassName and iconChildren props', function () {
    var props = { iconClassName: 'material-icons', iconChildren: 'red_eye' };
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PasswordButton2.default, props));
    var icon = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(btn, /* istanbul ignore next */_FontIcon2.default);
    expect(icon.props.iconClassName).toBe(props.iconClassName);
    expect(icon.props.children).toBe(props.iconChildren);
  });
});