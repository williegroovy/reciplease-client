/* istanbul ignore next */'use strict'; /* eslint-env jest */
/* eslint-disable max-len */
jest.unmock('../SelectionControlGroup'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_SelectionControlGroup = require('../SelectionControlGroup'); /* istanbul ignore next */var _SelectionControlGroup2 = _interopRequireDefault(_SelectionControlGroup);
var /* istanbul ignore next */_SelectionControl = require('../SelectionControl'); /* istanbul ignore next */var _SelectionControl2 = _interopRequireDefault(_SelectionControl);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var PROPS = {
  id: 'test',
  name: 'test',
  controls: [{ value: 'eyyy', label: 'eyyy' }],
  type: 'checkbox' };


var PROPS_2 = Object.assign({}, PROPS, {
  controls: PROPS.controls.concat([{ value: 'something', label: 'Something' }]) });


describe('SelectionControlGroup', function () {
  it('merges className and style', function () {
    var props = Object.assign({}, PROPS, {
      style: { background: 'black' },
      className: 'test' });


    var selectionControlGroup = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props));

    var selectionControlGroupNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(selectionControlGroup);
    expect(selectionControlGroupNode.style.background).toBe(props.style.background);
    expect(selectionControlGroupNode.className).toContain(props.className);
  });

  it('renders as a fieldset by default', function () {
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, PROPS));
    var fieldsets = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(group, 'fieldset');
    expect(fieldsets.length).toBe(1);
  });

  it('renders as the value of the component prop', function () {
    var props = Object.assign({}, PROPS, { component: 'div' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props));
    var divs = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(group, 'div');
    expect(divs.length).toBe(1);
  });

  it('renders the label prop in a legend by default', function () {
    var props = Object.assign({}, PROPS, { label: 'Test' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props));
    var legends = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(group, 'legend');
    expect(legends.length).toBe(1);
    expect(legends[0].innerHTML).toBe(props.label);
  });

  it('renders the label prop in the value of the labelComponent prop', function () {
    var props = Object.assign({}, PROPS, { label: 'Test', labelComponent: 'label' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props));
    var labels = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(group, 'label');
    expect(labels.length).toBe(1);
    expect(labels[0].innerHTML).toBe(props.label);
  });

  it('renders a list of SelectionControl equal to the length pf the controls prop', function () {
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, PROPS));
    var controls = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default);
    expect(controls.length).toBe(PROPS.controls.length);
  });

  it('sets the SelectionControl type from the type prop', function () {
    var props = Object.assign({}, PROPS_2, { type: 'checkbox' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen2 = _slicedToArray(_scryRenderedComponen, 2),f = _scryRenderedComponen2[0],s = _scryRenderedComponen2[1];

    expect(f.props.type).toBe('checkbox');
    expect(s.props.type).toBe('checkbox');

    props.type = 'radio';
    group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen3 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default); /* istanbul ignore next */var _scryRenderedComponen4 = _slicedToArray(_scryRenderedComponen3, 2);f = _scryRenderedComponen4[0]; /* istanbul ignore next */s = _scryRenderedComponen4[1];

    expect(f.props.type).toBe('radio');
    expect(s.props.type).toBe('radio');
  });

  it('merges style and className for each control with the controlStyle and controlClassName props', function () {
    var props = Object.assign({}, PROPS_2, {
      controls: PROPS_2.controls.map(function ( /* istanbul ignore next */_ref, i) /* istanbul ignore next */{var value = _ref.value,label = _ref.label;return {
          value: value,
          label: label,
          style: { left: i },
          className: /* istanbul ignore next */'test-control-' + i };}),

      controlStyle: { background: 'red' },
      controlClassName: 'test-control-woop' });

    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen5 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen6 = _slicedToArray(_scryRenderedComponen5, 2),f = _scryRenderedComponen6[0],s = _scryRenderedComponen6[1];

    expect(f.props.style).toEqual({ left: 0, background: 'red' });
    expect(f.props.className).toContain('test-control-0');
    expect(f.props.className).toContain('test-control-woop');
    expect(s.props.style).toEqual({ left: 1, background: 'red' });
    expect(s.props.className).toContain('test-control-1');
    expect(s.props.className).toContain('test-control-woop');
  });

  it('sets the id prop as a prefix for each SelectionControl', function () {
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, PROPS_2)); /* istanbul ignore next */var _scryRenderedComponen7 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen8 = _slicedToArray(_scryRenderedComponen7, 2),f = _scryRenderedComponen8[0],s = _scryRenderedComponen8[1];

    expect(f.props.id.startsWith(PROPS_2.id)).toBe(true);
    expect(s.props.id.startsWith(PROPS_2.id)).toBe(true);
  });

  it('does not set the id for controls that already have an id', function () {
    var props = Object.assign({}, PROPS_2, {
      controls: PROPS_2.controls.map(function ( /* istanbul ignore next */_ref2) /* istanbul ignore next */{var value = _ref2.value,label = _ref2.label;return {
          label: label,
          value: value,
          id: label };}) });


    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen9 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen10 = _slicedToArray(_scryRenderedComponen9, 2),f = _scryRenderedComponen10[0],s = _scryRenderedComponen10[1];

    expect(f.props.id).toBe(f.props.label);
    expect(f.props.id.startsWith(props.id)).toBe(false);
    expect(s.props.id).toBe(s.props.label);
    expect(s.props.id.startsWith(props.id)).toBe(false);
  });

  it('sets an array version of the name prop for each SelectionControl when the type is checkbox', function () {
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, PROPS_2)); /* istanbul ignore next */var _scryRenderedComponen11 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen12 = _slicedToArray(_scryRenderedComponen11, 2),f = _scryRenderedComponen12[0],s = _scryRenderedComponen12[1];

    expect(f.props.name).toBe( /* istanbul ignore next */PROPS_2.name + '[]');
    expect(s.props.name).toBe( /* istanbul ignore next */PROPS_2.name + '[]');
  });

  it('does not set the name for controls that already have an name', function () {
    var props = Object.assign({}, PROPS_2, {
      controls: PROPS_2.controls.map(function ( /* istanbul ignore next */_ref3) /* istanbul ignore next */{var value = _ref3.value,label = _ref3.label;return {
          label: label,
          value: value,
          name: 'someAmazingGroupOfStuff' };}) });


    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen13 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen14 = _slicedToArray(_scryRenderedComponen13, 2),f = _scryRenderedComponen14[0],s = _scryRenderedComponen14[1];

    expect(f.props.name).toBe('someAmazingGroupOfStuff');
    expect(f.props.name.startsWith(props.name)).toBe(false);
    expect(s.props.name).toBe('someAmazingGroupOfStuff');
    expect(s.props.name.startsWith(props.name)).toBe(false);
  });

  it('sets the name prop for each SelectionControl whent he type is radio', function () {
    var props = Object.assign({}, PROPS_2, { type: 'radio' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen15 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen16 = _slicedToArray(_scryRenderedComponen15, 2),f = _scryRenderedComponen16[0],s = _scryRenderedComponen16[1];

    expect(f.props.name).toBe(props.name);
    expect(s.props.name).toBe(props.name);
  });

  it('checks the checkbox that has the same value as the defaultValue prop', function () {
    var props = Object.assign({}, PROPS_2, { defaultValue: ' ' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen17 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen18 = _slicedToArray(_scryRenderedComponen17, 2),f = _scryRenderedComponen18[0],s = _scryRenderedComponen18[1];
    expect(f.props.checked).toBe(false);
    expect(s.props.checked).toBe(false);

    props.defaultValue = props.controls[0].value;
    group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen19 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default); /* istanbul ignore next */var _scryRenderedComponen20 = _slicedToArray(_scryRenderedComponen19, 2);f = _scryRenderedComponen20[0]; /* istanbul ignore next */s = _scryRenderedComponen20[1];
    expect(f.props.checked).toBe(true);
    expect(s.props.checked).toBe(false);
  });

  it('checks the checkbox that has the same value as the value prop', function () {
    var props = Object.assign({}, PROPS_2, { value: ' ' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen21 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen22 = _slicedToArray(_scryRenderedComponen21, 2),f = _scryRenderedComponen22[0],s = _scryRenderedComponen22[1];
    expect(f.props.checked).toBe(false);
    expect(s.props.checked).toBe(false);

    props.value = props.controls[0].value;
    group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen23 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default); /* istanbul ignore next */var _scryRenderedComponen24 = _slicedToArray(_scryRenderedComponen23, 2);f = _scryRenderedComponen24[0]; /* istanbul ignore next */s = _scryRenderedComponen24[1];
    expect(f.props.checked).toBe(true);
    expect(s.props.checked).toBe(false);
  });

  it('expects a comma-delimited defaultValue prop when multiple checkboxes are checked by default', function () {
    var props = Object.assign({}, PROPS_2, { defaultValue: 'eyyy,something' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen25 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen26 = _slicedToArray(_scryRenderedComponen25, 2),f = _scryRenderedComponen26[0],s = _scryRenderedComponen26[1];
    expect(f.props.checked).toBe(true);
    expect(s.props.checked).toBe(true);
  });

  it('does not matter what order the comma-delimited defaultValue prop when multiple checkboxes are checked by default is', function () {
    var props = Object.assign({}, PROPS_2, { defaultValue: 'something,eyyy' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen27 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen28 = _slicedToArray(_scryRenderedComponen27, 2),f = _scryRenderedComponen28[0],s = _scryRenderedComponen28[1];
    expect(f.props.checked).toBe(true);
    expect(s.props.checked).toBe(true);
  });

  it('expects a comma-delimited value prop when multiple checkboxes are checked by default', function () {
    var props = Object.assign({}, PROPS_2, { value: 'eyyy,something' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen29 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen30 = _slicedToArray(_scryRenderedComponen29, 2),f = _scryRenderedComponen30[0],s = _scryRenderedComponen30[1];
    expect(f.props.checked).toBe(true);
    expect(s.props.checked).toBe(true);
  });

  it('does not matter what order the comma-delimited value prop when multiple checkboxes are checked by default is', function () {
    var props = Object.assign({}, PROPS_2, { value: 'something,eyyy' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen31 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen32 = _slicedToArray(_scryRenderedComponen31, 2),f = _scryRenderedComponen32[0],s = _scryRenderedComponen32[1];
    expect(f.props.checked).toBe(true);
    expect(s.props.checked).toBe(true);
  });

  it('checks the first radio button when the defaultValue and value props are not defined', function () {
    var props = Object.assign({}, PROPS_2, { type: 'radio' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen33 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen34 = _slicedToArray(_scryRenderedComponen33, 2),f = _scryRenderedComponen34[0],s = _scryRenderedComponen34[1];
    expect(f.props.checked).toBe(true);
    expect(s.props.checked).toBe(false);
  });

  it('checkes the radio button that matches the defaultValue', function () {
    var props = Object.assign({}, PROPS_2, { type: 'radio', defaultValue: 'something' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen35 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen36 = _slicedToArray(_scryRenderedComponen35, 2),f = _scryRenderedComponen36[0],s = _scryRenderedComponen36[1];
    expect(f.props.checked).toBe(false);
    expect(s.props.checked).toBe(true);
  });

  it('checkes the radio button that matches the value', function () {
    var props = Object.assign({}, PROPS_2, { type: 'radio', value: 'something' });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props)); /* istanbul ignore next */var _scryRenderedComponen37 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(group, /* istanbul ignore next */_SelectionControl2.default),_scryRenderedComponen38 = _slicedToArray(_scryRenderedComponen37, 2),f = _scryRenderedComponen38[0],s = _scryRenderedComponen38[1];
    expect(f.props.checked).toBe(false);
    expect(s.props.checked).toBe(true);
  });

  it('calls the onChange prop with the comma-delimited list of checked values when the type is checkbox', function () {
    var onChange = jest.fn();
    var props = Object.assign({}, PROPS_2, { onChange: onChange });
    var group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props));
    group._handleChange({ target: { checked: false } });
    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toBe('');

    props.value = 'eyy';
    group = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControlGroup2.default, props));
    // uncheck it
    group._handleChange({ target: { checked: false, value: 'eyy' } });
    expect(onChange.mock.calls.length).toBe(2);
    expect(onChange.mock.calls[1][0]).toBe('');

    // check something
    group._handleChange({ target: { checked: true, value: 'something' } });
    expect(onChange.mock.calls.length).toBe(3);
    expect(onChange.mock.calls[2][0]).toBe('eyy,something');
  });
});