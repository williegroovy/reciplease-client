/* istanbul ignore next */'use strict'; /* eslint-env jest, jasmine*/
/* eslint-disable max-len */
jest.unmock('../FileUpload');
jest.unmock('../FileInput');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_FileUpload = require('../FileUpload'); /* istanbul ignore next */var _FileUpload2 = _interopRequireDefault(_FileUpload);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var File = jest.fn(function (size, type) /* istanbul ignore next */{return {
    name: 'Test.jpg',
    lastModifiedDate: new Date(),
    isClosed: true,
    size: size || 1024,
    type: typeof type === 'string' ? type : 'image/jpg' };});


describe('FileUpload', function () {
  it('merges className and style', function () {
    var style = { display: 'block' };
    var className = 'test';
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', style: style, className: className, onChange: jest.fn() }));


    var fileUploadNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(fileUpload);
    expect(fileUploadNode.style.display).toBe(style.display);
    expect(fileUploadNode.className).toContain(className);
  });

  it('calls the onChange function still', function () {
    var onChange = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', onChange: onChange }));

    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toEqual(files[0]);
  });

  it('prevents any files with a size greater than the maxSize', function () {
    var onSizeError = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', maxSize: 1024, onSizeError: onSizeError }));

    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onSizeError.mock.calls.length).toBe(0);

    files = [new File(1025)];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onSizeError.mock.calls.length).toBe(1);
    expect(onSizeError.mock.calls[0][0]).toEqual(files);
  });

  it('calls the onError prop with the current file, error, and error event', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      onerror: jest.fn(function (e) /* istanbul ignore next */{return e;}),
      readAsDataURL: jest.fn(function read() {
        this.onerror({ target: { error: new Error('Something went wrong') } });
      }),
      addEventListener: eventListener };


    spyOn(window, 'FileReader').and.returnValue(frMock);

    var onError = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', onError: onError }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onError.mock.calls.length).toBe(1);
    expect(onError.mock.calls[0][0]).toEqual(files[0]);
    expect(onError.mock.calls[0][1]).toEqual(new Error('Something went wrong'));
    expect(onError.mock.calls[0][2]).toBeDefined();
  });

  it('calls the onAbort prop with the current file and the abort event', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      onabort: jest.fn(function (e) /* istanbul ignore next */{return e;}),
      readAsDataURL: jest.fn(function abort() {
        this.onabort({});
      }),
      addEventListener: eventListener };


    spyOn(window, 'FileReader').and.returnValue(frMock);

    var onAbort = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', onAbort: onAbort }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onAbort.mock.calls.length).toBe(1);
    expect(onAbort.mock.calls[0][0]).toEqual(files[0]);
    expect(onAbort.mock.calls[0][1]).toBeDefined();
  });

  it('calls the onLoadStart prop with the current file and the load start event', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      onloadstart: jest.fn(function (e) /* istanbul ignore next */{return e;}),
      readAsDataURL: jest.fn(function loadStart() {
        this.onloadstart({});
      }),
      addEventListener: eventListener };


    spyOn(window, 'FileReader').and.returnValue(frMock);

    var onLoadStart = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', onLoadStart: onLoadStart }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onLoadStart.mock.calls.length).toBe(1);
    expect(onLoadStart.mock.calls[0][0]).toEqual(files[0]);
    expect(onLoadStart.mock.calls[0][1]).toBeDefined();
  });

  it('calls the onLoadEnd prop with the current file and the load end event', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      onloadend: jest.fn(function (e) /* istanbul ignore next */{return e;}),
      readAsDataURL: jest.fn(function loadEnd() {
        this.onloadend({});
      }),
      addEventListener: eventListener };


    spyOn(window, 'FileReader').and.returnValue(frMock);

    var onLoadEnd = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', onLoadEnd: onLoadEnd }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onLoadEnd.mock.calls.length).toBe(1);
    expect(onLoadEnd.mock.calls[0][0]).toEqual(files[0]);
    expect(onLoadEnd.mock.calls[0][1]).toBeDefined();
  });

  it('calls the onLoad function with the file, the load result, and the load event', function () {
    var eventListener = jasmine.createSpy();

    var result = 'data:image/png;base64;hfuasdhfjawf';
    var frMock = {
      onload: jest.fn(function (e) /* istanbul ignore next */{return e;}),
      readAsDataURL: jest.fn(function load() {
        this.onload({ target: { result: result } });
      }),
      addEventListener: eventListener };


    spyOn(window, 'FileReader').and.returnValue(frMock);

    var onLoad = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', onLoad: onLoad }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onLoad.mock.calls.length).toBe(1);
    expect(onLoad.mock.calls[0][0]).toBe(files[0]);
    expect(onLoad.mock.calls[0][1]).toBe(result);
    expect(onLoad.mock.calls[0][2]).toBeDefined();
  });

  it('calls the onProgress function with the file, percentage complete, and the progress event', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      onprogress: jest.fn(function (e) /* istanbul ignore next */{return e;}),
      readAsDataURL: jest.fn(function progress(file) {
        this.onprogress({ lengthComputable: true, loaded: 22, total: file.size });
      }),
      addEventListener: eventListener };


    spyOn(window, 'FileReader').and.returnValue(frMock);

    var onProgress = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', onProgress: onProgress }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(onProgress.mock.calls.length).toBe(1);
    expect(onProgress.mock.calls[0][0]).toBe(files[0]);
    expect(onProgress.mock.calls[0][1]).toBe(22 / files[0].size * 100);
    expect(onProgress.mock.calls[0][2]).toBeDefined();
  });

  it('it matches image, video, and audio to the readAsDataURL FileReader function', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      readAsDataURL: jest.fn(),
      readAsArrayBuffer: jest.fn(),
      readAsText: jest.fn(),
      addEventListener: eventListener };

    spyOn(window, 'FileReader').and.returnValue(frMock);

    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test' }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(1);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(0);
    expect(frMock.readAsText.mock.calls.length).toBe(0);

    files = [new File(1024, 'video/mp4')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(2);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(0);
    expect(frMock.readAsText.mock.calls.length).toBe(0);

    files = [new File(1024, 'audio/mp3')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(3);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(0);
    expect(frMock.readAsText.mock.calls.length).toBe(0);
  });

  it('matches application, model, and multipart to the readAsArrayBuffer FileReader function', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      readAsDataURL: jest.fn(),
      readAsArrayBuffer: jest.fn(),
      readAsText: jest.fn(),
      addEventListener: eventListener };

    spyOn(window, 'FileReader').and.returnValue(frMock);

    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test' }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File(1024, 'application/gzip')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(0);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(1);
    expect(frMock.readAsText.mock.calls.length).toBe(0);

    // no idea what real model would be
    files = [new File(1024, 'model/airoplaine')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(0);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(2);
    expect(frMock.readAsText.mock.calls.length).toBe(0);

    // not sure what real multipart would be.
    files = [new File(1024, 'multipart/form-data')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(0);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(3);
    expect(frMock.readAsText.mock.calls.length).toBe(0);
  });

  it('matches any remaining type to text', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      readAsDataURL: jest.fn(),
      readAsArrayBuffer: jest.fn(),
      readAsText: jest.fn(),
      addEventListener: eventListener };

    spyOn(window, 'FileReader').and.returnValue(frMock);

    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test' }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File(1024, 'text/x-java')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(0);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(0);
    expect(frMock.readAsText.mock.calls.length).toBe(1);

    files = [new File(1024, '')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(frMock.readAsDataURL.mock.calls.length).toBe(0);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(0);
    expect(frMock.readAsText.mock.calls.length).toBe(2);
  });

  it('allows for a custom readAs string', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      readAsDataURL: jest.fn(),
      readAsArrayBuffer: jest.fn(),
      readAsText: jest.fn(),
      addEventListener: eventListener };

    spyOn(window, 'FileReader').and.returnValue(frMock);

    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', readAs: 'DataURL' }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File(2024, 'application/javascript')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(frMock.readAsDataURL.mock.calls.length).toBe(1);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(0);
    expect(frMock.readAsText.mock.calls.length).toBe(0);

    fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', readAs: 'ArrayBuffer' }));
    input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(frMock.readAsDataURL.mock.calls.length).toBe(1);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(1);
    expect(frMock.readAsText.mock.calls.length).toBe(0);

    fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', readAs: 'Text' }));
    input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(frMock.readAsDataURL.mock.calls.length).toBe(1);
    expect(frMock.readAsArrayBuffer.mock.calls.length).toBe(1);
    expect(frMock.readAsText.mock.calls.length).toBe(1);
  });

  it('allows for a custom readAs function that accepts the file type, the file, and the current file reader', function () {
    var eventListener = jasmine.createSpy();

    var frMock = {
      readAsDataURL: jest.fn(),
      readAsArrayBuffer: jest.fn(),
      readAsText: jest.fn(),
      addEventListener: eventListener };

    spyOn(window, 'FileReader').and.returnValue(frMock);

    var readAs = jest.fn();
    var fileUpload = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileUpload2.default, /* istanbul ignore next */{ id: 'test', readAs: readAs }));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileUpload, 'input');
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });
    expect(readAs.mock.calls.length).toBe(1);
    expect(readAs.mock.calls[0][0]).toBe(files[0].type);
    expect(readAs.mock.calls[0][1]).toEqual(files[0]);
    expect(readAs.mock.calls[0][2]).toEqual(frMock);
  });
});