/* istanbul ignore next */'use strict'; /* eslint-env jest*/
/* eslint-disable max-len */
jest.unmock('../TimePeriods'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_TimePeriods = require('../TimePeriods'); /* istanbul ignore next */var _TimePeriods2 = _interopRequireDefault(_TimePeriods);
var /* istanbul ignore next */_PickerControl = require('../PickerControl'); /* istanbul ignore next */var _PickerControl2 = _interopRequireDefault(_PickerControl);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('TimePeriods', function () {
  it('displays a picker control component for AM and PM', function () {
    var setTempTime = jest.fn();
    var periods = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePeriods2.default, /* istanbul ignore next */{ tempTime: new Date(), setTempTime: setTempTime, timePeriod: 'AM' }));


    var controls = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(periods, /* istanbul ignore next */_PickerControl2.default);
    expect(controls.length).toBe(2);
  });

  it('passes the setAM and setPM functions correctly to the time periods', function () {
    var props = { tempTime: new Date(), setTempTime: jest.fn(), timePeriod: 'AM' };
    var periods = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePeriods2.default, props)); /* istanbul ignore next */var _scryRenderedComponen =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(periods, /* istanbul ignore next */_PickerControl2.default),_scryRenderedComponen2 = _slicedToArray(_scryRenderedComponen, 2),am = _scryRenderedComponen2[0],pm = _scryRenderedComponen2[1];

    expect(am.props.onClick).toBe(periods._setAM);
    expect(pm.props.onClick).toBe(periods._setPM);
  });

  it('does not call the setTempTime prop when the AM control is clicked and the current period is AM', function () {
    var props = { tempTime: new Date(), setTempTime: jest.fn(), timePeriod: 'AM' };
    var periods = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePeriods2.default, props));

    periods._setAM();
    expect(props.setTempTime.mock.calls.length).toBe(0);
  });

  it('does not call the setTempTime prop when the PM control is clicked and the current period is PM', function () {
    var props = { tempTime: new Date(), setTempTime: jest.fn(), timePeriod: 'PM' };
    var periods = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePeriods2.default, props));

    periods._setPM();
    expect(props.setTempTime.mock.calls.length).toBe(0);
  });
});