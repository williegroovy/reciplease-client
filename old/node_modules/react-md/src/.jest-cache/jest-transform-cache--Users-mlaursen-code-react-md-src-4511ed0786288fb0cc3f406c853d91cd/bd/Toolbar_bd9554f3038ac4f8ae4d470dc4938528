/* istanbul ignore next */'use strict'; /* eslint-env jest */
/* eslint-disable react/prop-types */
jest.unmock('../Toolbar'); /* istanbul ignore next */var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');






var /* istanbul ignore next */_Toolbar = require('../Toolbar'); /* istanbul ignore next */var _Toolbar2 = _interopRequireDefault(_Toolbar);
var /* istanbul ignore next */_ToolbarTitle = require('../ToolbarTitle'); /* istanbul ignore next */var _ToolbarTitle2 = _interopRequireDefault(_ToolbarTitle);
var /* istanbul ignore next */_Paper = require('../../Papers/Paper'); /* istanbul ignore next */var _Paper2 = _interopRequireDefault(_Paper);
var /* istanbul ignore next */_SelectField = require('../../SelectFields/SelectField'); /* istanbul ignore next */var _SelectField2 = _interopRequireDefault(_SelectField);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

Button = function (_React$PureComponent) {_inherits(Button, _React$PureComponent);function Button() {_classCallCheck(this, Button);return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));}_createClass(Button, [{ key: 'render', value: function render()
    {/* istanbul ignore next */var _props =
      this.props,className = _props.className,props = _objectWithoutProperties(_props, ['className']);
      return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */_extends({ className: /* istanbul ignore next */'woop ' + className }, props)));
    } }]);return Button;}( /* istanbul ignore next */_react2.default.PureComponent);


describe('Toolbar', function () {
  it('renders as a paper component', function () {
    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, /* istanbul ignore next */null));
    var papers = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(toolbar, /* istanbul ignore next */_Paper2.default);
    expect(papers.length).toBe(1);
  });

  it('renders the paper component as a header', function () {
    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, /* istanbul ignore next */null));
    var paper = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(toolbar, /* istanbul ignore next */_Paper2.default);
    expect(paper.props.component).toBe('header');
  });

  it('pases the style and className to the paper component', function () {
    var props = {
      style: { background: 'red' },
      className: 'something' };


    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, props));
    var paper = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(toolbar, /* istanbul ignore next */_Paper2.default);
    expect(paper.props.style).toEqual(props.style);
    expect(paper.props.className).toContain(props.className);
  });

  it('renders a toolbar title component', function () {
    var props = {
      prominentTitle: false,
      title: 'Woop woop' };


    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, props));
    var title = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(toolbar, /* istanbul ignore next */_ToolbarTitle2.default);
    expect(title.props.title).toBe(props.title);
    expect(title.props.prominent).toBe(props.prominentTitle);
    expect(title.props.offset).toBe(props.prominentTitle);
  });

  it('clones the nav prop with some additional className', function () {
    var props = { nav: /* istanbul ignore next */_react2.default.createElement(Button, /* istanbul ignore next */null, /* istanbul ignore next */'menu') };
    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, props));
    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(toolbar, Button);
    expect(button.props.className).toContain('--toolbar');
    expect(button.props.className).toContain('--action-left');
  });

  it('renders the actions in a div', function () {
    var props = { actions: /* istanbul ignore next */_react2.default.createElement(Button, /* istanbul ignore next */null, /* istanbul ignore next */'menu') };
    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, props));
    var actions = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithClass)(toolbar, 'md-toolbar--action-right');
    expect(actions.length).toBe(1);
  });

  it('clones the actions prop with the md-btn--toolbar className if it is a single element', function () {
    var props = { actions: /* istanbul ignore next */_react2.default.createElement(Button, /* istanbul ignore next */null, /* istanbul ignore next */'menu') };
    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, props));
    var button = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(toolbar, Button);
    expect(button.props.className).toContain('md-btn--toolbar');
  });

  it('clones the actions prop with the md-btn--toolbar className to each element in the array', function () {
    var props = {
      actions: [/* istanbul ignore next */_react2.default.createElement(Button, /* istanbul ignore next */{ key: 'menu' }, /* istanbul ignore next */'menu'), /* istanbul ignore next */_react2.default.createElement(Button, /* istanbul ignore next */{ key: 'help' }, /* istanbul ignore next */'help')] };

    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, props));
    var buttons = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(toolbar, Button);
    expect(buttons.length).toBe(2);
    expect(buttons[0].props.className).toContain('md-btn--toolbar');
    expect(buttons[1].props.className).toContain('md-btn--toolbar');
  });

  it('clones the titleMenu prop with some additional props', function () {
    var props = {
      titleMenu: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectField2.default, /* istanbul ignore next */{ id: 'test', className: 'woop' }) };

    var toolbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Toolbar2.default, props));
    var select = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(toolbar, /* istanbul ignore next */_SelectField2.default);
    expect(select.props.className).toContain('woop');
    expect(select.props.position).toBe('tl');
  });
});