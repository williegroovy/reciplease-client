/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../../constants/keyCodes');
jest.unmock('../injectTooltip'); /* istanbul ignore next */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_injectTooltip = require('../injectTooltip'); /* istanbul ignore next */var _injectTooltip2 = _interopRequireDefault(_injectTooltip);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var


Link = function (_React$Component) {_inherits(Link, _React$Component);function Link() {_classCallCheck(this, Link);return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));}_createClass(Link, [{ key: 'render', value: function render()




    {/* istanbul ignore next */var _props =
      this.props,children = _props.children,props = _objectWithoutProperties(_props, ['children']);
      return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', props, children));
    } }]);return Link;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */Link.propTypes = { children: /* istanbul ignore next */_react.PropTypes.node };


var TooltipLink = /* istanbul ignore next */(0, _injectTooltip2.default)(Link);

describe('injectTooltip', function () {
  it('it allows for al the normal event listeners to still work', function () {
    var onMouseUp = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseLeave = jest.fn();
    var onFocus = jest.fn();
    var onBlur = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchMove = jest.fn();
    var onTouchCancel = jest.fn();
    var onTouchEnd = jest.fn();
    var onKeyUp = jest.fn();
    var onKeyDown = jest.fn();

    var tooltipTest = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement(TooltipLink, /* istanbul ignore next */{
        onMouseUp: onMouseUp,
        onMouseDown: onMouseDown,
        onMouseLeave: onMouseLeave,
        onFocus: onFocus,
        onBlur: onBlur,
        onTouchStart: onTouchStart,
        onTouchMove: onTouchMove,
        onTouchCancel: onTouchCancel,
        onTouchEnd: onTouchEnd,
        onKeyUp: onKeyUp,
        onKeyDown: onKeyDown }, /* istanbul ignore next */'Hello!'));





    var testNode = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(tooltipTest, 'a');
    var event = { pageX: 0, pageY: 0 };
    var touchEvent = { changedTouches: [event] };
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(testNode, event);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(testNode, event);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(testNode, event);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.focus(testNode);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.blur(testNode);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(testNode, touchEvent);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchMove(testNode, touchEvent);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(testNode, touchEvent);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(testNode, touchEvent);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(testNode);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(testNode);

    expect(onMouseDown.mock.calls.length).toBe(1);
    expect(onMouseUp.mock.calls.length).toBe(1);
    expect(onMouseLeave.mock.calls.length).toBe(1);
    expect(onFocus.mock.calls.length).toBe(1);
    expect(onBlur.mock.calls.length).toBe(1);
    expect(onTouchStart.mock.calls.length).toBe(1);
    expect(onTouchMove.mock.calls.length).toBe(1);
    expect(onTouchCancel.mock.calls.length).toBe(1);
    expect(onTouchEnd.mock.calls.length).toBe(1);
    expect(onKeyUp.mock.calls.length).toBe(1);
    expect(onKeyDown.mock.calls.length).toBe(1);
  });
});