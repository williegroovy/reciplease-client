/* istanbul ignore next */'use strict'; /* eslint-env jest */
/* eslint-disable max-len */
jest.unmock('../PanelContent'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_PanelContent = require('../PanelContent'); /* istanbul ignore next */var _PanelContent2 = _interopRequireDefault(_PanelContent);
var /* istanbul ignore next */_DialogFooter = require('../../Dialogs/DialogFooter'); /* istanbul ignore next */var _DialogFooter2 = _interopRequireDefault(_DialogFooter);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var PROPS = {
  onSave: jest.fn(),
  onCancel: jest.fn(),
  saveLabel: 'Save',
  cancelLabel: 'Cancel' };


describe('PanelContent', function () {
  it('passes the contentStyle and className to the md-panel-content container and the style to the containing div', function () {
    var props = Object.assign({}, PROPS, {
      style: { display: 'block' },
      contentStyle: { background: 'black' },
      className: 'test' });

    var content = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PanelContent2.default, props));
    var contentNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(content);
    var panelContent = contentNode.querySelector('.md-panel-content');

    expect(contentNode.style.display).toBe(props.style.display);
    expect(contentNode.style.background).not.toBe(props.contentStyle.background);
    expect(contentNode.className).not.toContain(props.className);

    expect(panelContent.style.display).not.toBe(props.style.display);
    expect(panelContent.style.background).toBe(props.contentStyle.background);
    expect(panelContent.className).toContain(props.className);
  });

  it('renders the DialogFooter component', function () {
    var content = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PanelContent2.default, PROPS));
    var controls = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(content, /* istanbul ignore next */_DialogFooter2.default);

    expect(controls.length).toBe(1);
  });

  it('renders the DialogFooter component with the correct props', function () {
    var props = Object.assign({}, PROPS, {
      style: { display: 'block' },
      className: 'test',
      saveType: 'submit',
      cancelType: 'reset',
      savePrimary: false,
      saveSecondary: true,
      cancelPrimary: false,
      cancelSecondary: false });


    var content = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_PanelContent2.default, props));
    var controls = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(content, /* istanbul ignore next */_DialogFooter2.default); /* istanbul ignore next */var
    actions = controls.props.actions;
    expect(actions.length).toBe(2); /* istanbul ignore next */var _actions = _slicedToArray(
    actions, 2),cancel = _actions[0],save = _actions[1];

    expect(cancel.type).toBe(props.cancelType);
    expect(cancel.label).toBe(props.cancelLabel);
    expect(cancel.onClick).toBe(props.onCancel);
    expect(cancel.primary).toBe(props.cancelPrimary);
    expect(cancel.secondary).toBe(props.cancelSecondary);

    expect(save.type).toBe(props.saveType);
    expect(save.label).toBe(props.saveLabel);
    expect(save.onClick).toBe(props.onSave);
    expect(save.primary).toBe(props.savePrimary);
    expect(save.secondary).toBe(props.saveSecondary);
  });
});