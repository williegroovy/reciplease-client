/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../Message');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');

var /* istanbul ignore next */_Message = require('../Message'); /* istanbul ignore next */var _Message2 = _interopRequireDefault(_Message);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Message', function () {
  it('renders null if there are no children', function () {
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Message2.default, /* istanbul ignore next */null));
    var messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode).toBe(null);

    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Message2.default, /* istanbul ignore next */null, /* istanbul ignore next */'woop'));
    messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode).not.toBe(null);
  });

  it('sets the aria-hidden prop based on the active prop', function () {
    var props = { active: false, children: 'woop' };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Message2.default, props));
    var messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode.getAttribute('aria-hidden')).toBe('true');

    props.active = true;
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Message2.default, props));
    messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode.getAttribute('aria-hidden')).toBe('false');
  });

  it('adds the --active state when active and the --inactive state when not active', function () {
    var props = { active: false, children: 'woop' };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Message2.default, props));
    var messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode.className).not.toContain('md-text-field-message--active');
    expect(messageNode.className).toContain('md-text-field-message--inactive');

    props.active = true;
    message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Message2.default, props));
    messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);
    expect(messageNode.className).toContain('md-text-field-message--active');
    expect(messageNode.className).not.toContain('md-text-field-message--inactive');
  });

  it('adds an optional className', function () {
    var props = { className: 'woop', children: 'woop' };
    var message = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Message2.default, props));
    var messageNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(message);

    expect(messageNode.className).toContain(props.className);
  });
});