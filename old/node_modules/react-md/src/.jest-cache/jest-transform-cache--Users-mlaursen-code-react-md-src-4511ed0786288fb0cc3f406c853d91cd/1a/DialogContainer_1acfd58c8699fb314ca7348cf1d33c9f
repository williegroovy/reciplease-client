/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../DialogContainer');
jest.unmock('../Dialog');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsCssTransitionGroup = require('react-addons-css-transition-group'); /* istanbul ignore next */var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');






var /* istanbul ignore next */_DialogContainer = require('../DialogContainer'); /* istanbul ignore next */var _DialogContainer2 = _interopRequireDefault(_DialogContainer);
var /* istanbul ignore next */_Dialog = require('../Dialog'); /* istanbul ignore next */var _Dialog2 = _interopRequireDefault(_Dialog);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var PROPS = { id: 'test', visible: true, onHide: jest.fn() };

describe('DialogContainer', function () {
  it('merges className and style', function () {
    var props = Object.assign({}, PROPS, {
      style: { background: 'black' },
      className: 'test' });


    var dialogContainer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    var css = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(dialogContainer, /* istanbul ignore next */_reactAddonsCssTransitionGroup2.default);
    expect(css.props.style).toEqual(props.style);
    expect(css.props.className).toContain(props.className);
  });

  it('creates two timeouts when the _mountDialog function is called and the full page prop is false', function () {
    var props = Object.assign({}, PROPS, { visible: false });
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    expect(container.state.dialogVisible).toBe(false);
    expect(container.state.overlay).toBe(false);
    expect(container.state.active).toBe(false);

    container._mountDialog(props);
    jest.runOnlyPendingTimers();
    expect(container.state.dialogVisible).toBe(true);
    expect(container.state.overlay).toBe(true);
    expect(container.state.active).toBe(false);

    jest.runOnlyPendingTimers();
    expect(container.state.dialogVisible).toBe(true);
    expect(container.state.overlay).toBe(true);
    expect(container.state.active).toBe(true);
  });

  it('creates a single timeout when the _muntDialog function is called and the full page prop is true', function () {
    var props = Object.assign({}, PROPS, { visible: false, fullPage: true });
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    expect(container.state.dialogVisible).toBe(false);
    expect(container.state.overlay).toBe(false);
    expect(container.state.active).toBe(false);

    container._mountDialog(props);
    jest.runOnlyPendingTimers();
    expect(container.state.dialogVisible).toBe(true);
    expect(container.state.overlay).toBe(false);
    expect(container.state.active).toBe(false);

    jest.runOnlyPendingTimers();
    expect(container.state.dialogVisible).toBe(true);
    expect(container.state.overlay).toBe(false);
    expect(container.state.active).toBe(false);
  });


  it('renders a Dialog when the visible prop is true', function () {
    var props = Object.assign({}, PROPS, { visible: false });
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    var dialogs = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(container, /* istanbul ignore next */_Dialog2.default);

    expect(dialogs.length).toBe(0);

    props.visible = true;
    container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    jest.runAllTimers();
    dialogs = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(container, /* istanbul ignore next */_Dialog2.default);
    expect(dialogs.length).toBe(1);
  });

  it('calls the onHide prop when the container is clicked', function () {
    var props = Object.assign({}, PROPS, { onHide: jest.fn() });
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)( /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(container, /* istanbul ignore next */_reactAddonsCssTransitionGroup2.default));

    expect(props.onHide.mock.calls.length).toBe(0);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(node);
    expect(props.onHide.mock.calls.length).toBe(1);
  });

  it('does not call the onHide prop when the container is clicked and the modal prop is true', function () {
    var props = Object.assign({}, PROPS, { onHide: jest.fn(), modal: true, visible: true });
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)( /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(container, /* istanbul ignore next */_reactAddonsCssTransitionGroup2.default));

    expect(props.onHide.mock.calls.length).toBe(0);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(node);
    expect(props.onHide.mock.calls.length).toBe(0);
  });

  it('passes the styles and classNames correctly to the Dialog component', function () {
    var props = Object.assign({}, PROPS, {
      visible: true,
      style: { background: 'orange' },
      className: 'woop-woop',
      dialogStyle: { background: 'red' },
      dialogClassName: 'that-the-sound',
      contentStyle: { background: 'blue' },
      contentClassName: 'of-the-police' });


    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, props));
    jest.runAllTimers();
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(container, /* istanbul ignore next */_Dialog2.default);

    expect(dialog.props.style).toEqual(props.dialogStyle);
    expect(dialog.props.className).toContain(props.dialogClassName);
    expect(dialog.props.contentStyle).toEqual(props.contentStyle);
    expect(dialog.props.contentClassName).toBe(props.contentClassName);
  });

  it('should inherit the dialog\'s renderNode context', function () {
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DialogContainer2.default, PROPS)));
    var container = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(dialog, /* istanbul ignore next */_DialogContainer2.default);
    expect(container.context.renderNode).toBe(dialog.getChildContext().renderNode);
  });
});