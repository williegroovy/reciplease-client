/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../TimePickerHeader'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_TimePickerHeader = require('../TimePickerHeader'); /* istanbul ignore next */var _TimePickerHeader2 = _interopRequireDefault(_TimePickerHeader);
var /* istanbul ignore next */_PickerControl = require('../PickerControl'); /* istanbul ignore next */var _PickerControl2 = _interopRequireDefault(_PickerControl);
var /* istanbul ignore next */_TimePeriods = require('../TimePeriods'); /* istanbul ignore next */var _TimePeriods2 = _interopRequireDefault(_TimePeriods);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('TimePickerHeader', function () {
  it('renders a picker control for the hour and the minutes', function () {
    var props = {
      tempTime: new Date(2016, 3, 5, 5, 15),
      timeMode: 'hour',
      setTimeMode: jest.fn(),
      setTempTime: jest.fn(),
      hours: '5',
      minutes: ':15',
      timePeriod: 'AM' };

    var header = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerHeader2.default, props));
    var controls = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(header, /* istanbul ignore next */_PickerControl2.default);

    expect(controls.length).toBe(2);
  });

  it('renders the TimePeriods component if there is a time period', function () {
    var props = {
      tempTime: new Date(2016, 3, 5, 5, 15),
      timeMode: 'hour',
      setTimeMode: jest.fn(),
      setTempTime: jest.fn(),
      hours: '5',
      minutes: ':15',
      timePeriod: 'AM' };


    var header = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerHeader2.default, props));
    var periods = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(header, /* istanbul ignore next */_TimePeriods2.default);

    expect(periods.length).toBe(1); /* istanbul ignore next */var _periods =
    periods,_periods2 = _slicedToArray(_periods, 1),period = _periods2[0];
    expect(period.props.tempTime).toEqual(props.tempTime);
    expect(period.props.setTempTime).toBe(props.setTempTime);
    expect(period.props.timePeriod).toBe(props.timePeriod);

    delete props.timePeriod;
    header = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TimePickerHeader2.default, props));
    periods = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(header, /* istanbul ignore next */_TimePeriods2.default);

    expect(periods.length).toBe(0);
  });
});