/* istanbul ignore next */'use strict'; /* eslint-env jest */
/* eslint-disable react/prop-types */
jest.unmock('../ToolbarTitle'); /* istanbul ignore next */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');

var /* istanbul ignore next */_ToolbarTitle = require('../ToolbarTitle'); /* istanbul ignore next */var _ToolbarTitle2 = _interopRequireDefault(_ToolbarTitle);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

describe('ToolbarTitle', function () {
  it('merges className and style', function () {
    var props = {
      style: { background: 'black' },
      className: 'test',
      title: 'woop' };


    var toolbarTitle = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ToolbarTitle2.default, props));

    var toolbarTitleNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(toolbarTitle);
    expect(toolbarTitleNode.style.background).toBe(props.style.background);
    expect(toolbarTitleNode.className).toContain(props.className);
  });

  it('clones the className if the title is a valid element itself', function () {/* istanbul ignore next */var
    Test = function (_React$Component) {_inherits(Test, _React$Component);function Test() {_classCallCheck(this, Test);return _possibleConstructorReturn(this, (Test.__proto__ || Object.getPrototypeOf(Test)).apply(this, arguments));}_createClass(Test, [{ key: 'render', value: function render()
        {
          return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: /* istanbul ignore next */'test-thing ' + this.props.className }, /* istanbul ignore next */'Woooo'));
        } }]);return Test;}( /* istanbul ignore next */_react2.default.Component);


    var props = {
      className: 'something',
      priminent: true,
      offset: true,
      title: /* istanbul ignore next */_react2.default.createElement(Test, /* istanbul ignore next */{ className: 'another-test' }) };


    var title = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ToolbarTitle2.default, props));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(title);
    expect(node.className).toContain(props.className);
    expect(node.className).toContain('another-test');
    expect(node.className).toContain('test-thing');
  });
});