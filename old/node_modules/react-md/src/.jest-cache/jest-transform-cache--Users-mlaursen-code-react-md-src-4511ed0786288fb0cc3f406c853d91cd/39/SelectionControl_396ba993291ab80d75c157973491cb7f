/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../SelectionControl');
jest.unmock('../../utils/StringUtils/capitalizeFirst'); // required to test FontIcon generation

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');







var /* istanbul ignore next */_SelectionControl = require('../SelectionControl'); /* istanbul ignore next */var _SelectionControl2 = _interopRequireDefault(_SelectionControl);
var /* istanbul ignore next */_SwitchTrack = require('../SwitchTrack'); /* istanbul ignore next */var _SwitchTrack2 = _interopRequireDefault(_SwitchTrack);
var /* istanbul ignore next */_AccessibleFakeInkedButton = require('../../Helpers/AccessibleFakeInkedButton'); /* istanbul ignore next */var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var PROPS = { label: 'Label', id: 'woop', name: 'test', type: 'checkbox' };

describe('SelectionControl', function () {
  it('merges className and style', function () {
    var props = Object.assign({}, PROPS, {
      style: { background: 'black' },
      className: 'test' });


    var selectionControl = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));

    var selectionControlNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(selectionControl);
    expect(selectionControlNode.style.background).toBe(props.style.background);
    expect(selectionControlNode.className).toContain(props.className);
  });

  it('renders a label with the label prop', function () {
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, PROPS));
    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'label');

    expect(label.innerHTML).toBe(PROPS.label);
    expect(label.getAttribute('for')).toBe(PROPS.id);
  });

  it('adds the stateful class names to the label', function () {
    var props = Object.assign({}, PROPS);
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'label').className;

    expect(className).toContain('md-selection-control-label');
    expect(className).toContain('md-text');
    expect(className).not.toContain('md-text--disabled');
    expect(className).toContain('md-pointer--hover');

    props.disabled = true;
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'label').className;

    expect(className).toContain('md-selection-control-label');
    expect(className).not.toContain('md-text ');
    expect(className).toContain('md-text--disabled');
    expect(className).not.toContain('md-pointer--hover');
  });

  it('renders an input tag with the correct props', function () {
    var props = Object.assign({}, PROPS, { value: 'HELLO' });
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'input');

    expect(input.id).toBe(props.id);
    expect(input.type).toBe(props.type);
    expect(input.name).toBe(props.name);
    expect(input.checked).toBe(false);
    expect(input.className).toBe('md-selection-control-input');
    expect(input.getAttribute('aria-hidden')).toBe('true');
    expect(input.value).toBe(props.value);
  });

  it('renders the input tag with a type of checkbox when the selection control type is switch', function () {
    var props = Object.assign({}, PROPS, { type: 'switch' });
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'input');

    expect(input.type).toBe('checkbox');
  });

  it('renders the label after the input by default', function () {
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, PROPS));
    var childNodes = Array.prototype.slice.call( /* istanbul ignore next */(0, _reactDom.findDOMNode)(control).childNodes);
    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'label');
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'input');

    expect(childNodes.indexOf(label)).not.toBeLessThan(childNodes.indexOf(input));
  });

  it('renders the label before the input if the labelBefore prop is true', function () {
    var props = Object.assign({}, PROPS, { labelBefore: true });
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var childNodes = Array.prototype.slice.call( /* istanbul ignore next */(0, _reactDom.findDOMNode)(control).childNodes);
    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'label');
    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(control, 'input');

    expect(childNodes.indexOf(label)).toBeLessThan(childNodes.indexOf(input));
  });

  it('renders an AccessibleFakeInkedButton when the type is radio or checkbox', function () {
    var props = Object.assign({}, PROPS);
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var btns = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btns.length).toBe(1);

    props.type = 'radio';
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btns = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btns.length).toBe(1);

    props.type = 'switch';
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btns = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btns.length).toBe(0);
  });

  it('renders a SwitchTrack when the type is switch only', function () {
    var props = Object.assign({}, PROPS);
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var tracks = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(control, /* istanbul ignore next */_SwitchTrack2.default);
    expect(tracks.length).toBe(0);

    props.type = 'radio';
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    tracks = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(control, /* istanbul ignore next */_SwitchTrack2.default);
    expect(tracks.length).toBe(0);

    props.type = 'switch';
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    tracks = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(control, /* istanbul ignore next */_SwitchTrack2.default);
    expect(tracks.length).toBe(1);
  });

  it('passes mouse and touch events to the container', function () {
    var onMouseOver = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onClick = jest.fn();
    var onDoubleClick = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchMove = jest.fn();
    var onTouchCancel = jest.fn();
    var onTouchEnd = jest.fn();
    var onFocus = jest.fn();
    var onBlur = jest.fn();

    var props = Object.assign({}, PROPS, {
      onMouseOver: onMouseOver,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onClick: onClick,
      onDoubleClick: onDoubleClick,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchMove: onTouchMove,
      onTouchCancel: onTouchCancel,
      onTouchEnd: onTouchEnd,
      onFocus: onFocus,
      onBlur: onBlur });


    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(control);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(node);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(node);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(node);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(node);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.doubleClick(node);
    expect(onDoubleClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(node);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(node);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchMove(node);
    expect(onTouchMove).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(node);
    expect(onTouchCancel).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(node);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.focus(node);
    expect(onFocus).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.blur(node);
    expect(onBlur).not.toBeCalled();
  });

  it('passes focus events to the AccessibleFakeInkedButton for checkboxes and radios', function () {
    var props = Object.assign({}, PROPS, { onFocus: jest.fn(), onBlur: jest.fn() });
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.onFocus).toBe(props.onFocus);
    expect(btn.props.onBlur).toBe(props.onBlur);
  });

  it('passes focus events to the SwitchTrack for switches', function () {
    var props = Object.assign({}, PROPS, { type: 'switch', onFocus: jest.fn(), onBlur: jest.fn() });
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var track = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_SwitchTrack2.default);
    expect(track.props.onFocus).toBe(props.onFocus);
    expect(track.props.onBlur).toBe(props.onBlur);
  });

  it('renders the AccessibleFakeInkedButton with the role and aria-checked accessibility props correctly', function () {
    var props = Object.assign({}, PROPS, { checked: true });
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.role).toBe('checkbox');
    expect(btn.props['aria-checked']).toBe(true);

    props.type = 'radio';
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.role).toBe('radio');
    expect(btn.props['aria-checked']).toBe(true);

    props.checked = false;
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.role).toBe('radio');
    expect(btn.props['aria-checked']).toBe(false);
  });

  it('renders the AccessibleFakeInkedButton with the correct stateful class names', function () {
    var props = Object.assign({}, PROPS);
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);

    expect(btn.props.className).toContain('md-btn');
    expect(btn.props.className).toContain('md-btn--icon');
    expect(btn.props.className).not.toContain('md-text--disabled');
    expect(btn.props.className).not.toContain('md-text--theme-secondary ');
    expect(btn.props.className).toContain('md-text--secondary');

    props.checked = true;
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);

    expect(btn.props.className).toContain('md-btn');
    expect(btn.props.className).toContain('md-btn--icon');
    expect(btn.props.className).not.toContain('md-text--disabled');
    expect(btn.props.className).toContain('md-text--theme-secondary');
    expect(btn.props.className).not.toContain('md-text--secondary');

    props.disabled = true;
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);

    expect(btn.props.className).toContain('md-btn');
    expect(btn.props.className).toContain('md-btn--icon');
    expect(btn.props.className).toContain('md-text--disabled');
    expect(btn.props.className).not.toContain('md-text--theme-secondary');
    expect(btn.props.className).not.toContain('md-text--secondary');
  });

  it('renders the correct checkbox FontIcon for the AccessibleFakeInkedButton children', function () {
    var props = Object.assign({}, PROPS, {
      checked: false,
      checkedCheckboxIconChildren: 'wat',
      checkedCheckboxIconClassName: 'my-fake-font-lib',
      uncheckedCheckboxIconChildren: 'something',
      uncheckedCheckboxIconClassName: 'my-other-fake-font-lib' });


    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    var iconProps = btn.props.children.props;
    expect(iconProps.children).toBe(props.uncheckedCheckboxIconChildren);
    expect(iconProps.iconClassName).toBe(props.uncheckedCheckboxIconClassName);

    props.checked = true;
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    iconProps = btn.props.children.props;
    expect(iconProps.children).toBe(props.checkedCheckboxIconChildren);
    expect(iconProps.iconClassName).toBe(props.checkedCheckboxIconClassName);
  });

  it('renders the correct radio FontIcon for the AccessibleFakeInkedButton children', function () {
    var props = Object.assign({}, PROPS, {
      checked: false,
      type: 'radio',
      checkedRadioIconChildren: 'wat',
      checkedRadioIconClassName: 'my-fake-font-lib',
      uncheckedRadioIconChildren: 'something',
      uncheckedRadioIconClassName: 'my-other-fake-font-lib' });


    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    var iconProps = btn.props.children.props;
    expect(iconProps.children).toBe(props.uncheckedRadioIconChildren);
    expect(iconProps.iconClassName).toBe(props.uncheckedRadioIconClassName);

    props.checked = true;
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(control, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    iconProps = btn.props.children.props;
    expect(iconProps.children).toBe(props.checkedRadioIconChildren);
    expect(iconProps.iconClassName).toBe(props.checkedRadioIconClassName);
  });

  it('calls the onChange prop with the next checked state for checkboxes and switches', function () {
    var props = Object.assign({}, PROPS, { onChange: jest.fn(), value: 'value', checked: false });
    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));

    var changeEvent = { target: { value: props.value, checked: props.checked } };
    control._handleChange(changeEvent);
    expect(props.onChange).toBeCalled();

    expect(props.onChange.mock.calls[0][0]).toBe(!props.checked);
    expect(props.onChange.mock.calls[0][1]).toEqual(changeEvent);

    props.type = 'switch';
    control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));
    control._handleChange(changeEvent);

    expect(props.onChange.mock.calls[1][0]).toBe(!props.checked);
    expect(props.onChange.mock.calls[1][1]).toEqual(changeEvent);
  });

  it('calls the onChange prop with the radio\'s value', function () {
    var props = Object.assign({}, PROPS, {
      onChange: jest.fn(),
      value: 'value',
      checked: false,
      type: 'radio' });

    var control = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectionControl2.default, props));

    var changeEvent = { target: { value: props.value, checked: props.checked } };
    control._handleChange(changeEvent);
    expect(props.onChange).toBeCalled();

    expect(props.onChange.mock.calls[0][0]).toBe(props.value);
    expect(props.onChange.mock.calls[0][1]).toEqual(changeEvent);
  });
});