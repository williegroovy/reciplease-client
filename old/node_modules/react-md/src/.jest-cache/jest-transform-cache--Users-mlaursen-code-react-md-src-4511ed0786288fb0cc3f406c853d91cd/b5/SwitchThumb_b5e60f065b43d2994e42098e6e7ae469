/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../SwitchThumb');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_SwitchThumb = require('../SwitchThumb'); /* istanbul ignore next */var _SwitchThumb2 = _interopRequireDefault(_SwitchThumb);
var /* istanbul ignore next */_AccessibleFakeInkedButton = require('../../Helpers/AccessibleFakeInkedButton'); /* istanbul ignore next */var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var noop = function noop() {};
describe('SwitchThumb', function () {
  it('renders an AccessibleFakeInkedButton', function () {
    var thumb = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SwitchThumb2.default, /* istanbul ignore next */{ onClick: noop }));
    var btns = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(thumb, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btns.length).toBe(1);
  });

  it('renders an AccessibleFakeInkedButton with the correct classNames', function () {
    var props = { disabled: false, checked: false, onClick: noop };
    var thumb = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SwitchThumb2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(thumb, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.className).toContain('md-switch-thumb');
    expect(btn.props.className).not.toContain('--disabled');
    expect(btn.props.className).not.toContain('--on');
    expect(btn.props.className).toContain('--off');

    props.disabled = true;
    thumb = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SwitchThumb2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(thumb, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.className).toContain('md-switch-thumb');
    expect(btn.props.className).toContain('--disabled');
    expect(btn.props.className).not.toContain('--on');
    expect(btn.props.className).toContain('--off');

    props.checked = true;
    thumb = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SwitchThumb2.default, props));
    btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(thumb, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.className).toContain('md-switch-thumb');
    expect(btn.props.className).toContain('--disabled');
    expect(btn.props.className).toContain('--on');
    expect(btn.props.className).not.toContain('--off');
  });
});