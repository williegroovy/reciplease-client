/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../FloatingLabel');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');

var /* istanbul ignore next */_FloatingLabel = require('../FloatingLabel'); /* istanbul ignore next */var _FloatingLabel2 = _interopRequireDefault(_FloatingLabel);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('FloatingLabel', function () {
  it('returns null if there is no label', function () {
    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, /* istanbul ignore next */{ htmlFor: 'test' }));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);
    expect(labelNode).toBe(null);

    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, /* istanbul ignore next */{ label: 'Test', htmlFor: 'test' }));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);
    expect(labelNode).not.toBe(null);
  });

  it('merges styles and classnames', function () {
    var props = {
      htmlFor: 'test',
      label: 'Test',
      style: { display: 'block' },
      className: 'test-label' };


    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);
    expect(labelNode.style.display).toEqual(props.style.display);
    expect(labelNode.className).toContain(props.className);
  });

  it('adds the active state only when active and there is no error', function () {
    var props = {
      htmlFor: 'test',
      label: 'Test',
      active: true,
      error: false };


    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--active');

    props.error = true;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).not.toContain('md-floating-label--active');
  });

  it('adds the error state only when there is an error and not disabled', function () {
    var props = {
      htmlFor: 'test',
      label: 'Test',
      error: false };


    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).not.toContain('md-floating-label--error');

    props.error = true;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--error');

    props.disabled = true;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).not.toContain('md-floating-label--error');
  });

  it('adds the inactive state when the label is not floating and there is no custom size', function () {
    var props = {
      htmlFor: 'test',
      label: 'Test',
      floating: true };


    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).not.toContain('md-floating-label--inactive');

    props.customSize = 'title';
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);
    expect(labelNode.className).not.toContain('md-floating-label--inactive');

    props.floating = false;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--inactive');

    props.customSize = null;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--inactive');
  });

  it('adds the floating state when the floating prop is true', function () {
    var props = {
      htmlFor: 'test',
      label: 'Test',
      floating: false };


    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).not.toContain('md-floating-label--floating');

    props.floating = true;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--floating');
  });

  it('adds the icon-offset state when the iconOffset prop is true', function () {
    var props = {
      htmlFor: 'test',
      label: 'Test',
      iconOffset: false };


    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).not.toContain('md-floating-label--icon-offset');

    props.iconOffset = true;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--icon-offset');
  });

  it('addes a custom size state only when the custom size prop is true and it is not floating', function () {
    var props = {
      htmlFor: 'test',
      label: 'Test',
      floating: false,
      customSize: null };


    var label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    var labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).not.toContain('md-floating-label--title');
    expect(labelNode.className).not.toContain('md-floating-label--inactive-title');

    props.customSize = 'title';
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--title');
    expect(labelNode.className).toContain('md-floating-label--inactive-title');

    props.floating = true;
    label = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FloatingLabel2.default, props));
    labelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(label);

    expect(labelNode.className).toContain('md-floating-label--title');
    expect(labelNode.className).not.toContain('md-floating-label--inactive-title');
  });
});