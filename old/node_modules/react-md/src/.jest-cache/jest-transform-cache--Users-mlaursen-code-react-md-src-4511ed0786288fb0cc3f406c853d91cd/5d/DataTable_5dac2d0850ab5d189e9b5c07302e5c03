/* istanbul ignore next */'use strict'; /* eslint-env jest*/
/* eslint-disable react/no-multi-comp */
jest.unmock('../DataTable');
jest.unmock('../TableHeader');
jest.unmock('../TableBody');
jest.unmock('../TableRow');
jest.unmock('../TableColumn');
jest.unmock('../TableCheckbox');
jest.unmock('../findTable'); /* istanbul ignore next */var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_DataTable = require('../DataTable'); /* istanbul ignore next */var _DataTable2 = _interopRequireDefault(_DataTable);
var /* istanbul ignore next */_TableHeader = require('../TableHeader'); /* istanbul ignore next */var _TableHeader2 = _interopRequireDefault(_TableHeader);
var /* istanbul ignore next */_TableBody = require('../TableBody'); /* istanbul ignore next */var _TableBody2 = _interopRequireDefault(_TableBody);
var /* istanbul ignore next */_TableRow = require('../TableRow'); /* istanbul ignore next */var _TableRow2 = _interopRequireDefault(_TableRow);
var /* istanbul ignore next */_TableColumn = require('../TableColumn'); /* istanbul ignore next */var _TableColumn2 = _interopRequireDefault(_TableColumn);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

describe('DataTable', function () {
  it('merges className and style', function () {
    var style = { display: 'block' };
    var className = 'test';
    var table = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DataTable2.default, /* istanbul ignore next */{ style: style, className: className, baseId: 'woop' }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tbody', /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tr', /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'td', /* istanbul ignore next */null, /* istanbul ignore next */'c')))));


    var tableNode = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(table, 'table');
    expect(tableNode.style.display).toBe(style.display);
    expect(tableNode.className).toContain(className);
  });

  it('adds any event listeners', function () {
    var onClick = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();

    var table = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DataTable2.default, /* istanbul ignore next */{
        baseId: 'woop',
        onClick: onClick,
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp,
        onMouseOver: onMouseOver,
        onMouseLeave: onMouseLeave,
        onTouchStart: onTouchStart,
        onTouchEnd: onTouchEnd,
        onTouchCancel: onTouchCancel },

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tbody', /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tr', /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'td', /* istanbul ignore next */null, /* istanbul ignore next */'c')))));



    var tableNode = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(table, 'table');
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(tableNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(tableNode);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(tableNode);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(tableNode);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(tableNode);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(tableNode);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(tableNode);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(tableNode);
    expect(onTouchCancel).toBeCalled();
  });

  it('wraps the table in a responsive container when the responsive prop is true', function () {
    var props = {
      baseId: 'woop',
      responsive: true,
      children: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tbody', /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'tr', /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'td', /* istanbul ignore next */null, /* istanbul ignore next */'C'))) };

    var table = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DataTable2.default, props));
    var tableNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(table);
    expect(tableNode.className).toBe('md-data-table--responsive');
    expect(tableNode.nodeName).toBe('DIV');

    props.responsive = false;
    table = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DataTable2.default, props));
    tableNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(table);
    expect(tableNode.className).toBe('md-data-table');
    expect(tableNode.nodeName).toBe('TABLE');
  });

  it('should correctly initialize the checkbox state', function () {
    var table = /* istanbul ignore next */(0, _enzyme.mount)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DataTable2.default, /* istanbul ignore next */{ baseId: 'test' },
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableHeader2.default, /* istanbul ignore next */null,
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableRow2.default, /* istanbul ignore next */null,
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null))),


      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableBody2.default, /* istanbul ignore next */null,
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableRow2.default, /* istanbul ignore next */null,
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null)),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableRow2.default, /* istanbul ignore next */null,
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null)))));





    expect(table.state('selectedRows')).toEqual([false, false]);
  });

  it('should correctly update the checkbox state when new rows are added', function () {/* istanbul ignore next */var
    Test = function (_React$Component) {_inherits(Test, _React$Component);function Test() {var _ref;var _temp, _this, _ret;_classCallCheck(this, Test);for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Test.__proto__ || Object.getPrototypeOf(Test)).call.apply(_ref, [this].concat(args))), _this), _this.
        state = { rowCount: 2 }, _temp), _possibleConstructorReturn(_this, _ret);}_createClass(Test, [{ key: 'render', value: function render()
        {
          var rows = /* istanbul ignore next */[].concat(_toConsumableArray(new Array(this.state.rowCount))).map(function (_, i) /* istanbul ignore next */{return (
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableRow2.default, /* istanbul ignore next */{ key: i },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null)));});



          return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DataTable2.default, /* istanbul ignore next */{ baseId: 'test' },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableHeader2.default, /* istanbul ignore next */null,
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableRow2.default, /* istanbul ignore next */null,
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null),
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null))),


              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableBody2.default, /* istanbul ignore next */null, rows)));


        } }]);return Test;}( /* istanbul ignore next */_react2.default.Component);


    var findTableState = function findTableState(table) /* istanbul ignore next */{return table.find( /* istanbul ignore next */_DataTable2.default).get(0).state;};
    var table = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement(Test, /* istanbul ignore next */null));
    var state = findTableState(table);
    var expected = [false, false];
    expect(state.selectedRows).toEqual(expected);

    table.find( /* istanbul ignore next */_DataTable2.default).get(0).setState({ selectedRows: [false, true] });
    expected = [false, true];
    state = findTableState(table);
    expect(state.selectedRows).toEqual(expected);

    table.setState({ rowCount: 8 });
    state = findTableState(table);
    expected = [false, true, false, false, false, false, false, false];
    expect(state.selectedRows).toEqual(expected);
  });

  it('should correctly update the checkbox state when rows are removed', function () {/* istanbul ignore next */var
    Test = function (_React$Component2) {_inherits(Test, _React$Component2);function Test() {var _ref2;var _temp2, _this2, _ret2;_classCallCheck(this, Test);for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = Test.__proto__ || Object.getPrototypeOf(Test)).call.apply(_ref2, [this].concat(args))), _this2), _this2.
        state = { rows: ['row-1', 'row-2', 'row-3', 'row-4', 'row-5', 'row-6'] }, _temp2), _possibleConstructorReturn(_this2, _ret2);}_createClass(Test, [{ key: 'render', value: function render()
        {
          var rows = this.state.rows.map(function (key) /* istanbul ignore next */{return (
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableRow2.default, /* istanbul ignore next */{ key: key },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null),
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null)));});



          return (
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DataTable2.default, /* istanbul ignore next */{ baseId: 'test' },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableHeader2.default, /* istanbul ignore next */null,
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableRow2.default, /* istanbul ignore next */null,
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null),
                  /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableColumn2.default, /* istanbul ignore next */null))),


              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TableBody2.default, /* istanbul ignore next */null, rows)));


        } }]);return Test;}( /* istanbul ignore next */_react2.default.Component);

    var findTableState = function findTableState(table) /* istanbul ignore next */{return table.find( /* istanbul ignore next */_DataTable2.default).get(0).state;};
    var table = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement(Test, /* istanbul ignore next */null));
    var state = findTableState(table);
    var expected = [false, false, false, false, false, false];
    expect(state.selectedRows).toEqual(expected);

    // Check row 3, 5, and 6
    expected = [false, false, true, false, true, true];
    table.find( /* istanbul ignore next */_DataTable2.default).get(0).setState({ selectedRows: expected });
    state = findTableState(table);
    expect(state.selectedRows).toEqual(expected);


    // Remove the "checked" rows
    table.setState({ rows: ['row-1', 'row-2', 'row-4'] });
    state = findTableState(table);
    expected = [false, false, false];
    expect(state.selectedRows).toEqual(expected);
  });
});