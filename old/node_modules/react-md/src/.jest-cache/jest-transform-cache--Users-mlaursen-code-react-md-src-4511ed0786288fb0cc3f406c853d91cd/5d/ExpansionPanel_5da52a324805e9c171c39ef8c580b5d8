/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../ExpansionPanel');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');






var /* istanbul ignore next */_ExpansionPanel = require('../ExpansionPanel'); /* istanbul ignore next */var _ExpansionPanel2 = _interopRequireDefault(_ExpansionPanel);
var /* istanbul ignore next */_AccessibleFakeButton = require('../../Helpers/AccessibleFakeButton'); /* istanbul ignore next */var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);
var /* istanbul ignore next */_Collapse = require('../../Helpers/Collapse'); /* istanbul ignore next */var _Collapse2 = _interopRequireDefault(_Collapse);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('ExpansionPanel', function () {
  it('merges className and style', function () {
    var style = { display: 'block' };
    var className = 'test';
    var expansionPanel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, /* istanbul ignore next */{ style: style, className: className, label: 'Test' }));


    var expansionPanelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(expansionPanel);
    expect(expansionPanelNode.style.display).toEqual(style.display);
    expect(expansionPanelNode.className).toContain(className);
  });

  it('adds any event listeners', function () {
    var onBlur = jest.fn();
    var onFocus = jest.fn();
    var onClick = jest.fn();
    var onKeyUp = jest.fn();
    var onKeyDown = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var props = {
      onBlur: onBlur,
      onFocus: onFocus,
      onClick: onClick,
      onKeyUp: onKeyUp,
      onKeyDown: onKeyDown,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      label: 'Test' };


    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    var panelNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(panel);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.focus(panelNode);
    expect(onFocus.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.blur(panelNode);
    expect(onBlur.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(panelNode);
    expect(onClick.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(panelNode);
    expect(onKeyUp.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(panelNode);
    expect(onKeyDown.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(panelNode);
    expect(onMouseDown.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(panelNode);
    expect(onMouseUp.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(panelNode);
    expect(onMouseOver.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(panelNode);
    expect(onMouseLeave.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(panelNode);
    expect(onMouseDown.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(panelNode);
    expect(onMouseDown.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(panelNode);
    expect(onMouseDown.mock.calls.length).toBe(1);
  });

  it('renders the AccessibleFakeButton component as it\'s header', function () {
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, /* istanbul ignore next */{ label: 'Test' }));
    var buttons = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(panel, /* istanbul ignore next */_AccessibleFakeButton2.default);

    expect(buttons.length).toBe(1);
  });

  it('renders the AccessibleFkaeButton with the correct style and className', function () {
    var props = {
      label: 'Test',
      className: 'test',
      style: { display: 'block' },
      headerStyle: { background: 'black' },
      headerClassName: 'header-test' };


    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(panel, /* istanbul ignore next */_AccessibleFakeButton2.default);

    expect(btn.props.style).toEqual(props.headerStyle);
    expect(btn.props.className).toContain(props.headerClassName);
  });

  it('renders the AccessibleFkaeButton with the correct props', function () {
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, /* istanbul ignore next */{ label: 'Test' }));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(panel, /* istanbul ignore next */_AccessibleFakeButton2.default);

    expect(btn.props.onClick).toBe(panel._handleClick);
    expect(btn.props.tabIndex).toBe( /* istanbul ignore next */_ExpansionPanel2.default.defaultProps.tabIndex);
    expect(btn.props.children.length).toBe(2);
  });

  it('renders the Collapse component', function () {
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, /* istanbul ignore next */{ label: 'test' }));

    var collapses = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(panel, /* istanbul ignore next */_Collapse2.default);
    expect(collapses.length).toBe(1);
  });

  it('updates the Collase component\'s collapsed prop', function () {
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, /* istanbul ignore next */{ label: 'test' }));

    var collapse = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(panel, /* istanbul ignore next */_Collapse2.default);
    expect(collapse.props.collapsed).toBe(true);
    panel._handleClick();

    collapse = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(panel, /* istanbul ignore next */_Collapse2.default);
    expect(collapse.props.collapsed).toBe(false);
  });

  it('calls the onExpandToggle prop when toggled with the next expanded state', function () {
    var props = { label: 'Test', onExpandToggle: jest.fn() };
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));

    panel._handleClick();
    expect(props.onExpandToggle.mock.calls.length).toBe(1);
    expect(props.onExpandToggle.mock.calls[0][0]).toBe(true);

    panel._handleClick();
    expect(props.onExpandToggle.mock.calls.length).toBe(2);
    expect(props.onExpandToggle.mock.calls[1][0]).toBe(false);
  });

  it('calls the onSave prop when the save function is called', function () {
    var props = { label: 'Test', onSave: jest.fn() };
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));

    var clickEvent = {};
    panel._handleSave(clickEvent);

    expect(props.onSave.mock.calls.length).toBe(1);
    expect(props.onSave.mock.calls[0][0]).toEqual(clickEvent);
  });

  it('automatically unexpands if the closeOnSave prop is true and the user saves', function () {
    var props = { label: 'Test', closeOnSave: true };
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    panel._handleClick();

    expect(panel.state.expanded).toBe(true);

    panel._handleSave();

    jest.runAllTimers();
    expect(panel.state.expanded).toBe(false);
  });

  it('calls the onExpandToggle function when the user saves and closeOnSave is true', function () {
    var props = { label: 'Test', closeOnSave: true, onExpandToggle: jest.fn() };
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    panel._handleClick();

    expect(props.onExpandToggle.mock.calls.length).toBe(1);
    expect(props.onExpandToggle.mock.calls[0][0]).toBe(true);

    panel._handleSave();

    jest.runAllTimers();
    expect(props.onExpandToggle.mock.calls.length).toBe(2);
    expect(props.onExpandToggle.mock.calls[1][0]).toBe(false);
  });

  it('automatically unexpands if the closeOnCancel prop is true and the user cancels', function () {
    var props = { label: 'Test', closeOnCancel: true };
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    panel._handleClick();

    expect(panel.state.expanded).toBe(true);

    panel._handleCancel();

    jest.runAllTimers();
    expect(panel.state.expanded).toBe(false);
  });

  it('calls the onExpandToggle function when the user cancels and closeOnCancel is true', function () {
    var props = { label: 'Test', closeOnCancel: true, onExpandToggle: jest.fn() };
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    panel._handleClick();

    expect(props.onExpandToggle.mock.calls.length).toBe(1);
    expect(props.onExpandToggle.mock.calls[0][0]).toBe(true);

    panel._handleCancel();

    jest.runAllTimers();
    expect(props.onExpandToggle.mock.calls.length).toBe(2);
    expect(props.onExpandToggle.mock.calls[1][0]).toBe(false);
  });

  it('allows for the panel to be expanded by default', function () {
    var props = { label: 'Test', defaultExpanded: true };
    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    expect(panel.state.expanded).toBe(true);
  });

  it('allows the panel to be fully controlled', function () {
    var props = { label: 'Test', expanded: false };
    var onExpandToggle = jest.fn(function (expanded) {
      props = Object.assign({}, props, { expanded: expanded });
    });
    props.onExpandToggle = onExpandToggle;

    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, props));
    expect(panel.state.expanded).toBeUndefined();
    panel._handleClick();

    expect(props.expanded).toBe(true);
    expect(panel.state.expanded).toBeUndefined();
  });
});