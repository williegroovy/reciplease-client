/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../isDateEqual');

var /* istanbul ignore next */_isDateEqual = require('../isDateEqual'); /* istanbul ignore next */var _isDateEqual2 = _interopRequireDefault(_isDateEqual);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('isDateEqual', function () {
  it('allows nulls', function () {
    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(null, new Date())).toBe(false);
    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(new Date(), null)).toBe(false);
    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(null, null)).toBe(true);
  });

  it('allows undefined', function () {
    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(undefined, new Date())).toBe(false);
    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(new Date(), undefined)).toBe(false);
    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(undefined, undefined)).toBe(true);
  });

  it('returns true if the dates are equal by comparing getTime', function () {
    var d1 = new Date(2016, 3, 2);
    var d2 = new Date(2016, 3, 2);

    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(d1, d2)).toBe(true);

    d2 = new Date(2016, 3, 2, 100);
    expect( /* istanbul ignore next */(0, _isDateEqual2.default)(d1, d2)).toBe(false);
  });
});