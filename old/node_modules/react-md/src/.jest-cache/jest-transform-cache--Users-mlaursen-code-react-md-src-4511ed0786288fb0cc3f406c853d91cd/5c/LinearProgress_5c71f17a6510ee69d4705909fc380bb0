/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../LinearProgress');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_LinearProgress = require('../LinearProgress'); /* istanbul ignore next */var _LinearProgress2 = _interopRequireDefault(_LinearProgress);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('LinearProgress', function () {
  it('merges className and style', function () {
    var style = { display: 'block' };
    var className = 'test';
    var progress = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_LinearProgress2.default, /* istanbul ignore next */{ id: 'test', style: style, className: className }));


    var progressNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(progress);
    expect(progressNode.style.display).toBe(style.display);
    expect(progressNode.classList.contains(className)).toBe(true);
  });

  it('converts to a determinate progress if there is a value', function () {
    var progress = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_LinearProgress2.default, /* istanbul ignore next */{ id: 'test', value: 0 }));


    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(progress).childNodes[0];
    expect(node.className).toContain('determinate');
  });

  it('updates the progress width based on the current value', function () {
    var value = 12;
    var progress = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_LinearProgress2.default, /* istanbul ignore next */{ id: 'test', value: value }));


    var progressNode = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithClass)(progress, 'md-progress--linear-determinate');
    expect(progressNode.style.width).toBe( /* istanbul ignore next */value + '%');

    value = 0;
    progress = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_LinearProgress2.default, /* istanbul ignore next */{ id: 'test', value: value }));


    progressNode = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithClass)(progress, 'md-progress--linear-determinate');
    expect(progressNode.style.width).toBe( /* istanbul ignore next */value + '%');
  });
});