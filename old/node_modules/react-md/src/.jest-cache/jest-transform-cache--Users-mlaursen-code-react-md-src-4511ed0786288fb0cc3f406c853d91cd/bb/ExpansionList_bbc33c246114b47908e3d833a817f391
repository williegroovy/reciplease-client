/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../ExpansionList');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_ExpansionList = require('../ExpansionList'); /* istanbul ignore next */var _ExpansionList2 = _interopRequireDefault(_ExpansionList);
var /* istanbul ignore next */_ExpansionPanel = require('../ExpansionPanel'); /* istanbul ignore next */var _ExpansionPanel2 = _interopRequireDefault(_ExpansionPanel);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('ExpansionList', function () {
  it('merges className and style', function () {
    var style = { display: 'block' };
    var className = 'test';
    var expansionList = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionList2.default, /* istanbul ignore next */{ style: style, className: className }));


    var expansionListNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(expansionList);
    expect(expansionListNode.style.display).toBe(style.display);
    expect(expansionListNode.className).toContain(className);
  });

  it('adds any event listeners', function () {
    var onClick = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var props = {
      onClick: onClick,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel };


    var list = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionList2.default, props));
    var listNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(list);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(listNode);
    expect(onClick.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(listNode);
    expect(onMouseDown.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(listNode);
    expect(onMouseUp.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(listNode);
    expect(onMouseOver.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(listNode);
    expect(onMouseLeave.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(listNode);
    expect(onMouseDown.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(listNode);
    expect(onMouseDown.mock.calls.length).toBe(1);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(listNode);
    expect(onMouseDown.mock.calls.length).toBe(1);
  });

  it('injects the columnWidths prop into the child component', function () {
    var list = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionList2.default, /* istanbul ignore next */null,
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, /* istanbul ignore next */{ label: 'Test' })));



    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(list, /* istanbul ignore next */_ExpansionPanel2.default);

    expect(panel.props.columnWidths).toBe(list.state.columnWidths);
  });

  it('injects the focused prop into the child component', function () {
    var list = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionList2.default, /* istanbul ignore next */null,
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ExpansionPanel2.default, /* istanbul ignore next */{ label: 'Test' })));



    var panel = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(list, /* istanbul ignore next */_ExpansionPanel2.default);

    expect(panel.props.focused).toBe(false);
  });
});