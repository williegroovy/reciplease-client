/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../addSuffix');
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);

var /* istanbul ignore next */_addSuffix = require('../addSuffix'); /* istanbul ignore next */var _addSuffix2 = _interopRequireDefault(_addSuffix);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('addSuffix', function () {
  it('adds a suffix to a string with a space', function () {
    expect( /* istanbul ignore next */(0, _addSuffix2.default)('hello', '')).toBe('hello');
    expect( /* istanbul ignore next */(0, _addSuffix2.default)('he', 'llo')).toBe('he llo');
  });

  it('returns the string unmodified if the string is false-ish', function () {
    expect( /* istanbul ignore next */(0, _addSuffix2.default)(null, 'hello')).toBe(null);
    expect( /* istanbul ignore next */(0, _addSuffix2.default)('', 'hello')).toBe('');
    expect( /* istanbul ignore next */(0, _addSuffix2.default)(undefined, 'hello')).toBeUndefined();
  });

  it('removes any additional whitespace around the string', function () {
    expect( /* istanbul ignore next */(0, _addSuffix2.default)('        hello world       ', 'something')).toBe('hello world something');
  });

  it('does not add the suffix if it already exists in the string', function () {
    expect( /* istanbul ignore next */(0, _addSuffix2.default)('hello world', ' ')).toBe('hello world');
    expect( /* istanbul ignore next */(0, _addSuffix2.default)('Required *', '*')).toBe('Required *');
  });

  it('should return a react component if the "string" is a component', function () {
    var label = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */null, /* istanbul ignore next */'Hello!');
    expect( /* istanbul ignore next */(0, _addSuffix2.default)(label, ' *')).toBe(label);
  });
});