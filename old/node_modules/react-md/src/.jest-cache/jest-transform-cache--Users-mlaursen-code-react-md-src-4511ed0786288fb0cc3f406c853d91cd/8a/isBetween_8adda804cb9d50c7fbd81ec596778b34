/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../isBetween');

var /* istanbul ignore next */_isBetween = require('../isBetween'); /* istanbul ignore next */var _isBetween2 = _interopRequireDefault(_isBetween);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('isBetween', function () {
  it('returns true if a number is between the min and max values', function () {
    expect( /* istanbul ignore next */(0, _isBetween2.default)(1, 0, 2)).toBe(true);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(-1, -2, 0)).toBe(true);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(-50, -100, 0)).toBe(true);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(50, 0, 100)).toBe(true);
  });

  it('returns true if the number is equal to the min or max values', function () {
    expect( /* istanbul ignore next */(0, _isBetween2.default)(0, 0, 100)).toBe(true);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(0, -100, 0)).toBe(true);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(-100, -100, 100)).toBe(true);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(100, 0, 100)).toBe(true);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(5, 3, 5)).toBe(true);
  });

  it('returns false if a number is not between the min and max values', function () {
    expect( /* istanbul ignore next */(0, _isBetween2.default)(0, 1, 100)).toBe(false);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(-101, -100, 100)).toBe(false);
    expect( /* istanbul ignore next */(0, _isBetween2.default)(100, 1, 99)).toBe(false);
  });
});