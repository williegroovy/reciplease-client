/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../InputField');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');







var /* istanbul ignore next */_InputField = require('../InputField'); /* istanbul ignore next */var _InputField2 = _interopRequireDefault(_InputField);
var /* istanbul ignore next */_TextArea = require('../TextArea'); /* istanbul ignore next */var _TextArea2 = _interopRequireDefault(_TextArea);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('InputField', function () {
  it('renders an input tag when the rows prop is undefined', function () {
    var props = {};
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    var inputs = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(field, 'input');
    var areas = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(field, /* istanbul ignore next */_TextArea2.default);

    expect(inputs.length).toBe(1);
    expect(areas.length).toBe(0);

    props.rows = 2;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    inputs = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(field, 'input');
    areas = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(field, /* istanbul ignore next */_TextArea2.default);

    expect(inputs.length).toBe(0);
    expect(areas.length).toBe(1);
  });

  it('passes event listeners to the input tag', function () {
    var onClick = jest.fn();
    var onChange = jest.fn();
    var onInput = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var onKeyDown = jest.fn();
    var onKeyUp = jest.fn();

    var props = {
      onClick: onClick,
      onChange: onChange,
      onInput: onInput,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp };


    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    var fieldNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field);
    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(fieldNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(fieldNode);
    expect(onChange).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.input(fieldNode);
    expect(onInput).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(fieldNode);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(fieldNode);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(fieldNode);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(fieldNode);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(fieldNode);
    expect(onTouchCancel).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(fieldNode);
    expect(onKeyDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(fieldNode);
    expect(onKeyUp).toBeCalled();
  });

  it('passes event listeners to the TextArea component', function () {
    var onClick = jest.fn();
    var onChange = jest.fn();
    var onInput = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var onKeyDown = jest.fn();
    var onKeyUp = jest.fn();

    var props = {
      rows: 2,
      onClick: onClick,
      onChange: onChange,
      onInput: onInput,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp };


    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    var fieldNode = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_TextArea2.default);
    expect(fieldNode.props.onClick).toBe(props.onClick);
    expect(fieldNode.props.onChange).toBe(props.onChange);
    expect(fieldNode.props.onInput).toBe(props.onInput);
    expect(fieldNode.props.onMouseDown).toBe(props.onMouseDown);
    expect(fieldNode.props.onMouseUp).toBe(props.onMouseUp);
    expect(fieldNode.props.onTouchStart).toBe(props.onTouchStart);
    expect(fieldNode.props.onTouchEnd).toBe(props.onTouchEnd);
    expect(fieldNode.props.onTouchCancel).toBe(props.onTouchCancel);
    expect(fieldNode.props.onKeyDown).toBe(props.onKeyDown);
    expect(fieldNode.props.onKeyUp).toBe(props.onKeyUp);
  });

  it('applies the customSize state when the customSize prop is defined', function () {
    var customSize = 'title';
    var props = {};
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    var className = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field).className;

    expect(className).not.toContain( /* istanbul ignore next */'--' + customSize);

    props.customSize = customSize;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field).className;

    expect(className).toContain( /* istanbul ignore next */'--' + customSize);

    props.rows = 2;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_TextArea2.default).props.className;

    expect(className).toContain( /* istanbul ignore next */'--' + customSize);

    props.customSize = null;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_TextArea2.default).props.className;

    expect(className).not.toContain( /* istanbul ignore next */'--' + customSize);
  });

  it('adds the margin states correctly to input fields', function () {
    var props = { block: false };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    var className = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field).className;

    expect(className).toContain('--margin');
    expect(className).not.toContain('--floating-margin');

    props.block = true;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field).className;

    expect(className).not.toContain('--margin');
    expect(className).not.toContain('--floating-margin');

    props.label = 'Hello';
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field).className;

    expect(className).not.toContain('--margin');
    expect(className).not.toContain('--floating-margin');

    props.block = false;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactDom.findDOMNode)(field).className;

    expect(className).not.toContain('--margin');
    expect(className).toContain('--floating-margin');
  });

  it('never adds the margin states multiline text fields', function () {
    var props = { rows: 2, block: false };
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    var className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_TextArea2.default).props.className;

    expect(className).not.toContain('--margin');
    expect(className).not.toContain('--floating-margin');

    props.block = true;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_TextArea2.default).props.className;

    expect(className).not.toContain('--margin');
    expect(className).not.toContain('--floating-margin');

    props.label = 'Hello';
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_TextArea2.default).props.className;

    expect(className).not.toContain('--margin');
    expect(className).not.toContain('--floating-margin');

    props.block = false;
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_InputField2.default, props));
    className = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(field, /* istanbul ignore next */_TextArea2.default).props.className;

    expect(className).not.toContain('--margin');
    expect(className).not.toContain('--floating-margin');
  });
});