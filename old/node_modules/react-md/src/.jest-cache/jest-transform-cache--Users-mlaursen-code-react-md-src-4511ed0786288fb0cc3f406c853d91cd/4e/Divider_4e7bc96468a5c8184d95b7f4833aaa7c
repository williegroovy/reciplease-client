/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../Divider');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');

var /* istanbul ignore next */_Divider = require('../Divider'); /* istanbul ignore next */var _Divider2 = _interopRequireDefault(_Divider);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Divider', function () {
  it('updates the className with inset or vertical', function () {
    var divider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Divider2.default, /* istanbul ignore next */null));

    var dividerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(divider);

    expect(dividerNode.className).toBe('md-divider');

    divider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Divider2.default, /* istanbul ignore next */{ inset: /* istanbul ignore next */true }));
    dividerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(divider);

    expect(dividerNode.className).toContain('--inset');
    expect(dividerNode.className).not.toContain('--vertical');

    divider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Divider2.default, /* istanbul ignore next */{ inset: /* istanbul ignore next */true, vertical: /* istanbul ignore next */true }));
    dividerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(divider);

    expect(dividerNode.className).toContain('--inset');
    expect(dividerNode.className).toContain('--vertical');

    divider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Divider2.default, /* istanbul ignore next */{ vertical: /* istanbul ignore next */true }));
    dividerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(divider);

    expect(dividerNode.className).not.toContain('--inset');
    expect(dividerNode.className).toContain('--vertical');
  });

  it('passes all remaining props to the divider', function () {
    var onClick = jest.fn();
    var onFocus = jest.fn();
    var onBlur = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var style = { display: 'block' };

    var divider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Divider2.default, /* istanbul ignore next */{
      style: style,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel }));



    var dividerNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(divider);
    expect(dividerNode.style.display).toBe(style.display);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(dividerNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.focus(dividerNode);
    expect(onFocus).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.blur(dividerNode);
    expect(onBlur).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(dividerNode);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(dividerNode);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(dividerNode);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(dividerNode);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(dividerNode);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(dividerNode);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(dividerNode);
    expect(onTouchCancel).toBeCalled();
  });
});