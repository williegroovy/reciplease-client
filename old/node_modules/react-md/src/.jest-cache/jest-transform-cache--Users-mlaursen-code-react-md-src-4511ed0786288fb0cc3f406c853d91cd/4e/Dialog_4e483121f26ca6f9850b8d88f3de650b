/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../Dialog');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_Dialog = require('../Dialog'); /* istanbul ignore next */var _Dialog2 = _interopRequireDefault(_Dialog);
var /* istanbul ignore next */_FocusContainer = require('../../Helpers/FocusContainer'); /* istanbul ignore next */var _FocusContainer2 = _interopRequireDefault(_FocusContainer);
var /* istanbul ignore next */_Paper = require('../../Papers/Paper'); /* istanbul ignore next */var _Paper2 = _interopRequireDefault(_Paper);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Dialog', function () {
  it('renders as a Paper component', function () {
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */null));
    var papers = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(dialog, /* istanbul ignore next */_Paper2.default);
    expect(papers.length).toBe(1);
  });

  it('merges style and className in the Paper component', function () {
    var props = {
      style: { display: 'none' },
      className: 'womba-juice' };


    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, props));
    var paper = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(dialog, /* istanbul ignore next */_Paper2.default);
    expect(paper.props.style).toEqual(props.style);
    expect(paper.props.className).toContain(props.className);
  });

  it('renders the Paper component as the FocusContainer component', function () {
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */null));
    var paper = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(dialog, /* istanbul ignore next */_Paper2.default);
    expect(paper.props.component).toBe( /* istanbul ignore next */_FocusContainer2.default);
  });

  it('should set the renderNode in the context once it has been mounted', function () {
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */{ id: 'test' }));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(dialog);
    expect(dialog.getChildContext()).toEqual({ renderNode: node });
  });
});