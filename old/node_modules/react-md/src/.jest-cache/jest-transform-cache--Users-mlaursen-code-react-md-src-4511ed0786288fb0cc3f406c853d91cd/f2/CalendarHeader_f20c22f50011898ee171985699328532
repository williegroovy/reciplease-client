/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../CalendarHeader');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_CalendarHeader = require('../CalendarHeader'); /* istanbul ignore next */var _CalendarHeader2 = _interopRequireDefault(_CalendarHeader);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('CalendarHeader', function () {
  it('renders the day of week abbreviations', function () {
    var DateTimeFormat = require('../../utils/DateUtils/DateTimeFormat');

    var props = {
      DateTimeFormat: DateTimeFormat,
      locales: 'en-US',
      onPreviousClick: jest.fn(),
      onNextClick: jest.fn(),
      previousIcon: 'a',
      nextIcon: 'a',
      date: new Date() };


    var header = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CalendarHeader2.default, props));
    var dows = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithClass)(header, 'md-calendar-dows');
    expect(dows.childNodes.length).toBe(7);
  });

  it('formats the date with a month and year', function () {
    var DateTimeFormat = require('../../utils/DateUtils/DateTimeFormat');

    var props = {
      DateTimeFormat: DateTimeFormat,
      locales: 'en-US',
      onPreviousClick: jest.fn(),
      onNextClick: jest.fn(),
      previousIcon: 'a',
      nextIcon: 'a',
      date: new Date() };


    /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_CalendarHeader2.default, props));
    // first call is from generateDows
    expect(DateTimeFormat.mock.calls[1][0]).toBe(props.locales);
    expect(DateTimeFormat.mock.calls[1][1]).toEqual({ month: 'long', year: 'numeric' });
  });
});