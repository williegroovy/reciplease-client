/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../ThumbMask');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_ThumbMask = require('../ThumbMask'); /* istanbul ignore next */var _ThumbMask2 = _interopRequireDefault(_ThumbMask);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('ThumbMask', function () {
  it('merges className and style', function () {
    var props = {
      style: { display: 'block' },
      className: 'test',
      thumbLeft: '' };

    var mask = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ThumbMask2.default, props));
    var maskNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(mask);
    expect(maskNode.style.display).toEqual(props.style.display);
    expect(maskNode.className).toContain(props.className);
  });

  it('passes the event listeners correctly', function () {
    var onClick = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();

    var props = {
      onClick: onClick,
      onMouseUp: onMouseUp,
      onMouseDown: onMouseDown,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      thumbLeft: '' };


    var mask = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ThumbMask2.default, props));

    var maskNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(mask);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(maskNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(maskNode);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(maskNode);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(maskNode);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(maskNode);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(maskNode);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(maskNode);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(maskNode);
    expect(onTouchCancel).toBeCalled();
  });
});