/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../Slider'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');






var /* istanbul ignore next */_Slider = require('../Slider'); /* istanbul ignore next */var _Slider2 = _interopRequireDefault(_Slider);
var /* istanbul ignore next */_Track = require('../Track'); /* istanbul ignore next */var _Track2 = _interopRequireDefault(_Track);
var /* istanbul ignore next */_TextField = require('../../TextFields/TextField'); /* istanbul ignore next */var _TextField2 = _interopRequireDefault(_TextField);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Slider', function () {
  it('merges and passes all styles and all classNames', function () {
    var props = {
      style: { display: 'block' },
      className: 'test',
      trackStyle: { background: 'black' },
      trackClassName: 'test-2',
      thumbStyle: { background: 'red' },
      thumbClassName: 'test-3',
      discreteValueStyle: { background: 'orange' },
      discreteValueClassName: 'test-4' };


    var slider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, props));
    var sliderNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(slider);
    var track = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(slider, /* istanbul ignore next */_Track2.default);

    expect(sliderNode.style.display).toBe(props.style.display);
    expect(sliderNode.className).toContain(props.className);

    expect(track.props.style.background).toEqual(props.trackStyle.background);
    expect(track.props.className).toBe(props.trackClassName);
    expect(track.props.thumbStyle).toEqual(props.thumbStyle);
    expect(track.props.thumbClassName).toBe(props.thumbClassName);
    expect(track.props.discreteValueStyle).toEqual(props.discreteValueStyle);
    expect(track.props.discreteValueClassName).toBe(props.discreteValueClassName);
  });

  it('passes the event listeners correctly', function () {
    var onClick = jest.fn();
    var onMouseUp = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var onKeyUp = jest.fn();
    var onKeyDown = jest.fn();

    var props = {
      onClick: onClick,
      onMouseUp: onMouseUp,
      onMouseDown: onMouseDown,
      onMouseOver: onMouseOver,
      onMouseLeave: onMouseLeave,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      onKeyUp: onKeyUp,
      onKeyDown: onKeyDown };


    var slider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, props));

    var sliderNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(slider);

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(sliderNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseOver(sliderNode);
    expect(onMouseOver).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseLeave(sliderNode);
    expect(onMouseLeave).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(sliderNode);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(sliderNode);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(sliderNode);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(sliderNode);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(sliderNode);
    expect(onTouchCancel).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(sliderNode);
    expect(onKeyUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(sliderNode);
    expect(onKeyDown).toBeCalled();
  });

  it('renders a text field with the correct props when the editable prop is true', function () {
    var slider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, /* istanbul ignore next */null));
    var texts = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(slider, /* istanbul ignore next */_TextField2.default);
    expect(texts.length).toBe(0);

    slider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, /* istanbul ignore next */{ editable: /* istanbul ignore next */true }));
    texts = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedComponentsWithType)(slider, /* istanbul ignore next */_TextField2.default);
    expect(texts.length).toBe(1); /* istanbul ignore next */var _texts =

    texts,_texts2 = _slicedToArray(_texts, 1),text = _texts2[0];
    expect(text.props.type).toBe('number');
    expect(text.props.value).toBe(slider.state.value);
    expect(text.props.onChange).toBe(slider._handleTextFieldChange);
    expect(text.props.step).toBe( /* istanbul ignore next */_Slider2.default.defaultProps.step);
  });

  it('renders the Track component with the correct props', function () {
    var slider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, /* istanbul ignore next */null)); /* istanbul ignore next */var _findRenderedComponen =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(slider, /* istanbul ignore next */_Track2.default),props = _findRenderedComponen.props;

    expect(props.active).toBe(false);
    expect(props.dragging).toBe(false);
    expect(props.disabled).toBeUndefined();
    expect(props.style).toEqual({ width: slider.state.trackWidth });
    expect(props.thumbLeft).toBe(slider.state.thumbLeft);
    expect(props.trackFillWidth).toBe(slider.state.trackFillWidth);
    expect(props.on).toBe(false);
    expect(props.off).toBe(true);
    expect(props.maskInked).toBe(slider.state.maskInked);
    expect(props.onThumbKeyUp).toBe(slider._handleKeyUp);
    expect(props.onThumbKeyDown).toBe(slider._handleKeyDown);
    expect(props.onThumbFocus).toBe(slider._handleFocus);
    expect(props.discrete).toBeUndefined();
    expect(props.tickWidth).toBe( /* istanbul ignore next */_Slider2.default.defaultProps.tickWidth);
    expect(props.discreteTicks).toBeUndefined();
    expect(props.step).toBe( /* istanbul ignore next */_Slider2.default.defaultProps.step);
    expect(props.scale).toBe(slider.state.scale);
    expect(props.value).toBe(slider.state.value);

    slider = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, /* istanbul ignore next */{ disabled: /* istanbul ignore next */true }));
    props = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(slider, /* istanbul ignore next */_Track2.default).props;
    expect(props.disabled).toBe(true);
  });

  it('renders the balloon on correct tick when min value is greater than 0 & defaultValue is not 0', function () {
    var renderSliderWithProps = function renderSliderWithProps(defaultValue, min, max) {
      var props = { defaultValue: defaultValue, min: min, max: max };
      return (/* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, props)));
    };

    var slider = renderSliderWithProps(5, 3, 12);
    expect(slider.state.distance).toEqual(22.22222222222222);

    slider = renderSliderWithProps(55, 40, 77);
    expect(slider.state.distance).toEqual(40.54054054054054);

    slider = renderSliderWithProps(1076, 200, 20000);
    expect(slider.state.distance).toEqual(4.424242424242424);
  });

  it('renders the slider correctly without a defaultValue', function () {
    var renderSliderWithProps = function renderSliderWithProps(defaultValue, max) {
      var props = { defaultValue: defaultValue, max: max };
      return (/* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Slider2.default, props)));
    };

    var slider = renderSliderWithProps(5, 12);
    expect(slider.state.distance).toEqual(41.66666666666667);

    slider = renderSliderWithProps(55, 77);
    expect(slider.state.distance).toEqual(71.42857142857143);

    slider = renderSliderWithProps(1076, 20000);
    expect(slider.state.distance).toEqual(5.38);
  });
});