/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../Avatar');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom'); /* istanbul ignore next */var _reactDom2 = _interopRequireDefault(_reactDom);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils'); /* istanbul ignore next */var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);
var /* istanbul ignore next */_Avatar = require('../Avatar'); /* istanbul ignore next */var _Avatar2 = _interopRequireDefault(_Avatar);
var /* istanbul ignore next */_FontIcon = require('../../FontIcons/FontIcon'); /* istanbul ignore next */var _FontIcon2 = _interopRequireDefault(_FontIcon);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Avatar', function () {
  it('merges additional class names with md-avatar', function () {
    var avatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ className: 'something-else' }, /* istanbul ignore next */'M'));


    var avatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(avatar);

    expect(avatarNode.classList.contains('md-avatar')).toBe(true);
    expect(avatarNode.classList.contains('something-else')).toBe(true);
  });

  it('renders an letter or an icon in the avatar content', function () {
    var iconAvatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FontIcon2.default, /* istanbul ignore next */null, /* istanbul ignore next */'wat') }));

    var letterAvatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */null, /* istanbul ignore next */'M'));


    var iconAvatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(iconAvatar).querySelector('.md-avatar-content');
    var letterAvatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(letterAvatar).querySelector('.md-avatar-content');

    expect(iconAvatarNode).toBeDefined();
    expect(iconAvatarNode.querySelector('.md-icon')).toBeDefined();
    expect(letterAvatarNode).toBeDefined();
    expect(letterAvatarNode.textContent).toBe('M');
  });

  it('renders an image tag if the src attribute is given', function () {
    var avatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ src: '../image.jpg', alt: 'Nothing' }));


    var avatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(avatar);
    var img = avatarNode.querySelector('img');

    expect(img).toBeDefined();
    expect(img.getAttribute('src')).toBe('../image.jpg');
    expect(img.getAttribute('alt')).toBe('Nothing');
    expect(img.classList.contains('md-avatar-img')).toBe(true);
  });

  it('can apply a specific color suffix', function () {
    var avatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ suffix: 'color-1' }, /* istanbul ignore next */'M'));


    var avatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(avatar);

    expect(avatarNode.classList.contains('md-avatar--color-1')).toBe(true);
  });

  it('can apply a random color with the random prop', function () {
    var avatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ random: /* istanbul ignore next */true }, /* istanbul ignore next */'M'));


    var avatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(avatar);

    expect(avatarNode.className.indexOf('--')).not.toBe(-1);
  });

  it('can apply a random color with custom suffixes', function () {
    var avatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ random: /* istanbul ignore next */true, suffixes: ['wat-wat', 'oh-no'] }, /* istanbul ignore next */'M'));


    var avatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(avatar);

    expect(avatarNode.className).toMatch(/md-avatar--(wat-wat|oh-no)/);
  });

  it('will apply the style prop to the md-avatar div', function () {
    var style = {
      // #fff
      color: 'rgb(255, 255, 255)',
      display: 'block' };


    var avatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ style: style }, /* istanbul ignore next */'M'));


    var avatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(avatar);

    expect(avatarNode.style.color).toBe(style.color);
    expect(avatarNode.style.display).toBe(style.display);
  });

  it('will apply event listeners to the md-avatar', function () {
    var onMouseOver = jest.fn();
    var onMouseLeave = jest.fn();
    var onClick = jest.fn();

    var avatar = /* istanbul ignore next */_reactAddonsTestUtils2.default.renderIntoDocument(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Avatar2.default, /* istanbul ignore next */{ onClick: onClick, onMouseOver: onMouseOver, onMouseLeave: onMouseLeave }));


    var avatarNode = /* istanbul ignore next */_reactDom2.default.findDOMNode(avatar);

    /* istanbul ignore next */_reactAddonsTestUtils2.default.Simulate.click(avatarNode);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils2.default.Simulate.mouseOver(avatarNode);
    /* istanbul ignore next */_reactAddonsTestUtils2.default.Simulate.mouseLeave(avatarNode);
    expect(onMouseOver).toBeCalled();
    expect(onMouseLeave).toBeCalled();
  });
});