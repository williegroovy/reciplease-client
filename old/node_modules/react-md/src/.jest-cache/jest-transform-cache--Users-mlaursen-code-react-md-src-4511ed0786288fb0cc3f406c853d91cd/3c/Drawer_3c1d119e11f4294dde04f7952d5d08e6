/* istanbul ignore next */'use strict'; /* eslint-env jest */
/* eslint-disable max-len */
jest.unmock('../Drawer');
jest.unmock('../DrawerTypes');
jest.unmock('../isType');
jest.unmock('../../constants/media');
jest.unmock('../../Dialogs/Dialog');
jest.unmock('../../Papers/Paper'); /* istanbul ignore next */var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_Drawer = require('../Drawer'); /* istanbul ignore next */var _Drawer2 = _interopRequireDefault(_Drawer);
var /* istanbul ignore next */_Dialog = require('../../Dialogs/Dialog'); /* istanbul ignore next */var _Dialog2 = _interopRequireDefault(_Dialog);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Drawer', function () {
  it('should inherit the dialog\'s renderNode context', function () {
    var dialog = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */null, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */null)));
    var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(dialog, /* istanbul ignore next */_Drawer2.default); /* istanbul ignore next */var _dialog$getChildConte =
    dialog.getChildContext(),renderNode = _dialog$getChildConte.renderNode;
    expect(drawer.context.renderNode).toBe(renderNode);
  });

  describe('updateType', function () {
    var MATCH_MEDIA = window.matchMedia;
    var matchesMobile = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: query.indexOf( /* istanbul ignore next */_Drawer2.default.defaultProps.mobileMinWidth) !== -1 };});

    var matchesTablet = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: query.indexOf( /* istanbul ignore next */_Drawer2.default.defaultProps.tabletMinWidth) !== -1 };});

    var matchesDesktop = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: query.indexOf('max') === -1 &&
        query.indexOf( /* istanbul ignore next */_Drawer2.default.defaultProps.desktopMinWidth) !== -1 };});

    afterAll(function () {
      window.matchMedia = MATCH_MEDIA;
    });

    it('should correctly set the default visibility on mobile devices', function () {
      var props = {
        navItems: [],
        mobileType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT,
        desktopType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesMobile;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, props));
      expect(drawer.state.visible).toBe(false);
      expect(drawer.state.type).toBe( /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(0);
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);
    });

    it('should correctly set the default visibility on tablets', function () {
      var props = {
        navItems: [],
        mobileType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT,
        desktopType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesTablet;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, props));
      expect(drawer.state.visible).toBe(false);
      expect(drawer.state.type).toBe( /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(1);
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT, { mobile: false, tablet: true, desktop: false });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);
    });

    it('should correctly set the default visibility on desktop', function () {
      var props = {
        navItems: [],
        mobileType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.PERSISTENT,
        desktopType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesDesktop;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.type).toBe( /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(1);
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_Drawer2.default.DrawerTypes.FULL_HEIGHT, { mobile: false, tablet: false, desktop: true });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(1);
      expect(props.onVisibilityToggle).toBeCalledWith(true);
    });

    it('should not update the visibility to false when the defaultVisible prop is enabled and the drawer type is temporary for any screen size', function () {
      var props = {
        defaultVisible: true,
        navItems: [],
        mobileType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        tabletType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        desktopType: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY,
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesMobile;
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.type).toBe( /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(0);
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.type).toBe( /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(1);
      expect(props.onMediaTypeChange).toBeCalledWith(props.tabletType, { mobile: false, tablet: true, desktop: false });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, props));
      expect(drawer.state.visible).toBe(true);
      expect(drawer.state.type).toBe( /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY);
      expect(props.onMediaTypeChange.mock.calls.length).toBe(2);
      expect(props.onMediaTypeChange).toBeCalledWith(props.desktopType, { mobile: false, tablet: false, desktop: true });
      expect(props.onVisibilityToggle.mock.calls.length).toBe(0);
    });

    it('should correctly update the visibility when the visible prop was defined and there was a media type change with visibility', function () {
      var props = {
        visible: false,
        defaultMedia: 'mobile',
        onMediaTypeChange: jest.fn(),
        onVisibilityToggle: jest.fn() };


      window.matchMedia = matchesDesktop;
      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, props));
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_Drawer2.default.defaultProps.desktopType, { mobile: false, tablet: false, desktop: true });
      expect(props.onVisibilityToggle).toBeCalledWith(true);

      window.matchMedia = matchesMobile;
      /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { visible: /* istanbul ignore next */true, defaultMedia: 'desktop' })));
      expect(props.onMediaTypeChange).toBeCalledWith( /* istanbul ignore next */_Drawer2.default.defaultProps.mobileType, { mobile: true, tablet: false, desktop: false });
      expect(props.onVisibilityToggle).toBeCalledWith(true);
    });

    it('should update the overlayActive state correctly on initial mount when defaultVisible', function () {
      window.matchMedia = matchesMobile;
      var props = { defaultVisible: true, type: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY };
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);
    });

    it('should set overlayActive to true on any screen size if the overlay prop is enabled', function () {
      window.matchMedia = matchesMobile;
      var props = { defaultVisible: true, type: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY, overlay: true };
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);
    });

    it('should set overlayActive to false on any screen size if the overlay prop is enabled', function () {
      window.matchMedia = matchesMobile;
      var props = { defaultVisible: true, type: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY, overlay: false };
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);
    });

    it('should update the overlayActive state correctly on initial mount when visible', function () {
      window.matchMedia = matchesMobile;
      var props = { visible: true, type: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY, onVisibilityToggle: jest.fn() };
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);
    });

    it('should set overlayActive to true on any screen size if the overlay prop is enabled', function () {
      window.matchMedia = matchesMobile;
      var props = { visible: true, type: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY, overlay: true, onVisibilityToggle: jest.fn() };
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(true);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(true);
    });

    it('should set overlayActive to false on any screen size if the overlay prop is enabled', function () {
      window.matchMedia = matchesMobile;
      var props = { visible: true, type: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY, overlay: false, onVisibilityToggle: jest.fn() };
      var drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);

      window.matchMedia = matchesTablet;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);

      window.matchMedia = matchesDesktop;
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'mobile' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'tablet' })));
      expect(drawer.state.overlayActive).toBe(false);
      drawer = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Drawer2.default, /* istanbul ignore next */_extends({}, props, { defaultMedia: 'desktop' })));
      expect(drawer.state.overlayActive).toBe(false);
    });
  });

  describe('matchesMedia', function () {
    var MATCH_MEDIA = window.matchMedia;
    var matchMedia = /* istanbul ignore next */void 0;
    beforeEach(function () {
      matchMedia = jest.fn(function () /* istanbul ignore next */{return { matches: false };});
      window.matchMedia = matchMedia;
    });

    it('should call the window.matchMedia with a min width', function () {
      /* istanbul ignore next */_Drawer2.default.matchesMedia(320);
      expect(matchMedia.mock.calls.length).toBe(1);
      expect(matchMedia.mock.calls[0][0]).toBe('screen and (min-width: 320px)');

      /* istanbul ignore next */_Drawer2.default.matchesMedia(800);
      expect(matchMedia.mock.calls.length).toBe(2);
      expect(matchMedia.mock.calls[1][0]).toBe('screen and (min-width: 800px)');
    });

    it('should call window.matchMedia with the min and max width', function () {
      /* istanbul ignore next */_Drawer2.default.matchesMedia(320, 800);
      expect(matchMedia.mock.calls.length).toBe(1);
      expect(matchMedia.mock.calls[0][0]).toBe('screen and (min-width: 320px) and (max-width: 800px)');
    });

    afterAll(function () {
      window.matchMedia = MATCH_MEDIA;
    });
  });

  describe('getCurrentMedia', function () {/* istanbul ignore next */var _Drawer$defaultProps =
    /* istanbul ignore next */_Drawer2.default.defaultProps,mobileMinWidth = _Drawer$defaultProps.mobileMinWidth,tabletMinWidth = _Drawer$defaultProps.tabletMinWidth,desktopMinWidth = _Drawer$defaultProps.desktopMinWidth;
    var matchMobile = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: !!query.match( /* istanbul ignore next */'min-width: ' + mobileMinWidth) };});

    var matchTablet = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: !!query.match( /* istanbul ignore next */'min-width: ' + tabletMinWidth) };});

    var matchDesktop = jest.fn(function (query) /* istanbul ignore next */{return {
        matches: !!query.match( /* istanbul ignore next */'min-width: ' + desktopMinWidth) };});

    var MATCH_MEDIA = window.matchMedia;
    it('should return the mobile drawer type when the media matches mobile', function () {
      window.matchMedia = matchMobile;
      var expected = { mobile: true, tablet: false, desktop: false, type: /* istanbul ignore next */_Drawer2.default.defaultProps.mobileType };
      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia()).toEqual(expected);
    });

    it('should return the tablet drawer type when the media matches tablet', function () {
      window.matchMedia = matchTablet;
      var expected = { mobile: false, tablet: true, desktop: false, type: /* istanbul ignore next */_Drawer2.default.defaultProps.tabletType };
      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia()).toEqual(expected);
    });

    it('should return the desktop drawer type when the media matches desktop', function () {
      window.matchMedia = matchDesktop;
      var expected = { mobile: false, tablet: false, desktop: true, type: /* istanbul ignore next */_Drawer2.default.defaultProps.desktopType };
      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia()).toEqual(expected);
    });

    it('should return the current type prop if constantType is enabled for any media', function () {
      var props = /* istanbul ignore next */_extends({}, /* istanbul ignore next */_Drawer2.default.defaultProps, { type: /* istanbul ignore next */_Drawer2.default.DrawerTypes.TEMPORARY, constantType: true });
      window.matchMedia = matchMobile;
      var expected = {
        mobile: true,
        tablet: false,
        desktop: false,
        type: props.type };


      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia(props)).toEqual(expected);

      window.matchMedia = matchTablet;
      expected.mobile = false;
      expected.tablet = true;
      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia(props)).toEqual(expected);

      window.matchMedia = matchDesktop;
      expected.tablet = false;
      expected.desktop = true;
      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia(props)).toEqual(expected);
    });

    it('should still do the media type matches if constantType is not enabled', function () {/* istanbul ignore next */var _Drawer$DrawerTypes =
      /* istanbul ignore next */_Drawer2.default.DrawerTypes,TEMPORARY = _Drawer$DrawerTypes.TEMPORARY,PERSISTENT = _Drawer$DrawerTypes.PERSISTENT,FULL_HEIGHT = _Drawer$DrawerTypes.FULL_HEIGHT;
      var props = /* istanbul ignore next */_extends({},
      /* istanbul ignore next */_Drawer2.default.defaultProps, {
        type: TEMPORARY,
        constantType: false,
        mobileType: TEMPORARY,
        tabletType: PERSISTENT,
        desktopType: FULL_HEIGHT });


      window.matchMedia = matchMobile;
      var expected = {
        mobile: true,
        tablet: false,
        desktop: false,
        type: TEMPORARY };


      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia(props)).toEqual(expected);

      window.matchMedia = matchTablet;
      expected.mobile = false;
      expected.tablet = true;
      expected.type = PERSISTENT;
      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia(props)).toEqual(expected);

      window.matchMedia = matchDesktop;
      expected.tablet = false;
      expected.desktop = true;
      expected.type = FULL_HEIGHT;
      expect( /* istanbul ignore next */_Drawer2.default.getCurrentMedia(props)).toEqual(expected);
    });

    afterAll(function () {
      window.matchMedia = MATCH_MEDIA;
    });
  });
});