/* istanbul ignore next */'use strict'; /* eslint-env jest*/
jest.unmock('../Subheader');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');



var /* istanbul ignore next */_Subheader = require('../Subheader'); /* istanbul ignore next */var _Subheader2 = _interopRequireDefault(_Subheader);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Subheader', function () {
  it('merges className and style', function () {
    var style = { display: 'block' };
    var className = 'test';
    var subheader = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ style: style, className: className, primaryText: 'A' }));


    var subheaderNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(subheader);
    expect(subheaderNode.style.display).toBe(style.display);
    expect(subheaderNode.classList.contains(className)).toBe(true);
  });

  it('can render as different components', function () {
    var subheader = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ primaryText: 'A' }));

    var subheaderNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(subheader);
    expect(subheaderNode.tagName).toBe( /* istanbul ignore next */_Subheader2.default.defaultProps.component.toUpperCase());

    subheader = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ primaryText: 'A', component: 'h5' }));


    subheaderNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(subheader);
    expect(subheaderNode.tagName).toBe('H5');
  });
});