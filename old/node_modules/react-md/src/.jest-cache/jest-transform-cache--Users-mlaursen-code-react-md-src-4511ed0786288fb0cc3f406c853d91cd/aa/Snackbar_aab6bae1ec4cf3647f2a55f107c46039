/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../Snackbar');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');



var /* istanbul ignore next */_Snackbar = require('../Snackbar'); /* istanbul ignore next */var _Snackbar2 = _interopRequireDefault(_Snackbar);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var PROPS = {
  leaveTimeout: 300,
  onDismiss: jest.fn(),
  toast: {
    text: 'hello, World' } };



describe('Snackbar', function () {
  it('merges className and style', function () {
    var props = Object.assign({}, PROPS, {
      style: { background: 'black' },
      className: 'test' });


    var snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, props));

    var snackbarNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(snackbar);
    expect(snackbarNode.style.background).toBe(props.style.background);
    expect(snackbarNode.className).toContain(props.className);
  });

  it('renders as a p tag if there is no action', function () {
    var snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, PROPS));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(snackbar);
    expect(node.tagName).toBe('P');
  });

  it('renders as a section tag if there is an action', function () {
    var props = Object.assign({}, PROPS, {
      toast: { text: 'hello', action: 'woop' } });

    var snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, props));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(snackbar);
    expect(node.tagName).toBe('SECTION');
  });

  it('applies the md-snackbar className to the container', function () {
    var snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, PROPS));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(snackbar);
    expect(node.className).toContain('md-snackbar');

    var props = Object.assign({}, PROPS, {
      toast: { text: 'hello', action: 'woop' } });

    snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, props));
    node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(snackbar);
    expect(node.className).toContain('md-snackbar');
  });

  it('sets the role to be alert when there is no action', function () {
    var snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, PROPS));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(snackbar);
    expect(node.getAttribute('role')).toBe('alert');
  });

  it('sets the role to be alertdialog when there is an action', function () {
    var props = Object.assign({}, PROPS, {
      toast: { text: 'hello', action: 'woop' } });

    var snackbar = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Snackbar2.default, props));
    var node = /* istanbul ignore next */(0, _reactDom.findDOMNode)(snackbar);
    expect(node.getAttribute('role')).toBe('alertdialog');
  });
});