/* istanbul ignore next */'use strict'; /* eslint-env jest*/
/* eslint-disable max-len */
jest.unmock('../FileInput');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_FileInput = require('../FileInput'); /* istanbul ignore next */var _FileInput2 = _interopRequireDefault(_FileInput);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var File = jest.fn(function (name) /* istanbul ignore next */{return {
    name: name || 'Test.jpg',
    lastModifiedDate: new Date(),
    isClosed: true,
    size: 39202,
    type: 'image/jpg' };});


describe('FileInput', function () {
  it('merges className and style', function () {
    var style = { display: 'block' };
    var className = 'test';
    var fileInput = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileInput2.default, /* istanbul ignore next */{ id: 'test', style: style, className: className, onChange: jest.fn() }));


    var fileInputNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(fileInput);
    expect(fileInputNode.style.display).toBe(style.display);
    expect(fileInputNode.className).toContain(className);
  });

  it('returns a single file when multiple is false onChange', function () {
    var onChange = jest.fn();
    var fileInput = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileInput2.default, /* istanbul ignore next */{ id: 'test', onChange: onChange }));

    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileInput, 'input');

    // can't instantiate fully, so we can make an almost exact reference
    var files = [new File()];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toEqual(files[0]);
  });

  it('returns null when the user cancel\'s a file selection when multiple is false onChange', function () {
    var onChange = jest.fn();
    var fileInput = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileInput2.default, /* istanbul ignore next */{ id: 'test', onChange: onChange }));

    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileInput, 'input');
    // Cancel returns empty list
    var files = [];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toBe(null);
  });

  it('returns a list of files when multiple is true onChange', function () {
    var onChange = jest.fn();
    var fileInput = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileInput2.default, /* istanbul ignore next */{ id: 'test', onChange: onChange, multiple: /* istanbul ignore next */true }));

    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileInput, 'input');

    // can't instantiate fully, so we can make an almost exact reference
    var files = [new File(), new File('Test2.jpg')];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0]).toEqual(files);
  });

  it('returns an empty list of files when the user cancels an upload and multiple is true onChange', function () {
    var onChange = jest.fn();
    var fileInput = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FileInput2.default, /* istanbul ignore next */{ id: 'test', onChange: onChange, multiple: /* istanbul ignore next */true }));

    var input = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedDOMComponentWithTag)(fileInput, 'input');
    var files = [];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(input, { target: { files: files } });

    expect(onChange.mock.calls.length).toBe(1);
    expect(onChange.mock.calls[0][0].length).toBe(0);
    expect(onChange.mock.calls[0][0]).toEqual(files);
  });
});