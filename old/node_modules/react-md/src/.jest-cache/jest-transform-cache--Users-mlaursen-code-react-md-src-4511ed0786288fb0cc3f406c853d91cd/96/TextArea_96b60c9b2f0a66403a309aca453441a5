/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../TextArea'); /* istanbul ignore next */var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');





var /* istanbul ignore next */_TextArea = require('../TextArea'); /* istanbul ignore next */var _TextArea2 = _interopRequireDefault(_TextArea);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('TextArea', function () {
  it('renders two textareas', function () {
    var area = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextArea2.default, /* istanbul ignore next */{ rows: 2 }));
    var areas = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea');

    expect(areas.length).toBe(2);
  });

  it('passes all the event listeners to the non-masked textarea', function () {
    var onClick = jest.fn();
    var onChange = jest.fn();
    var onInput = jest.fn();
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onTouchStart = jest.fn();
    var onTouchEnd = jest.fn();
    var onTouchCancel = jest.fn();
    var onKeyDown = jest.fn();
    var onKeyUp = jest.fn();

    var props = {
      rows: 2,
      onClick: onClick,
      onChange: onChange,
      onInput: onInput,
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onTouchStart: onTouchStart,
      onTouchEnd: onTouchEnd,
      onTouchCancel: onTouchCancel,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp };


    var area = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextArea2.default, props)); /* istanbul ignore next */var _scryRenderedDOMCompo =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea'),_scryRenderedDOMCompo2 = _slicedToArray(_scryRenderedDOMCompo, 2),mask = _scryRenderedDOMCompo2[0],field = _scryRenderedDOMCompo2[1];

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(mask);
    expect(onClick).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(mask);
    expect(onChange).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.input(mask);
    expect(onInput).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(mask);
    expect(onMouseDown).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(mask);
    expect(onMouseUp).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(mask);
    expect(onTouchStart).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(mask);
    expect(onTouchEnd).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(mask);
    expect(onTouchCancel).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(mask);
    expect(onKeyDown).not.toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(mask);
    expect(onKeyUp).not.toBeCalled();


    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.click(field);
    expect(onClick).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.change(field);
    expect(onChange).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.input(field);
    expect(onInput).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseDown(field);
    expect(onMouseDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.mouseUp(field);
    expect(onMouseUp).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchStart(field);
    expect(onTouchStart).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchEnd(field);
    expect(onTouchEnd).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.touchCancel(field);
    expect(onTouchCancel).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyDown(field);
    expect(onKeyDown).toBeCalled();

    /* istanbul ignore next */_reactAddonsTestUtils.Simulate.keyUp(field);
    expect(onKeyUp).toBeCalled();
  });

  it('passes the value, defaultValue, className, style, and row props to both textareas', function () {
    var props = {
      style: { width: '100%' },
      className: 'test-text-field',
      defaultValue: 'Hello, World!',
      rows: 2 };


    var area = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextArea2.default, props)); /* istanbul ignore next */var _scryRenderedDOMCompo3 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea'),_scryRenderedDOMCompo4 = _slicedToArray(_scryRenderedDOMCompo3, 2),mask = _scryRenderedDOMCompo4[0],field = _scryRenderedDOMCompo4[1];

    expect(mask.style.width).toBe(props.style.width);
    expect(field.style.width).toBe(props.style.width);

    expect(mask.className).toContain(props.className);
    expect(field.className).toContain(props.className);

    expect(mask.value).toBe(props.defaultValue);
    expect(field.value).toBe(props.defaultValue);

    expect(mask.rows).toBe(props.rows);
    expect(field.rows).toBe(props.rows);

    delete props.defaultValue;
    props.value = 'There is some boogie boogie.';
    props.onChange = jest.fn();
    area = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextArea2.default, props)); /* istanbul ignore next */var _scryRenderedDOMCompo5 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea'); /* istanbul ignore next */var _scryRenderedDOMCompo6 = _slicedToArray(_scryRenderedDOMCompo5, 2);mask = _scryRenderedDOMCompo6[0]; /* istanbul ignore next */field = _scryRenderedDOMCompo6[1];

    expect(mask.value).toBe(props.value);
    expect(field.value).toBe(props.value);
  });

  it('sets the height only for the non-masked text field from the state', function () {
    var props = { rows: 2 };
    var area = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextArea2.default, props)); /* istanbul ignore next */var _scryRenderedDOMCompo7 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea'),_scryRenderedDOMCompo8 = _slicedToArray(_scryRenderedDOMCompo7, 2),mask = _scryRenderedDOMCompo8[0],field = _scryRenderedDOMCompo8[1];

    expect(mask.style.height).toBe('');
    expect(field.style.height).toBe('');

    area.setState({ height: 41 }); /* istanbul ignore next */var _scryRenderedDOMCompo9 =
    /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea'); /* istanbul ignore next */var _scryRenderedDOMCompo10 = _slicedToArray(_scryRenderedDOMCompo9, 2);mask = _scryRenderedDOMCompo10[0]; /* istanbul ignore next */field = _scryRenderedDOMCompo10[1];

    expect(mask.style.height).toBe('');
    expect(field.style.height).toBe('41px');
  });

  it('merges all styles on the non-masked textarea and overrides height', function () {
    var props = {
      style: { width: '100%', height: 220 },
      rows: 2 };


    var area = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextArea2.default, props));
    var field = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea')[1];
    expect(field.style.width).toBe(props.style.width);
    expect(field.style.height).toBe('');

    area.setState({ height: 41 });
    field = /* istanbul ignore next */(0, _reactAddonsTestUtils.scryRenderedDOMComponentsWithTag)(area, 'textarea')[1];

    expect(field.style.width).toBe(props.style.width);
    expect(field.style.height).toBe('41px');
  });

  it('applies the height + 5px to the container', function () {
    var props = { rows: 2 };
    var area = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextArea2.default, props));
    area.setState({ height: 41 });

    var areaNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(area);
    expect(areaNode.style.height).toBe('46px');
  });
});