/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../ListItem');

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom');
var /* istanbul ignore next */_reactAddonsTestUtils = require('react-addons-test-utils');




var /* istanbul ignore next */_ListItem = require('../ListItem'); /* istanbul ignore next */var _ListItem2 = _interopRequireDefault(_ListItem);
var /* istanbul ignore next */_AccessibleFakeInkedButton = require('../../Helpers/AccessibleFakeInkedButton'); /* istanbul ignore next */var _AccessibleFakeInkedButton2 = _interopRequireDefault(_AccessibleFakeInkedButton);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('ListItem', function () {
  it('merges className and style', function () {
    var props = {
      style: { background: 'black' },
      className: 'test',
      tileStyle: { background: 'red' },
      tileClassName: 'womba-juice',
      primaryText: 'Woop' };


    var listItem = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var listItemNode = /* istanbul ignore next */(0, _reactDom.findDOMNode)(listItem);
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(listItem, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);

    expect(listItemNode.style.background).toBe(props.style.background);
    expect(listItemNode.className).toContain(props.className);
    expect(btn.props.style).toEqual(props.tileStyle);
    expect(btn.props.className).toContain(props.tileClassName);
  });

  it('passes event listeners to the AccessibleFakeInkedButton', function () {
    var onMouseDown = jest.fn();
    var onMouseUp = jest.fn();
    var onDoubleClick = jest.fn();
    var onTouchMove = jest.fn();
    var onTouchCancel = jest.fn();
    var onFocus = jest.fn();
    var onBlur = jest.fn();

    var props = {
      primaryText: 'Test',
      onMouseDown: onMouseDown,
      onMouseUp: onMouseUp,
      onDoubleClick: onDoubleClick,
      onTouchMove: onTouchMove,
      onTouchCancel: onTouchCancel,
      onFocus: onFocus,
      onBlur: onBlur };


    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var btn = /* istanbul ignore next */(0, _reactAddonsTestUtils.findRenderedComponentWithType)(item, /* istanbul ignore next */_AccessibleFakeInkedButton2.default);
    expect(btn.props.onMouseDown).toBe(props.onMouseDown);
    expect(btn.props.onMouseUp).toBe(props.onMouseUp);
    expect(btn.props.onDoubleClick).toBe(props.onDoubleClick);
    expect(btn.props.onTouchMove).toBe(props.onTouchMove);
    expect(btn.props.onTouchCancel).toBe(props.onTouchCancel);
    expect(btn.props.onFocus).toBe(props.onFocus);
    expect(btn.props.onBlur).toBe(props.onBlur);
  });

  it('calls the onClick prop when _handleClick is called', function () {
    var props = { primaryText: 'Test', onClick: jest.fn() };
    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var clickEvent = { target: {} };
    item._handleClick(clickEvent);

    expect(props.onClick.mock.calls.length).toBe(1);
    expect(props.onClick.mock.calls[0][0]).toEqual(clickEvent);
  });

  it('calls the onMouseOver prop when _handleMouseOver is called', function () {
    var props = { primaryText: 'Test', onMouseOver: jest.fn() };
    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var mouseEvent = { target: {} };
    item._handleMouseOver(mouseEvent);

    expect(props.onMouseOver.mock.calls.length).toBe(1);
    expect(props.onMouseOver.mock.calls[0][0]).toEqual(mouseEvent);
  });

  it('calls the onMouseLeave prop when _handleMouseLeave is called', function () {
    var props = { primaryText: 'Test', onMouseLeave: jest.fn() };
    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var mouseEvent = { target: {} };
    item._handleMouseLeave(mouseEvent);

    expect(props.onMouseLeave.mock.calls.length).toBe(1);
    expect(props.onMouseLeave.mock.calls[0][0]).toEqual(mouseEvent);
  });

  it('calls the onTouchStart prop when _handleTouchStart is called', function () {
    var props = { primaryText: 'Test', onTouchStart: jest.fn() };
    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var touchEvent = { target: {} };
    item._handleTouchStart(touchEvent);

    expect(props.onTouchStart.mock.calls.length).toBe(1);
    expect(props.onTouchStart.mock.calls[0][0]).toEqual(touchEvent);
  });

  it('calls the onTouchEnd prop when _handleTouchEnd is called', function () {
    var props = { primaryText: 'Test', onTouchEnd: jest.fn() };
    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var touchEvent = { target: {} };
    item._handleTouchEnd(touchEvent);

    expect(props.onTouchEnd.mock.calls.length).toBe(1);
    expect(props.onTouchEnd.mock.calls[0][0]).toEqual(touchEvent);
  });

  it('calls the onKeyDown prop when _handleKeyDown is called', function () {
    var props = { primaryText: 'Test', onKeyDown: jest.fn() };
    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var keyEvent = { target: {} };
    item._handleKeyDown(keyEvent);

    expect(props.onKeyDown.mock.calls.length).toBe(1);
    expect(props.onKeyDown.mock.calls[0][0]).toEqual(keyEvent);
  });

  it('calls the onKeyUp prop when _handleKeyUp is called', function () {
    var props = { primaryText: 'Test', onKeyUp: jest.fn() };
    var item = /* istanbul ignore next */(0, _reactAddonsTestUtils.renderIntoDocument)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, props));
    var keyEvent = { target: {} };
    item._handleKeyUp(keyEvent);

    expect(props.onKeyUp.mock.calls.length).toBe(1);
    expect(props.onKeyUp.mock.calls[0][0]).toEqual(keyEvent);
  });
});