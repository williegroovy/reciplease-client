/* istanbul ignore next */'use strict'; /* eslint-env jest */
jest.unmock('../calculateValueDistance');

var /* istanbul ignore next */_calculateValueDistance = require('../calculateValueDistance'); /* istanbul ignore next */var _calculateValueDistance2 = _interopRequireDefault(_calculateValueDistance);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('calculateValueDistance', function () {
  it('returns a value and distance', function () {/* istanbul ignore next */var _calculateValueDistan =
    /* istanbul ignore next */(0, _calculateValueDistance2.default)(0, 100, 0, 100, 1, 0, 100, true),value = _calculateValueDistan.value,distance = _calculateValueDistan.distance;
    expect(value).toBe(0);
    expect(distance).toBe(0);
  });

  it('can calculate the distance when the step is a number greater than 0 and less than 1', function () {
    expect( /* istanbul ignore next */(0, _calculateValueDistance2.default)(25, 100, 0, 100, 0.1, 0, 100, true)).toEqual({ value: 2.5, distance: 25 });
    expect( /* istanbul ignore next */(0, _calculateValueDistance2.default)(10, 100, 0, 100, 0.1, 0, 100, false)).toEqual({ value: 1, distance: 10 });
  });

  it('prevents negative distance', function () {
    expect( /* istanbul ignore next */(0, _calculateValueDistance2.default)(25, 100, 100, 100, 1, 0, 100, true)).toEqual({ value: 0, distance: 0 });
  });

  it('prevents a distance greater than 100', function () {
    expect( /* istanbul ignore next */(0, _calculateValueDistance2.default)(125, 100, 0, 100, 1, 0, 100, true)).toEqual({ value: 100, distance: 100 });
  });

  it('prevents a value less than the min', function () {
    expect( /* istanbul ignore next */(0, _calculateValueDistance2.default)(25, 100, 100, 75, 1, 25, 100, true)).toEqual({ value: 25, distance: 0 });
  });

  it('prevents a value greater than the max', function () {
    expect( /* istanbul ignore next */(0, _calculateValueDistance2.default)(125, 100, 0, 100, 1, 0, 100, true)).toEqual({ value: 100, distance: 100 });
  });
});